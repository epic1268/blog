<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>网络编程实战 on Docs</title>
    <link>https://politcloud.org/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/</link>
    <description>Recent content in 网络编程实战 on Docs</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 10 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://politcloud.org/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01__追古溯源：TCP_IP和Linux是如何改变世界的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/01__%E8%BF%BD%E5%8F%A4%E6%BA%AF%E6%BA%90tcp_ip%E5%92%8Clinux%E6%98%AF%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98%E4%B8%96%E7%95%8C%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/01__%E8%BF%BD%E5%8F%A4%E6%BA%AF%E6%BA%90tcp_ip%E5%92%8Clinux%E6%98%AF%E5%A6%82%E4%BD%95%E6%94%B9%E5%8F%98%E4%B8%96%E7%95%8C%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是盛延敏。今天是网络编程课程的第一课，我想你一定满怀热情，期望快速进入到技术细节里，了解那些你不熟知的编程技能。而今天我却想和你讲讲历史，虽然这些事情看着不是“干货”，但它可以帮助你理解网络编程中各种技术的来龙去脉。&lt;/p&gt;</description>
    </item>
    <item>
      <title>02__网络编程模型：认识客户端-服务器网络模型的基本概念</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/02__%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E8%AE%A4%E8%AF%86%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/02__%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E8%AE%A4%E8%AF%86%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>&lt;p&gt;你好，我是盛延敏。上一讲我们学习了 TCP/IP 的创建和历史，以及 Linux 操作系统的建立和发展，相信你对网络编程这棵大树已经有了一个宏观上的认识，那么今天我们再往前走几步，近距离看看这棵大树的细枝末节到底是怎样的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>03丨套接字和地址：像电话和电话号码一样理解它们</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/03%E4%B8%A8%E5%A5%97%E6%8E%A5%E5%AD%97%E5%92%8C%E5%9C%B0%E5%9D%80%E5%83%8F%E7%94%B5%E8%AF%9D%E5%92%8C%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E4%B8%80%E6%A0%B7%E7%90%86%E8%A7%A3%E5%AE%83%E4%BB%AC/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/03%E4%B8%A8%E5%A5%97%E6%8E%A5%E5%AD%97%E5%92%8C%E5%9C%B0%E5%9D%80%E5%83%8F%E7%94%B5%E8%AF%9D%E5%92%8C%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E4%B8%80%E6%A0%B7%E7%90%86%E8%A7%A3%E5%AE%83%E4%BB%AC/</guid>
      <description>&lt;p&gt;在网络编程中，我们经常会提到 socket 这个词，它的中文翻译为套接字，有的时候也叫做套接口。&lt;/p&gt;&#xA;&lt;p&gt;socket 这个英文单词的原意是“插口”“插槽”，在网络编程中，它的寓意是可以通过插口接入的方式，快速完成网络连接和数据收发。你可以把它想象成现实世界的电源插口，或者是早期上网需要的网络插槽，所以 socket 也可以看做是对物理世界的直接映射。&lt;/p&gt;</description>
    </item>
    <item>
      <title>04__TCP三次握手：怎么使用套接字格式建立连接？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/04__tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8%E5%A5%97%E6%8E%A5%E5%AD%97%E6%A0%BC%E5%BC%8F%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/04__tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E6%80%8E%E4%B9%88%E4%BD%BF%E7%94%A8%E5%A5%97%E6%8E%A5%E5%AD%97%E6%A0%BC%E5%BC%8F%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 4 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;在上一讲里我们介绍了 IPv4、IPv6 以及本地套接字格式，这一讲我们来讲一讲怎么使用这些套接字格式完成连接的建立，当然，经典的 TCP 三次握手理论也会贯穿其中。我希望经过这一讲的讲解，你会牢牢记住 TCP 三次握手和客户端、服务器模型。&lt;/p&gt;</description>
    </item>
    <item>
      <title>05__使用套接字进行读写：开始交流吧</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/05__%E4%BD%BF%E7%94%A8%E5%A5%97%E6%8E%A5%E5%AD%97%E8%BF%9B%E8%A1%8C%E8%AF%BB%E5%86%99%E5%BC%80%E5%A7%8B%E4%BA%A4%E6%B5%81%E5%90%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/05__%E4%BD%BF%E7%94%A8%E5%A5%97%E6%8E%A5%E5%AD%97%E8%BF%9B%E8%A1%8C%E8%AF%BB%E5%86%99%E5%BC%80%E5%A7%8B%E4%BA%A4%E6%B5%81%E5%90%A7/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 5 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;在前面的章节中，我们讲述了套接字相关的知识，包括套接字的格式，套接字的创建以及 TCP 连接的建立等。在这一讲里，我来讲一下如何使用创建的套接字收发数据。&lt;/p&gt;</description>
    </item>
    <item>
      <title>06__嗨，别忘了UDP这个小兄弟</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/06__%E5%97%A8%E5%88%AB%E5%BF%98%E4%BA%86udp%E8%BF%99%E4%B8%AA%E5%B0%8F%E5%85%84%E5%BC%9F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/06__%E5%97%A8%E5%88%AB%E5%BF%98%E4%BA%86udp%E8%BF%99%E4%B8%AA%E5%B0%8F%E5%85%84%E5%BC%9F/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 6 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;前面几讲我们讲述了 TCP 方面的编程知识，这一讲我们来讲讲 UDP 方面的编程知识。&lt;/p&gt;&#xA;&lt;p&gt;如果说 TCP 是网络协议的“大哥”，那么 UDP 可以说是“小兄弟”。这个小兄弟和大哥比，有什么差异呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>07__What_还有本地套接字？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/07__what_%E8%BF%98%E6%9C%89%E6%9C%AC%E5%9C%B0%E5%A5%97%E6%8E%A5%E5%AD%97/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/07__what_%E8%BF%98%E6%9C%89%E6%9C%AC%E5%9C%B0%E5%A5%97%E6%8E%A5%E5%AD%97/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 7 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;上一篇文章中，我们讲了 UDP。很多同学都知道 TCP 和 UDP，但是对本地套接字却不甚了解。&lt;/p&gt;&#xA;&lt;p&gt;实际上，本地套接字是 IPC，也就是本地进程间通信的一种实现方式。除了本地套接字以外，其它技术，诸如管道、共享消息队列等也是进程间通信的常用方法，但因为本地套接字开发便捷，接受度高，所以普遍适用于在同一台主机上进程间通信的各种场景。&lt;/p&gt;</description>
    </item>
    <item>
      <title>08__工欲善其事必先利其器：学会使用各种工具</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/08__%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8%E5%90%84%E7%A7%8D%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/08__%E5%B7%A5%E6%AC%B2%E5%96%84%E5%85%B6%E4%BA%8B%E5%BF%85%E5%85%88%E5%88%A9%E5%85%B6%E5%99%A8%E5%AD%A6%E4%BC%9A%E4%BD%BF%E7%94%A8%E5%90%84%E7%A7%8D%E5%B7%A5%E5%85%B7/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 8 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;上一讲我们讲到了本地套接字，加上前面介绍的 TCP、UDP 套接字，你会发现我们已经比较全面地接触了套接字。&lt;/p&gt;</description>
    </item>
    <item>
      <title>09丨答疑篇：学习网络编程前，需要准备哪些东西？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/09%E4%B8%A8%E7%AD%94%E7%96%91%E7%AF%87%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%89%8D%E9%9C%80%E8%A6%81%E5%87%86%E5%A4%87%E5%93%AA%E4%BA%9B%E4%B8%9C%E8%A5%BF/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/09%E4%B8%A8%E7%AD%94%E7%96%91%E7%AF%87%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%89%8D%E9%9C%80%E8%A6%81%E5%87%86%E5%A4%87%E5%93%AA%E4%BA%9B%E4%B8%9C%E8%A5%BF/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 9 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;今天是基础篇的最后一讲。在这一讲中，我将会针对基础篇中大家提出的普遍问题进行总结和答疑，让我们整理一下，再接着学习下一个模块的内容。&lt;/p&gt;</description>
    </item>
    <item>
      <title>10__TIME_WAIT：隐藏在细节下的魔鬼</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/10__time_wait%E9%9A%90%E8%97%8F%E5%9C%A8%E7%BB%86%E8%8A%82%E4%B8%8B%E7%9A%84%E9%AD%94%E9%AC%BC/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/10__time_wait%E9%9A%90%E8%97%8F%E5%9C%A8%E7%BB%86%E8%8A%82%E4%B8%8B%E7%9A%84%E9%AD%94%E9%AC%BC/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这是网络编程实战的第 10 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;在前面的基础篇里，我们对网络编程涉及到的基础知识进行了梳理，主要内容包括 C/S 编程模型、TCP 协议、UDP 协议和本地套接字等内容。在提高篇里，我将结合我的经验，引导你对 TCP 和 UDP 进行更深入的理解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>11__优雅地关闭还是粗暴地关闭_</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/11__%E4%BC%98%E9%9B%85%E5%9C%B0%E5%85%B3%E9%97%AD%E8%BF%98%E6%98%AF%E7%B2%97%E6%9A%B4%E5%9C%B0%E5%85%B3%E9%97%AD_/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/11__%E4%BC%98%E9%9B%85%E5%9C%B0%E5%85%B3%E9%97%AD%E8%BF%98%E6%98%AF%E7%B2%97%E6%9A%B4%E5%9C%B0%E5%85%B3%E9%97%AD_/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 11 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;上一讲我们讲到了 TCP 的四次挥手，其中发起连接关闭的一方会有一段时间处于 TIME_WAIT 状态。那么究竟如何来发起连接关闭呢？这一讲我们就来讨论一下。&lt;/p&gt;</description>
    </item>
    <item>
      <title>12__连接无效：使用Keep-Alive还是应用心跳来检测？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/12__%E8%BF%9E%E6%8E%A5%E6%97%A0%E6%95%88%E4%BD%BF%E7%94%A8keep-alive%E8%BF%98%E6%98%AF%E5%BA%94%E7%94%A8%E5%BF%83%E8%B7%B3%E6%9D%A5%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/12__%E8%BF%9E%E6%8E%A5%E6%97%A0%E6%95%88%E4%BD%BF%E7%94%A8keep-alive%E8%BF%98%E6%98%AF%E5%BA%94%E7%94%A8%E5%BF%83%E8%B7%B3%E6%9D%A5%E6%A3%80%E6%B5%8B/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 12 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;上一篇文章中，我们讲到了如何使用 close 和 shutdown 来完成连接的关闭，在大多数情况下，我们会优选 shutdown 来完成对连接一个方向的关闭，待对端处理完之后，再完成另外一个方向的关闭。&lt;/p&gt;</description>
    </item>
    <item>
      <title>13__小数据包应对之策：理解TCP协议中的动态数据传输</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/13__%E5%B0%8F%E6%95%B0%E6%8D%AE%E5%8C%85%E5%BA%94%E5%AF%B9%E4%B9%8B%E7%AD%96%E7%90%86%E8%A7%A3tcp%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/13__%E5%B0%8F%E6%95%B0%E6%8D%AE%E5%8C%85%E5%BA%94%E5%AF%B9%E4%B9%8B%E7%AD%96%E7%90%86%E8%A7%A3tcp%E5%8D%8F%E8%AE%AE%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 13 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章里，我在应用程序中模拟了 TCP Keep-Alive 机制，完成 TCP 心跳检测，达到发现不活跃连接的目的。在这一讲里，我们将从 TCP 角度看待数据流的发送和接收。&lt;/p&gt;</description>
    </item>
    <item>
      <title>14丨UDP也可以是“已连接”？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/14%E4%B8%A8udp%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%98%AF%E5%B7%B2%E8%BF%9E%E6%8E%A5/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/14%E4%B8%A8udp%E4%B9%9F%E5%8F%AF%E4%BB%A5%E6%98%AF%E5%B7%B2%E8%BF%9E%E6%8E%A5/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战的第 14 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;在前面的基础篇中，我们已经接触到了 UDP 数据报协议相关的知识，在我们的脑海里，已经深深印上了“&lt;strong&gt;UDP 等于无连接协议&lt;/strong&gt;”的特性。那么看到这一讲的题目，你是不是觉得有点困惑？没关系，和我一起进入”已连接“的 UDP 的世界，回头再看这个标题，相信你就会恍然大悟。&lt;/p&gt;</description>
    </item>
    <item>
      <title>15__怎么老是出现“地址已经被使用”？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/15__%E6%80%8E%E4%B9%88%E8%80%81%E6%98%AF%E5%87%BA%E7%8E%B0%E5%9C%B0%E5%9D%80%E5%B7%B2%E7%BB%8F%E8%A2%AB%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/15__%E6%80%8E%E4%B9%88%E8%80%81%E6%98%AF%E5%87%BA%E7%8E%B0%E5%9C%B0%E5%9D%80%E5%B7%B2%E7%BB%8F%E8%A2%AB%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战的第 15 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;上一讲我们讲到 UDP 也可以像 TCP 一样，使用 connect 方法，以快速获取异步错误的信息。在今天的内容里，我们将讨论服务器端程序重启时，地址被占用的原因和解决方法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>16__如何理解TCP的“流”？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/16__%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3tcp%E7%9A%84%E6%B5%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/16__%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3tcp%E7%9A%84%E6%B5%81/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 16 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;上一讲我们讲到了使用 SO_REUSEADDR 套接字选项，可以让服务器满足快速重启的需求。在这一讲里，我们回到数据的收发这个主题，谈一谈如何理解 TCP 的数据流特性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>17__TCP并不总是“可靠”的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/17__tcp%E5%B9%B6%E4%B8%8D%E6%80%BB%E6%98%AF%E5%8F%AF%E9%9D%A0%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/17__tcp%E5%B9%B6%E4%B8%8D%E6%80%BB%E6%98%AF%E5%8F%AF%E9%9D%A0%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 17 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;在前面一讲中，我们讲到如何理解 TCP 数据流的本质，进而引出了报文格式和解析。在这一讲里，我们讨论通过如何增强读写操作，以处理各种“不可靠”的场景。&lt;/p&gt;</description>
    </item>
    <item>
      <title>18__防人之心不可无：检查数据的有效性</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/18__%E9%98%B2%E4%BA%BA%E4%B9%8B%E5%BF%83%E4%B8%8D%E5%8F%AF%E6%97%A0%E6%A3%80%E6%9F%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%89%E6%95%88%E6%80%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/18__%E9%98%B2%E4%BA%BA%E4%B9%8B%E5%BF%83%E4%B8%8D%E5%8F%AF%E6%97%A0%E6%A3%80%E6%9F%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E6%9C%89%E6%95%88%E6%80%A7/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 18 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;在前面一讲中，我们仔细分析了引起故障的原因，并且已经知道为了应对可能出现的各种故障，必须在程序中做好防御工作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>19丨提高篇答疑：如何理解TCP四次挥手？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/19%E4%B8%A8%E6%8F%90%E9%AB%98%E7%AF%87%E7%AD%94%E7%96%91%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3tcp%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/19%E4%B8%A8%E6%8F%90%E9%AB%98%E7%AF%87%E7%AD%94%E7%96%91%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3tcp%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 19 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;这一篇文章是提高篇的答疑部分，也是提高篇的最后一篇文章。非常感谢大家的积极评论与留言，让每一篇文章的留言区都成为学习互动的好地方。在今天的内容里，我将针对大家的问题做一次集中回答，希望能帮助你解决前面碰到的一些问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>20__大名⿍⿍的select：看我如何同时感知多个I_O事件</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/20__%E5%A4%A7%E5%90%8D%E7%9A%84select%E7%9C%8B%E6%88%91%E5%A6%82%E4%BD%95%E5%90%8C%E6%97%B6%E6%84%9F%E7%9F%A5%E5%A4%9A%E4%B8%AAi_o%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/20__%E5%A4%A7%E5%90%8D%E7%9A%84select%E7%9C%8B%E6%88%91%E5%A6%82%E4%BD%95%E5%90%8C%E6%97%B6%E6%84%9F%E7%9F%A5%E5%A4%9A%E4%B8%AAi_o%E4%BA%8B%E4%BB%B6/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战的第 20 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;这一讲是性能篇的第一讲。在性能篇里，我们将把注意力放到如何设计高并发高性能的网络服务器程序上。我希望通过这一模块的学习，让你能够掌握多路复用、异步 I/O、多线程等知识，从而可以写出支持并发 10K 以上的高性能网络服务器程序。&lt;/p&gt;</description>
    </item>
    <item>
      <title>21__poll：另一种I_O多路复用</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/21__poll%E5%8F%A6%E4%B8%80%E7%A7%8Di_o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/21__poll%E5%8F%A6%E4%B8%80%E7%A7%8Di_o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这是网络编程实战第 21 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;上一讲我们讲到了 I/O 多路复用技术，并以 select 为核心，展示了 I/O 多路复用技术的能力。select 方法是多个 UNIX 平台支持的非常常见的 I/O 多路复用技术，它通过描述符集合来表示检测的 I/O 对象，通过三个不同的描述符集合来描述 I/O 事件：可读、可写和异常。但是 select 有一个缺点，那就是所支持的文件描述符的个数是有限的。在 Linux 系统中，select 的默认最大值为 1024。&lt;/p&gt;</description>
    </item>
    <item>
      <title>22__非阻塞I_O：提升性能的加速器</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/22__%E9%9D%9E%E9%98%BB%E5%A1%9Ei_o%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD%E7%9A%84%E5%8A%A0%E9%80%9F%E5%99%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/22__%E9%9D%9E%E9%98%BB%E5%A1%9Ei_o%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD%E7%9A%84%E5%8A%A0%E9%80%9F%E5%99%A8/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 22 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;在性能篇的前两讲中，我分别介绍了 select 和 poll 两种不同的 I/O 多路复用技术。在接下来的这一讲中，我将带大家进入非阻塞 I/O 模式的世界。事实上，非阻塞 I/O 配合 I/O 多路复用，是高性能网络编程中的常见技术。&lt;/p&gt;</description>
    </item>
    <item>
      <title>23__Linux利器：epoll的前世今生</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/23__linux%E5%88%A9%E5%99%A8epoll%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/23__linux%E5%88%A9%E5%99%A8epoll%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 23 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;性能篇的前三讲，非阻塞 I/O 加上 I/O 多路复用，已经渐渐帮助我们在高性能网络编程这个领域搭建了初步的基石。但是，离最终的目标还差那么一点，如果说 I/O 多路复用帮我们打开了高性能网络编程的窗口，那么今天的主题——epoll，将为我们增添足够的动力。&lt;/p&gt;</description>
    </item>
    <item>
      <title>24__C10K问题：高并发模型设计</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/24__c10k%E9%97%AE%E9%A2%98%E9%AB%98%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/24__c10k%E9%97%AE%E9%A2%98%E9%AB%98%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 24 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;在性能篇的前 4 讲里，我们陆续讲解了 select、poll、epoll 等几种 I/O 多路复用技术，以及非阻塞 I/O 模型，为高性能网络编程提供了必要的知识储备。这一讲里，我们了解一下历史上有名的 C10K 问题，并借着 C10K 问题系统地梳理一下高性能网络编程的方法论。&lt;/p&gt;</description>
    </item>
    <item>
      <title>25__使用阻塞I_O和进程模型：最传统的方式</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/25__%E4%BD%BF%E7%94%A8%E9%98%BB%E5%A1%9Ei_o%E5%92%8C%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%9C%80%E4%BC%A0%E7%BB%9F%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/25__%E4%BD%BF%E7%94%A8%E9%98%BB%E5%A1%9Ei_o%E5%92%8C%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%9C%80%E4%BC%A0%E7%BB%9F%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 25 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;上一讲中，我们讲到了 C10K 问题，并引入了解决 C10K 问题的各种解法。其中，最简单也是最有效的一种解决方法就是为每个连接创建一个独立的进程去服务。那么，到底如何为每个连接客户创建一个进程来服务呢？在这其中，又需要特别注意什么呢？今天我们就围绕这部分内容展开，期望经过今天的学习，你对父子进程、僵尸进程、使用进程处理连接等有一个比较直观的理解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>26__使用阻塞I_O和线程模型：换一种轻量的方式</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/26__%E4%BD%BF%E7%94%A8%E9%98%BB%E5%A1%9Ei_o%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%8D%A2%E4%B8%80%E7%A7%8D%E8%BD%BB%E9%87%8F%E7%9A%84%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/26__%E4%BD%BF%E7%94%A8%E9%98%BB%E5%A1%9Ei_o%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%8D%A2%E4%B8%80%E7%A7%8D%E8%BD%BB%E9%87%8F%E7%9A%84%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 26 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;在前面一讲中，我们使用了进程模型来处理用户连接请求，进程切换上下文的代价是比较高的，幸运的是，有一种轻量级的模型可以处理多用户连接请求，这就是线程模型。这一讲里，我们就来了解一下线程模型。&lt;/p&gt;</description>
    </item>
    <item>
      <title>27__I_O多路复用遇上线程：使用poll单线程处理所有I_O事件</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/27__i_o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E9%81%87%E4%B8%8A%E7%BA%BF%E7%A8%8B%E4%BD%BF%E7%94%A8poll%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86%E6%89%80%E6%9C%89i_o%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/27__i_o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E9%81%87%E4%B8%8A%E7%BA%BF%E7%A8%8B%E4%BD%BF%E7%94%A8poll%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86%E6%89%80%E6%9C%89i_o%E4%BA%8B%E4%BB%B6/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 27 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;我在前面两讲里，分别使用了 fork 进程和 pthread 线程来处理多并发，这两种技术使用简单，但是性能却会随着并发数的上涨而快速下降，并不能满足极端高并发的需求。就像第 24 讲中讲到的一样，这个时候我们需要寻找更好的解决之道，这个解决之道基本的思想就是 I/O 事件分发。&lt;/p&gt;</description>
    </item>
    <item>
      <title>28__I_O多路复用进阶：子线程使用poll处理连接I_O事件</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/28__i_o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E8%BF%9B%E9%98%B6%E5%AD%90%E7%BA%BF%E7%A8%8B%E4%BD%BF%E7%94%A8poll%E5%A4%84%E7%90%86%E8%BF%9E%E6%8E%A5i_o%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/28__i_o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E8%BF%9B%E9%98%B6%E5%AD%90%E7%BA%BF%E7%A8%8B%E4%BD%BF%E7%94%A8poll%E5%A4%84%E7%90%86%E8%BF%9E%E6%8E%A5i_o%E4%BA%8B%E4%BB%B6/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 28 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;在前面的第 27 讲中，我们引入了 reactor 反应堆模式，并且让 reactor 反应堆同时分发 Acceptor 上的连接建立事件和已建立连接的 I/O 事件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>29__渐入佳境：使用epoll和多线程模型</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/29__%E6%B8%90%E5%85%A5%E4%BD%B3%E5%A2%83%E4%BD%BF%E7%94%A8epoll%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/29__%E6%B8%90%E5%85%A5%E4%BD%B3%E5%A2%83%E4%BD%BF%E7%94%A8epoll%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 29 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;在前面的第 27 讲和第 28 讲中，我介绍了基于 poll 事件分发的 reactor 反应堆模式，以及主从反应堆模式。我们知道，和 poll 相比，Linux 提供的 epoll 是一种更为高效的事件分发机制。在这一讲里，我们将切换到 epoll 实现的主从反应堆模式，并且分析一下为什么 epoll 的性能会强于 poll 等传统的事件分发机制。&lt;/p&gt;</description>
    </item>
    <item>
      <title>30__真正的大杀器：异步I_O探索</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/30__%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%A4%A7%E6%9D%80%E5%99%A8%E5%BC%82%E6%AD%A5i_o%E6%8E%A2%E7%B4%A2/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/30__%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%A4%A7%E6%9D%80%E5%99%A8%E5%BC%82%E6%AD%A5i_o%E6%8E%A2%E7%B4%A2/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战的第 30 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;在性能篇的前几讲中，我们谈到了阻塞 I/O、非阻塞 I/O 以及像 select、poll、epoll 等 I/O 多路复用技术，并在此基础上结合线程技术，实现了以事件分发为核心的 reactor 反应堆模式。你或许还听说过一个叫做 Proactor 的网络事件驱动模式，这个 Proactor 模式和 reactor 模式到底有什么区别和联系呢？在今天的内容中，我们先讲述异步 I/O，再一起揭开以异步 I/O 为基础的 proactor 模式的面纱。&lt;/p&gt;</description>
    </item>
    <item>
      <title>31丨性能篇答疑--epoll源码深度剖析</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/31%E4%B8%A8%E6%80%A7%E8%83%BD%E7%AF%87%E7%AD%94%E7%96%91--epoll%E6%BA%90%E7%A0%81%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/31%E4%B8%A8%E6%80%A7%E8%83%BD%E7%AF%87%E7%AD%94%E7%96%91--epoll%E6%BA%90%E7%A0%81%E6%B7%B1%E5%BA%A6%E5%89%96%E6%9E%90/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，今天是网络编程实战性能篇的答疑模块，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;在性能篇中，我主要围绕 C10K 问题进行了深入剖析，最后引出了事件分发机制和多线程。可以说，基于 epoll 的事件分发能力，是 Linux 下高性能网络编程的不二之选。如果你觉得还不过瘾，期望有更深刻的认识和理解，那么在性能篇的答疑中，我就带你一起梳理一下 epoll 的源代码，从中我们一定可以有更多的发现和领悟。&lt;/p&gt;</description>
    </item>
    <item>
      <title>32__自己动手写高性能HTTP服务器（一）：设计和思路</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/32__%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E9%AB%98%E6%80%A7%E8%83%BDhttp%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%80%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/32__%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E9%AB%98%E6%80%A7%E8%83%BDhttp%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%80%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%80%9D%E8%B7%AF/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 32 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;从这一讲开始，我们进入实战篇，开启一个高性能 HTTP 服务器的编写之旅。&lt;/p&gt;&#xA;&lt;p&gt;在开始编写高性能 HTTP 服务器之前，我们先要构建一个支持 TCP 的高性能网络编程框架，完成这个 TCP 高性能网络框架之后，再增加 HTTP 特性的支持就比较容易了，这样就可以很快开发出一个高性能的 HTTP 服务器程序。&lt;/p&gt;</description>
    </item>
    <item>
      <title>33__自己动手写高性能HTTP服务器（二）：I_O模型和多线程模型实现</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/33__%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E9%AB%98%E6%80%A7%E8%83%BDhttp%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BA%8Ci_o%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/33__%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E9%AB%98%E6%80%A7%E8%83%BDhttp%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BA%8Ci_o%E6%A8%A1%E5%9E%8B%E5%92%8C%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 33 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;这一讲，我们延续第 32 讲的话题，继续解析高性能网络编程框架的 I/O 模型和多线程模型设计部分。&lt;/p&gt;&#xA;&lt;h2 id=&#34;多线程设计的几个考虑&#34;&gt;多线程设计的几个考虑&lt;/h2&gt;&#xA;&lt;p&gt;在我们的设计中，main reactor 线程是一个 acceptor 线程，这个线程一旦创建，会以 event_loop 形式阻塞在 event_dispatcher 的 dispatch 方法上，实际上，它在等待监听套接字上的事件发生，也就是已完成的连接，一旦有连接完成，就会创建出连接对象 tcp_connection，以及 channel 对象等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>34__自己动手写高性能HTTP服务器（三）：TCP字节流处理和HTTP协议实现</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/34__%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E9%AB%98%E6%80%A7%E8%83%BDhttp%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%89tcp%E5%AD%97%E8%8A%82%E6%B5%81%E5%A4%84%E7%90%86%E5%92%8Chttp%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/34__%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99%E9%AB%98%E6%80%A7%E8%83%BDhttp%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%89tcp%E5%AD%97%E8%8A%82%E6%B5%81%E5%A4%84%E7%90%86%E5%92%8Chttp%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战第 34 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;这一讲，我们延续第 33 讲的话题，继续解析高性能网络编程框架的字节流处理部分，并为网络编程框架增加 HTTP 相关的功能，在此基础上完成 HTTP 高性能服务器的编写。&lt;/p&gt;</description>
    </item>
    <item>
      <title>35__答疑：编写高性能网络编程框架时，都需要注意哪些问题？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/35__%E7%AD%94%E7%96%91%E7%BC%96%E5%86%99%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6%E6%97%B6%E9%83%BD%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/35__%E7%AD%94%E7%96%91%E7%BC%96%E5%86%99%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6%E6%97%B6%E9%83%BD%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，这里是网络编程实战的第 35 讲，欢迎回来。&lt;/p&gt;&#xA;&lt;p&gt;这一篇文章是实战篇的答疑部分，也是本系列的最后一篇文章。非常感谢你的积极评论与留言，让每一篇文章的留言区都成为学习互动的好地方。在今天的内容里，我将针对评论区的问题做一次集中回答，希望能帮助你解决前面碰到的一些问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>80-网络编程实战</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/80-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/80-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/</guid>
      <description></description>
    </item>
    <item>
      <title>结束语丨我相信这不是结束，让我们江湖再见</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/%E7%BB%93%E6%9D%9F%E8%AF%AD%E4%B8%A8%E6%88%91%E7%9B%B8%E4%BF%A1%E8%BF%99%E4%B8%8D%E6%98%AF%E7%BB%93%E6%9D%9F%E8%AE%A9%E6%88%91%E4%BB%AC%E6%B1%9F%E6%B9%96%E5%86%8D%E8%A7%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/%E7%BB%93%E6%9D%9F%E8%AF%AD%E4%B8%A8%E6%88%91%E7%9B%B8%E4%BF%A1%E8%BF%99%E4%B8%8D%E6%98%AF%E7%BB%93%E6%9D%9F%E8%AE%A9%E6%88%91%E4%BB%AC%E6%B1%9F%E6%B9%96%E5%86%8D%E8%A7%81/</guid>
      <description>&lt;p&gt;这是“网络编程实战”的最后一篇文章了，提起笔来，竟然感觉到有些不舍，回想起这个专栏的诞生，和总编、编辑反复地讨论选题，根据用户反馈不断打磨大纲，一幕幕都感觉恍如昨日。时间过得飞快，感谢大家几个月以来的相伴，不管大家对这个专栏有什么样的评价，我都可以自豪地说，我是很用心地在做这个事情。感谢极客时间的总编郭蕾，还有这个专栏的编辑，没有你们的支持，很难想象我会坚持完成这个专栏。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开篇词__学好网络编程，需要掌握哪些核心问题？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/%E5%BC%80%E7%AF%87%E8%AF%8D__%E5%AD%A6%E5%A5%BD%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E5%93%AA%E4%BA%9B%E6%A0%B8%E5%BF%83%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/%E5%BC%80%E7%AF%87%E8%AF%8D__%E5%AD%A6%E5%A5%BD%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1%E5%93%AA%E4%BA%9B%E6%A0%B8%E5%BF%83%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;你好，我是盛延敏，欢迎你的加入。在接下来的几个月时间里，我会和你一起深入学习网络编程。网络编程是一个高度重视实战的内容模块，工作这么多年，我一直都在近距离与它打交道。&lt;/p&gt;</description>
    </item>
    <item>
      <title>期中大作业丨动手编写一个自己的程序吧！</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/%E6%9C%9F%E4%B8%AD%E5%A4%A7%E4%BD%9C%E4%B8%9A%E4%B8%A8%E5%8A%A8%E6%89%8B%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%90%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/%E6%9C%9F%E4%B8%AD%E5%A4%A7%E4%BD%9C%E4%B8%9A%E4%B8%A8%E5%8A%A8%E6%89%8B%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%90%A7/</guid>
      <description>&lt;p&gt;你好，我们之前已经学习了网络编程的基础篇和提高篇。经过近两个月的学习，不知道你对这些内容的掌握程度如何呢？&lt;/p&gt;&#xA;&lt;p&gt;我之前说过，网络编程是一个既重视理论，又重视实战的内容模块。一味地消化理论并不足以让你掌握网络编程，只有自己亲自动手写代码，编写程序，才能对 TCP、UDP、套接字这些内容有更深切的体会，才能切实感受到它们是如何帮助我们的程序进行互联互通的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>期中大作业丨题目以及解答剖析</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/%E6%9C%9F%E4%B8%AD%E5%A4%A7%E4%BD%9C%E4%B8%9A%E4%B8%A8%E9%A2%98%E7%9B%AE%E4%BB%A5%E5%8F%8A%E8%A7%A3%E7%AD%94%E5%89%96%E6%9E%90/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/%E6%9C%9F%E4%B8%AD%E5%A4%A7%E4%BD%9C%E4%B8%9A%E4%B8%A8%E9%A2%98%E7%9B%AE%E4%BB%A5%E5%8F%8A%E8%A7%A3%E7%AD%94%E5%89%96%E6%9E%90/</guid>
      <description>&lt;p&gt;你好，今天是期中大作业讲解课。诚如一位同学所言，这次的大作业不是在考察网络编程的细节，而是在考如何使用系统 API 完成 cd、pwd、ls 等功能。不过呢，网络编程的框架总归还是要掌握的。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
