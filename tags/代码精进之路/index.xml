<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>代码精进之路 on Docs</title>
    <link>https://politcloud.org/tags/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/</link>
    <description>Recent content in 代码精进之路 on Docs</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 10 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://politcloud.org/tags/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01你写的每一行代码都是你的名片</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/01%E4%BD%A0%E5%86%99%E7%9A%84%E6%AF%8F%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E9%83%BD%E6%98%AF%E4%BD%A0%E7%9A%84%E5%90%8D%E7%89%87/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/01%E4%BD%A0%E5%86%99%E7%9A%84%E6%AF%8F%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E9%83%BD%E6%98%AF%E4%BD%A0%E7%9A%84%E5%90%8D%E7%89%87/</guid>
      <description>&lt;p&gt;开篇词 | 你写的每一行代码，都是你的名片&lt;/p&gt;&#xA;&lt;p&gt;你好，我是范学雷，现在是 Oracle 的主任工程师，也是 OpenJDK 和 Java 安全的评审成员。很高兴和你一起聊聊怎么写好代码这个话题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>02从条件运算符说起反思什么是好代码</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/02%E4%BB%8E%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6%E8%AF%B4%E8%B5%B7%E5%8F%8D%E6%80%9D%E4%BB%80%E4%B9%88%E6%98%AF%E5%A5%BD%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/02%E4%BB%8E%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6%E8%AF%B4%E8%B5%B7%E5%8F%8D%E6%80%9D%E4%BB%80%E4%B9%88%E6%98%AF%E5%A5%BD%E4%BB%A3%E7%A0%81/</guid>
      <description>&lt;p&gt;01 | 从条件运算符说起，反思什么是好代码&lt;/p&gt;&#xA;&lt;p&gt;写出优秀的代码是我们每一个程序员的毕生追求，毕竟写代码本身就是个技术活，代码的好坏，其实也就是我们工艺的好坏。作为一个技术类的工种，我们没有理由不去思考如何写出优秀、让人惊叹的代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>03把错误关在笼子里的五道关卡</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/03%E6%8A%8A%E9%94%99%E8%AF%AF%E5%85%B3%E5%9C%A8%E7%AC%BC%E5%AD%90%E9%87%8C%E7%9A%84%E4%BA%94%E9%81%93%E5%85%B3%E5%8D%A1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/03%E6%8A%8A%E9%94%99%E8%AF%AF%E5%85%B3%E5%9C%A8%E7%AC%BC%E5%AD%90%E9%87%8C%E7%9A%84%E4%BA%94%E9%81%93%E5%85%B3%E5%8D%A1/</guid>
      <description>&lt;p&gt;02 | 把错误关在笼子里的五道关卡&lt;/p&gt;&#xA;&lt;p&gt;上一讲中，我们一起讨论了什么是优秀的代码。简而言之，优秀的代码是经济、规范、安全的代码。在平时的工作中，我们要朝着这个方向努力，时常站在团队、流程、个人能力的角度去思考优秀代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>04优秀程序员的六个关键特质</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/04%E4%BC%98%E7%A7%80%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%85%AD%E4%B8%AA%E5%85%B3%E9%94%AE%E7%89%B9%E8%B4%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/04%E4%BC%98%E7%A7%80%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E5%85%AD%E4%B8%AA%E5%85%B3%E9%94%AE%E7%89%B9%E8%B4%A8/</guid>
      <description>&lt;p&gt;03 | 优秀程序员的六个关键特质&lt;/p&gt;&#xA;&lt;p&gt;上一讲我们从“五道关卡”的角度讨论了如何写出优秀代码这个话题。对我们每个程序员个体来说，其实第一道“程序员”关卡最重要。没有优秀的程序员，就没有优秀的代码。那么，什么样的程序员才是优秀的程序员呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>05代码规范的价值复盘苹果公司的GoToFail漏洞</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/05%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E7%9A%84%E4%BB%B7%E5%80%BC%E5%A4%8D%E7%9B%98%E8%8B%B9%E6%9E%9C%E5%85%AC%E5%8F%B8%E7%9A%84gotofail%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/05%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E7%9A%84%E4%BB%B7%E5%80%BC%E5%A4%8D%E7%9B%98%E8%8B%B9%E6%9E%9C%E5%85%AC%E5%8F%B8%E7%9A%84gotofail%E6%BC%8F%E6%B4%9E/</guid>
      <description>&lt;p&gt;04 | 代码规范的价值：复盘苹果公司的GoToFail漏洞&lt;/p&gt;&#xA;&lt;p&gt;我们在上一讲中讨论了一个优秀的程序员都需要具备哪些良好的品质，第一点就是要熟练掌握一门编程语言。&lt;/p&gt;</description>
    </item>
    <item>
      <title>06经验总结如何给你的代码起好名字</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/06%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E5%A6%82%E4%BD%95%E7%BB%99%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E8%B5%B7%E5%A5%BD%E5%90%8D%E5%AD%97/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/06%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93%E5%A6%82%E4%BD%95%E7%BB%99%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E8%B5%B7%E5%A5%BD%E5%90%8D%E5%AD%97/</guid>
      <description>&lt;p&gt;05 | 经验总结：如何给你的代码起好名字？&lt;/p&gt;&#xA;&lt;p&gt;上一节我们讲了编码规范的重要性，而编码规范，从起一个好名字开始。但起名字，也没有我们想得那么简单。有个流传很广的戏言：“计算机科学只有两件难事，废弃缓存和取名字。”&lt;/p&gt;</description>
    </item>
    <item>
      <title>07代码整理的关键逻辑和最佳案例</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/07%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86%E7%9A%84%E5%85%B3%E9%94%AE%E9%80%BB%E8%BE%91%E5%92%8C%E6%9C%80%E4%BD%B3%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/07%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86%E7%9A%84%E5%85%B3%E9%94%AE%E9%80%BB%E8%BE%91%E5%92%8C%E6%9C%80%E4%BD%B3%E6%A1%88%E4%BE%8B/</guid>
      <description>&lt;p&gt;06 | 代码整理的关键逻辑和最佳案例&lt;/p&gt;&#xA;&lt;p&gt;写一篇文章，要层次清楚、段落分明，写代码也是这样。杂志排版，要布局合理，阅读舒适，代码的编排也要这样。&lt;/p&gt;&#xA;&lt;p&gt;可是很多人想的是，代码能工作就行，不用讲究格式；时间紧，哪有时间整理代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>08写好注释真的是小菜一碟吗</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/08%E5%86%99%E5%A5%BD%E6%B3%A8%E9%87%8A%E7%9C%9F%E7%9A%84%E6%98%AF%E5%B0%8F%E8%8F%9C%E4%B8%80%E7%A2%9F%E5%90%97/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/08%E5%86%99%E5%A5%BD%E6%B3%A8%E9%87%8A%E7%9C%9F%E7%9A%84%E6%98%AF%E5%B0%8F%E8%8F%9C%E4%B8%80%E7%A2%9F%E5%90%97/</guid>
      <description>&lt;p&gt;07 | 写好注释，真的是小菜一碟吗？&lt;/p&gt;&#xA;&lt;p&gt;上一讲中我们讲了如何整理代码，但有些时候，即便我们取好了名字，编排好格式，但代码还是让我们抓狂，不明出处，不好理解。这时候，就需要注释登场了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>09写好声明的八项纪律</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/09%E5%86%99%E5%A5%BD%E5%A3%B0%E6%98%8E%E7%9A%84%E5%85%AB%E9%A1%B9%E7%BA%AA%E5%BE%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/09%E5%86%99%E5%A5%BD%E5%A3%B0%E6%98%8E%E7%9A%84%E5%85%AB%E9%A1%B9%E7%BA%AA%E5%BE%8B/</guid>
      <description>&lt;p&gt;08 | 写好声明的“八项纪律”&lt;/p&gt;&#xA;&lt;p&gt;我们在前面讨论了该怎么取一个好名字。在编程语言里，我们使用标识符来表示不同的逻辑和对象。声明就是用来定义这些标识符的。标识符声明的地方，就是取名字和第一次使用名字的地方。这一次，我们聊一聊该怎么声明一个标识符。&lt;/p&gt;</description>
    </item>
    <item>
      <title>10怎么用好Java注解</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/10%E6%80%8E%E4%B9%88%E7%94%A8%E5%A5%BDjava%E6%B3%A8%E8%A7%A3/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/10%E6%80%8E%E4%B9%88%E7%94%A8%E5%A5%BDjava%E6%B3%A8%E8%A7%A3/</guid>
      <description>&lt;p&gt;09 | 怎么用好Java注解？&lt;/p&gt;&#xA;&lt;p&gt;如果你使用面向对象的概念和技术有一段时间了，不知道你会不会有这样的困惑： 面向对象技术带来的麻烦，一点都不比它带来的好处少！&lt;/p&gt;</description>
    </item>
    <item>
      <title>11异常处理都有哪些陷阱</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/11%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E9%99%B7%E9%98%B1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/11%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E9%99%B7%E9%98%B1/</guid>
      <description>&lt;p&gt;10 | 异常处理都有哪些陷阱？&lt;/p&gt;&#xA;&lt;p&gt;上一讲中我们聊了聊怎么用好 Java 注解，今天我们谈谈怎么处理异常。&lt;/p&gt;&#xA;&lt;p&gt;处理好异常状况是掌握一门编程语言的基础，也是我们编程离不开的基本功。相信你对异常处理的机制已经很熟悉了。异常处理便捷、灵活、好用。但是，越好用的东西，我们越容易忽视它的缺陷。异常处理就有很多我们容易忽视的陷阱。今天，我们来聊聊这些问题，以及该怎么处理这些问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>12组织好代码段让人对它一见钟情</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/12%E7%BB%84%E7%BB%87%E5%A5%BD%E4%BB%A3%E7%A0%81%E6%AE%B5%E8%AE%A9%E4%BA%BA%E5%AF%B9%E5%AE%83%E4%B8%80%E8%A7%81%E9%92%9F%E6%83%85/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/12%E7%BB%84%E7%BB%87%E5%A5%BD%E4%BB%A3%E7%A0%81%E6%AE%B5%E8%AE%A9%E4%BA%BA%E5%AF%B9%E5%AE%83%E4%B8%80%E8%A7%81%E9%92%9F%E6%83%85/</guid>
      <description>&lt;p&gt;11 | 组织好代码段，让人对它“一见钟情”&lt;/p&gt;&#xA;&lt;p&gt;当我们看到一个事物的时候，它的轮廓首先进入视野，给了我们第一印象。如果第一印象没有吸引到我们，那我们就不会集中注意力去关注它，也不会想去认识它。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1312丨组织好代码文件要有用户思维</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/1312%E4%B8%A8%E7%BB%84%E7%BB%87%E5%A5%BD%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6%E8%A6%81%E6%9C%89%E7%94%A8%E6%88%B7%E6%80%9D%E7%BB%B4/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/1312%E4%B8%A8%E7%BB%84%E7%BB%87%E5%A5%BD%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6%E8%A6%81%E6%9C%89%E7%94%A8%E6%88%B7%E6%80%9D%E7%BB%B4/</guid>
      <description>&lt;p&gt;12丨组织好代码文件，要有“用户思维”&lt;/p&gt;&#xA;&lt;p&gt;上一讲中，我们讲了如何组织代码段，今天我来讲下，如何组织代码文件。&lt;/p&gt;&#xA;&lt;p&gt;最开始接触一个项目代码时，我们最渴望的，就是快速揭开项目的面纱。这个项目是干什么的？是怎么做的？该怎么使用？&lt;/p&gt;</description>
    </item>
    <item>
      <title>14接口规范是协作的合约</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/14%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83%E6%98%AF%E5%8D%8F%E4%BD%9C%E7%9A%84%E5%90%88%E7%BA%A6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/14%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83%E6%98%AF%E5%8D%8F%E4%BD%9C%E7%9A%84%E5%90%88%E7%BA%A6/</guid>
      <description>&lt;p&gt;13 | 接口规范，是协作的合约&lt;/p&gt;&#xA;&lt;p&gt;一个软件项目，一般需要交付两类文档。一类文档是面向开发者的，另一类文档是面向最终用户的。这两类文档，由于面向用户的不同，无论是内容还是形式，都有巨大的差异。今天我们先来聊聊面向开发者的文档。下一讲中，我们再接着聊面向最终用户的文档。&lt;/p&gt;</description>
    </item>
    <item>
      <title>15怎么写好用户指南</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/15%E6%80%8E%E4%B9%88%E5%86%99%E5%A5%BD%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/15%E6%80%8E%E4%B9%88%E5%86%99%E5%A5%BD%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;p&gt;14 | 怎么写好用户指南？&lt;/p&gt;&#xA;&lt;p&gt;前一段时间，我要买一部家用的跑步机。有一款跑步机看起来配置齐备，商品的标题中指明“需要组装”。&lt;/p&gt;&#xA;&lt;p&gt;商品的评论只有两条。其中一条给了三分：“还没有来得及试一试这个新到的跑步机。因为，我一直试着把它组装起来。我做梦都没有想到，‘需要组装’意味着我花了三天时间，都没有组装起来。它也许是一个好的跑步机，可是令人失望的是，这些零件到底该怎么凑在一起！”&lt;/p&gt;</description>
    </item>
    <item>
      <title>16编写规范代码的检查清单</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/16%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83%E4%BB%A3%E7%A0%81%E7%9A%84%E6%A3%80%E6%9F%A5%E6%B8%85%E5%8D%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/16%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83%E4%BB%A3%E7%A0%81%E7%9A%84%E6%A3%80%E6%9F%A5%E6%B8%85%E5%8D%95/</guid>
      <description>&lt;p&gt;15 | 编写规范代码的检查清单&lt;/p&gt;&#xA;&lt;p&gt;通过前面十几讲的学习，我们已经把代码“规范”篇的内容学习完了。今天，我们一起把前面讨论到的观点总结一下，并探索一下编写规范代码时的最佳实践检查清单。一份有效的检查清单，可以帮助我们记忆、遵循和执行代码的一系列规范。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1716丨代码规范篇用户答疑</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/1716%E4%B8%A8%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E7%AF%87%E7%94%A8%E6%88%B7%E7%AD%94%E7%96%91/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/1716%E4%B8%A8%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E7%AF%87%E7%94%A8%E6%88%B7%E7%AD%94%E7%96%91/</guid>
      <description>&lt;p&gt;16丨代码“规范”篇用户答疑&lt;/p&gt;&#xA;&lt;p&gt;更到这一篇的时候，意味着专栏第一模块“代码规范”篇已经更新完毕了。在更新的时候，非常感谢同学的积极踊跃地留言，提出了很多独到的见解，也给专栏增色了许多。&lt;/p&gt;</description>
    </item>
    <item>
      <title>18为什么需要经济的代码</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/18%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E7%BB%8F%E6%B5%8E%E7%9A%84%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/18%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E7%BB%8F%E6%B5%8E%E7%9A%84%E4%BB%A3%E7%A0%81/</guid>
      <description>&lt;p&gt;17 | 为什么需要经济的代码？&lt;/p&gt;&#xA;&lt;p&gt;如果你在线购买过春运的火车票，经历过购票网站的瘫痪，你应该深有体会，网站瘫痪是一件让人多么绝望的事情。&lt;/p&gt;&#xA;&lt;p&gt;根据有关报道，2014 年 1 月 9 日，火车票售票网站点击量高达 144 亿次，相当于每个中国人点击了 10 次，平均每秒点击了 16,000 次，峰值的点击量可能远远超出 16,000 次。这么强悍的访问量，导致了火车售票网站多次瘫痪。这是一个典型的性能错配导致的重大网络事故，处理这么大的点击量需要特殊的程序设计和架构安排。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1918丨思考框架什么样的代码才是高效的代码</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/1918%E4%B8%A8%E6%80%9D%E8%80%83%E6%A1%86%E6%9E%B6%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%8D%E6%98%AF%E9%AB%98%E6%95%88%E7%9A%84%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/1918%E4%B8%A8%E6%80%9D%E8%80%83%E6%A1%86%E6%9E%B6%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%8D%E6%98%AF%E9%AB%98%E6%95%88%E7%9A%84%E4%BB%A3%E7%A0%81/</guid>
      <description>&lt;p&gt;18丨思考框架：什么样的代码才是高效的代码？&lt;/p&gt;&#xA;&lt;p&gt;如果让你设计一个有十亿用户使用的售票网站，你会考虑哪些问题？如果让你设计一个有一万亿用户使用的服务，你又会考虑哪些问题？不要以为有一万亿个用户的服务离我们很远，它正在快速地逼近我们。&lt;/p&gt;</description>
    </item>
    <item>
      <title>20怎么避免过度设计</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/20%E6%80%8E%E4%B9%88%E9%81%BF%E5%85%8D%E8%BF%87%E5%BA%A6%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/20%E6%80%8E%E4%B9%88%E9%81%BF%E5%85%8D%E8%BF%87%E5%BA%A6%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;p&gt;19 | 怎么避免过度设计？&lt;/p&gt;&#xA;&lt;p&gt;俗话说，“过犹不及”。“过度”这个词仿佛会给我们一些不好的暗示。不要紧张，我们先聊一个轻松的话题。&lt;/p&gt;&#xA;&lt;p&gt;假设有一个小地方，要建一个火车站。这个地方有数十万人口，每列火车预计上下乘客数十人，高峰时段大概近百人。你会怎么设计这个火车站？&lt;/p&gt;</description>
    </item>
    <item>
      <title>21简单和直观是永恒的解决方案</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/21%E7%AE%80%E5%8D%95%E5%92%8C%E7%9B%B4%E8%A7%82%E6%98%AF%E6%B0%B8%E6%81%92%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/21%E7%AE%80%E5%8D%95%E5%92%8C%E7%9B%B4%E8%A7%82%E6%98%AF%E6%B0%B8%E6%81%92%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
      <description>&lt;p&gt;20 | 简单和直观，是永恒的解决方案&lt;/p&gt;&#xA;&lt;p&gt;上一次，我们聊了影响代码效率的两个最重要的因素，需求膨胀和过度设计。简单地说，就是找到要做的事情，做的事情要少。接下来，我们来聊聊怎么做这些事情。其中，我认为最重要的原则就是选择最简单、最直观的做法。反过来说，就是不要把事情做复杂了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>22怎么设计一个简单又直观的接口</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/22%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E5%8F%88%E7%9B%B4%E8%A7%82%E7%9A%84%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/22%E6%80%8E%E4%B9%88%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E5%8F%88%E7%9B%B4%E8%A7%82%E7%9A%84%E6%8E%A5%E5%8F%A3/</guid>
      <description>&lt;p&gt;21 | 怎么设计一个简单又直观的接口？&lt;/p&gt;&#xA;&lt;p&gt;我们前面聊过接口规范，开放的接口规范是使用者和实现者之间的合约。既然是合约，就要成文、清楚、稳定。合约是好东西，它可以让代码之间的组合有规可依。但同时它也是坏东西，让接口的变更变得困难重重。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2322丨高效率从超越线程同步开始</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/2322%E4%B8%A8%E9%AB%98%E6%95%88%E7%8E%87%E4%BB%8E%E8%B6%85%E8%B6%8A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E5%BC%80%E5%A7%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/2322%E4%B8%A8%E9%AB%98%E6%95%88%E7%8E%87%E4%BB%8E%E8%B6%85%E8%B6%8A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E5%BC%80%E5%A7%8B/</guid>
      <description>&lt;p&gt;22丨高效率，从超越线程同步开始！&lt;/p&gt;&#xA;&lt;p&gt;线程的同步是学习一门编程语言的难点。刚开始线程同步的困难，主要在于了解技术；跨过了基本技术的门槛后，更难的是掌握最基本的概念。&lt;/p&gt;</description>
    </item>
    <item>
      <title>24怎么减少内存使用减轻内存管理负担</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/24%E6%80%8E%E4%B9%88%E5%87%8F%E5%B0%91%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E5%87%8F%E8%BD%BB%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E8%B4%9F%E6%8B%85/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/24%E6%80%8E%E4%B9%88%E5%87%8F%E5%B0%91%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E5%87%8F%E8%BD%BB%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E8%B4%9F%E6%8B%85/</guid>
      <description>&lt;p&gt;23 | 怎么减少内存使用，减轻内存管理负担？&lt;/p&gt;&#xA;&lt;p&gt;管理内存，不管是什么编程语言，向来都是一个难题。Java 语言能够长期领先的一个重要原因，就是它拥有强大的内存管理能力，并且这种能力还在不断地进化。然而，只依靠 Java 内在的内存管理能力，是远远不够的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>25黑白灰理解延迟分配的两面性</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/25%E9%BB%91%E7%99%BD%E7%81%B0%E7%90%86%E8%A7%A3%E5%BB%B6%E8%BF%9F%E5%88%86%E9%85%8D%E7%9A%84%E4%B8%A4%E9%9D%A2%E6%80%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/25%E9%BB%91%E7%99%BD%E7%81%B0%E7%90%86%E8%A7%A3%E5%BB%B6%E8%BF%9F%E5%88%86%E9%85%8D%E7%9A%84%E4%B8%A4%E9%9D%A2%E6%80%A7/</guid>
      <description>&lt;p&gt;24 | 黑白灰，理解延迟分配的两面性&lt;/p&gt;&#xA;&lt;p&gt;上一次，我们讨论了减少内存使用的两个大方向，减少实例数量和减少实例的尺寸。如果我们把时间的因素考虑在内，还有一些重要的技术，可以用来减少运行时的实例数量。其中，延迟分配是一个重要的思路。&lt;/p&gt;</description>
    </item>
    <item>
      <title>26使用有序的代码调动异步的事件</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/26%E4%BD%BF%E7%94%A8%E6%9C%89%E5%BA%8F%E7%9A%84%E4%BB%A3%E7%A0%81%E8%B0%83%E5%8A%A8%E5%BC%82%E6%AD%A5%E7%9A%84%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/26%E4%BD%BF%E7%94%A8%E6%9C%89%E5%BA%8F%E7%9A%84%E4%BB%A3%E7%A0%81%E8%B0%83%E5%8A%A8%E5%BC%82%E6%AD%A5%E7%9A%84%E4%BA%8B%E4%BB%B6/</guid>
      <description>&lt;p&gt;25 | 使用有序的代码，调动异步的事件&lt;/p&gt;&#xA;&lt;p&gt;同步和异步，是两个差距很大的编程模型。同步，就是很多事情一步一步地做，做完上一件，才能做下一件。异步，就是做事情不需要一步一步的，多件事情，可以独立地做。&lt;/p&gt;</description>
    </item>
    <item>
      <title>27有哪些招惹麻烦的性能陷阱</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/27%E6%9C%89%E5%93%AA%E4%BA%9B%E6%8B%9B%E6%83%B9%E9%BA%BB%E7%83%A6%E7%9A%84%E6%80%A7%E8%83%BD%E9%99%B7%E9%98%B1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/27%E6%9C%89%E5%93%AA%E4%BA%9B%E6%8B%9B%E6%83%B9%E9%BA%BB%E7%83%A6%E7%9A%84%E6%80%A7%E8%83%BD%E9%99%B7%E9%98%B1/</guid>
      <description>&lt;p&gt;26 | 有哪些招惹麻烦的性能陷阱？&lt;/p&gt;&#xA;&lt;p&gt;前面，我们讨论了改善代码性能的最基本的办法。接下来，我们讨论一些最佳实践，让我们先从一些容易被忽略的性能陷阱开始。&lt;/p&gt;</description>
    </item>
    <item>
      <title>28怎么编写可持续发展的代码</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/28%E6%80%8E%E4%B9%88%E7%BC%96%E5%86%99%E5%8F%AF%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B1%95%E7%9A%84%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/28%E6%80%8E%E4%B9%88%E7%BC%96%E5%86%99%E5%8F%AF%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B1%95%E7%9A%84%E4%BB%A3%E7%A0%81/</guid>
      <description>&lt;p&gt;27 | 怎么编写可持续发展的代码？&lt;/p&gt;&#xA;&lt;p&gt;成功的大公司，也是从小公司起步的。刚开始的时候，软件可能比较简单，用户也比较少，一台廉价的服务器，或者一个简单的虚拟机，甚至几个静态的页面就绰绰有余。&lt;/p&gt;</description>
    </item>
    <item>
      <title>29怎么尽量不写代码</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/29%E6%80%8E%E4%B9%88%E5%B0%BD%E9%87%8F%E4%B8%8D%E5%86%99%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/29%E6%80%8E%E4%B9%88%E5%B0%BD%E9%87%8F%E4%B8%8D%E5%86%99%E4%BB%A3%E7%A0%81/</guid>
      <description>&lt;p&gt;28 | 怎么尽量“不写”代码？&lt;/p&gt;&#xA;&lt;p&gt;最有效率的编码就是少编写代码，甚至不编写代码。前面，我们讨论过避免需求膨胀和设计过度，就是减少编码的办法之一。这一次，我们讨论代码复用的问题。商业的规模依赖于可复制性，代码的质量依赖于可复用性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>30编写经济代码的检查清单</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/30%E7%BC%96%E5%86%99%E7%BB%8F%E6%B5%8E%E4%BB%A3%E7%A0%81%E7%9A%84%E6%A3%80%E6%9F%A5%E6%B8%85%E5%8D%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/30%E7%BC%96%E5%86%99%E7%BB%8F%E6%B5%8E%E4%BB%A3%E7%A0%81%E7%9A%84%E6%A3%80%E6%9F%A5%E6%B8%85%E5%8D%95/</guid>
      <description>&lt;p&gt;29 | 编写经济代码的检查清单&lt;/p&gt;&#xA;&lt;p&gt;通过前面十几讲的学习，我们已经把代码“经济”篇的内容学习完了。今天，我们一起把前面讨论到的观点总结一下，并探索一下编写经济代码时的最佳实践检查清单。&lt;/p&gt;</description>
    </item>
    <item>
      <title>3130丨代码经济篇答疑汇总</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/3130%E4%B8%A8%E4%BB%A3%E7%A0%81%E7%BB%8F%E6%B5%8E%E7%AF%87%E7%AD%94%E7%96%91%E6%B1%87%E6%80%BB/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/3130%E4%B8%A8%E4%BB%A3%E7%A0%81%E7%BB%8F%E6%B5%8E%E7%AF%87%E7%AD%94%E7%96%91%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;p&gt;30丨“代码经济篇”答疑汇总&lt;/p&gt;&#xA;&lt;p&gt;到这一篇文章，意味着专栏第二模块“经济的代码”已经更新完毕了。非常感谢同学们积极踊跃地留言，提出了很多独到的见解，我自己也学到了不少新东西。&lt;/p&gt;</description>
    </item>
    <item>
      <title>32为什么安全的代码这么重要</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/32%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AE%89%E5%85%A8%E7%9A%84%E4%BB%A3%E7%A0%81%E8%BF%99%E4%B9%88%E9%87%8D%E8%A6%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/32%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AE%89%E5%85%A8%E7%9A%84%E4%BB%A3%E7%A0%81%E8%BF%99%E4%B9%88%E9%87%8D%E8%A6%81/</guid>
      <description>&lt;p&gt;31 | 为什么安全的代码这么重要？&lt;/p&gt;&#xA;&lt;p&gt;从今天开始，我们进入本专栏的“安全模块”。首先，我们通过一个具体的安全漏洞的案例，来感受下计算机代码是多么的脆弱，以及编写安全的代码为什么如此重要。&lt;/p&gt;</description>
    </item>
    <item>
      <title>33如何评估代码的安全缺陷</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/33%E5%A6%82%E4%BD%95%E8%AF%84%E4%BC%B0%E4%BB%A3%E7%A0%81%E7%9A%84%E5%AE%89%E5%85%A8%E7%BC%BA%E9%99%B7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/33%E5%A6%82%E4%BD%95%E8%AF%84%E4%BC%B0%E4%BB%A3%E7%A0%81%E7%9A%84%E5%AE%89%E5%85%A8%E7%BC%BA%E9%99%B7/</guid>
      <description>&lt;p&gt;32 | 如何评估代码的安全缺陷？&lt;/p&gt;&#xA;&lt;p&gt;我自己有一点小小的强迫症，遇到事情，喜欢自己动手整个清楚明白。我的大部分失眠，都要拜这点强迫症所赐。时间永远都不够用。如果上天给我一个机会，我是不是可以借上五百年？其实，借上五百年，时间一定还是不够用的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>34整数的运算有哪些安全威胁</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/34%E6%95%B4%E6%95%B0%E7%9A%84%E8%BF%90%E7%AE%97%E6%9C%89%E5%93%AA%E4%BA%9B%E5%AE%89%E5%85%A8%E5%A8%81%E8%83%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/34%E6%95%B4%E6%95%B0%E7%9A%84%E8%BF%90%E7%AE%97%E6%9C%89%E5%93%AA%E4%BA%9B%E5%AE%89%E5%85%A8%E5%A8%81%E8%83%81/</guid>
      <description>&lt;p&gt;33 | 整数的运算有哪些安全威胁？&lt;/p&gt;&#xA;&lt;p&gt;在我的日常工作中，有一类错误，无论是原理还是后果，我都十分清楚。但是写代码的时候，这类错误曾经还是会反复出现。如果不是代码评审和代码分析环节的校正，我都很难意识到自己的代码中存在这样的缺陷。今天，我想和你聊聊，那些“道理我都懂，但代码就是写不好”的老顽固问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>35数组和集合可变量的安全陷阱</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/35%E6%95%B0%E7%BB%84%E5%92%8C%E9%9B%86%E5%90%88%E5%8F%AF%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%89%E5%85%A8%E9%99%B7%E9%98%B1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/35%E6%95%B0%E7%BB%84%E5%92%8C%E9%9B%86%E5%90%88%E5%8F%AF%E5%8F%98%E9%87%8F%E7%9A%84%E5%AE%89%E5%85%A8%E9%99%B7%E9%98%B1/</guid>
      <description>&lt;p&gt;34 | 数组和集合，可变量的安全陷阱&lt;/p&gt;&#xA;&lt;p&gt;在前面的章节里，我们讨论了不少不可变量的好处。在代码安全中，不可变量也减少了很多纠葛的发生，可变量则是一个非常难缠的麻烦。&lt;/p&gt;</description>
    </item>
    <item>
      <title>36怎么处理敏感信息</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/36%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/36%E6%80%8E%E4%B9%88%E5%A4%84%E7%90%86%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF/</guid>
      <description>&lt;p&gt;35 | 怎么处理敏感信息？&lt;/p&gt;&#xA;&lt;p&gt;敏感信息，是一个常见的词汇。如果我们接收到了广告信息，骚扰电话，垃圾邮件等，都表明我们个人的敏感信息或多或少地被泄露了。&lt;/p&gt;&#xA;&lt;p&gt;有些敏感信息的泄露，也许仅仅会使我们感到不便，比如一小部分的垃圾邮件，但有些敏感信息的泄露，会影响我们的消费倾向或者消费决策，损害我们的经济利益，甚至威胁我们的生命安全，比如医疗记录和行程安排的泄露。&lt;/p&gt;</description>
    </item>
    <item>
      <title>37继承有什么安全缺陷</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/37%E7%BB%A7%E6%89%BF%E6%9C%89%E4%BB%80%E4%B9%88%E5%AE%89%E5%85%A8%E7%BC%BA%E9%99%B7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/37%E7%BB%A7%E6%89%BF%E6%9C%89%E4%BB%80%E4%B9%88%E5%AE%89%E5%85%A8%E7%BC%BA%E9%99%B7/</guid>
      <description>&lt;p&gt;36 | 继承有什么安全缺陷？&lt;/p&gt;&#xA;&lt;p&gt;有时候，为了解决一个问题，我们需要一个解决办法。可是，这个办法本身还会带来更多的问题。新问题的解决带来更新的问题，就这样周而复始，绵延不绝。&lt;/p&gt;</description>
    </item>
    <item>
      <title>38边界信任的分水岭</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/38%E8%BE%B9%E7%95%8C%E4%BF%A1%E4%BB%BB%E7%9A%84%E5%88%86%E6%B0%B4%E5%B2%AD/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/38%E8%BE%B9%E7%95%8C%E4%BF%A1%E4%BB%BB%E7%9A%84%E5%88%86%E6%B0%B4%E5%B2%AD/</guid>
      <description>&lt;p&gt;37 | 边界，信任的分水岭&lt;/p&gt;&#xA;&lt;p&gt;边界是信息安全里一个重要的概念。如果不能清晰地界定信任的边界，并且有效地守护好这个边界，那么编写安全的代码几乎就是一项不可能完成的任务。&lt;/p&gt;</description>
    </item>
    <item>
      <title>39对象序列化的危害有多大</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/39%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%8D%B1%E5%AE%B3%E6%9C%89%E5%A4%9A%E5%A4%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/39%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%8D%B1%E5%AE%B3%E6%9C%89%E5%A4%9A%E5%A4%A7/</guid>
      <description>&lt;p&gt;38 | 对象序列化的危害有多大？&lt;/p&gt;&#xA;&lt;p&gt;如果一个函数或者对象，不管它位于多么遥远的地方，都可以在本地直接被调用，那该有多好呀！这是一个非常朴素、美好的想法。基于这个设想，诞生了很多伟大的技术和协议，比如远程过程调用（RPC）、远程方法调用（RMI）、分布式对象（Distributed Object）、组件对象模型（COM）、公共对象请求代理（CORBA）和简单对象访问协议（SOAP）等……这个列表还可以很长很长。&lt;/p&gt;</description>
    </item>
    <item>
      <title>40怎么控制好代码的权力</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/40%E6%80%8E%E4%B9%88%E6%8E%A7%E5%88%B6%E5%A5%BD%E4%BB%A3%E7%A0%81%E7%9A%84%E6%9D%83%E5%8A%9B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/40%E6%80%8E%E4%B9%88%E6%8E%A7%E5%88%B6%E5%A5%BD%E4%BB%A3%E7%A0%81%E7%9A%84%E6%9D%83%E5%8A%9B/</guid>
      <description>&lt;p&gt;39 | 怎么控制好代码的权力？&lt;/p&gt;&#xA;&lt;p&gt;在前面，我们讨论了“敏感信息经过授权才可以使用”的这样一条有关编码安全的实践。我们还可以把这个实践扩展到更大的范围：信息和资源，需经授权，方可使用。这个信息和资源，不仅仅包括用户数据这样的敏感信息，还包括计算机代码、产品和服务。&lt;/p&gt;</description>
    </item>
    <item>
      <title>41规范代码长治久安的基础</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/41%E8%A7%84%E8%8C%83%E4%BB%A3%E7%A0%81%E9%95%BF%E6%B2%BB%E4%B9%85%E5%AE%89%E7%9A%84%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/41%E8%A7%84%E8%8C%83%E4%BB%A3%E7%A0%81%E9%95%BF%E6%B2%BB%E4%B9%85%E5%AE%89%E7%9A%84%E5%9F%BA%E7%A1%80/</guid>
      <description>&lt;p&gt;40 | 规范，代码长治久安的基础&lt;/p&gt;&#xA;&lt;p&gt;如果从安全角度去考察，软件是非常脆弱的。今天还是安全的代码，明天可能就有人发现漏洞。安全攻击的问题，大部分出自信息的不对称性；而维护代码安全之所以难，大部分是因为安全问题是不可预见的。那么，该怎么保持代码的长治久安呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>42预案代码的主动风险管理</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/42%E9%A2%84%E6%A1%88%E4%BB%A3%E7%A0%81%E7%9A%84%E4%B8%BB%E5%8A%A8%E9%A3%8E%E9%99%A9%E7%AE%A1%E7%90%86/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/42%E9%A2%84%E6%A1%88%E4%BB%A3%E7%A0%81%E7%9A%84%E4%B8%BB%E5%8A%A8%E9%A3%8E%E9%99%A9%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;41 | 预案，代码的主动风险管理&lt;/p&gt;&#xA;&lt;p&gt;上一次，我们聊了保持代码长治久安的基础——代码规范。这一次，我们接着聊第二个方面，代码的风险预案。&lt;/p&gt;&#xA;&lt;p&gt;有些问题，并没有适用于各种场景的解决办法；有些设计，并不能适用于所有的用户；有些实现，并不能经受过去、现在和未来的检验。在你的日常工作中，有没有这样的情况出现？&lt;/p&gt;</description>
    </item>
    <item>
      <title>43纵深代码安全的深度防御</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/43%E7%BA%B5%E6%B7%B1%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E7%9A%84%E6%B7%B1%E5%BA%A6%E9%98%B2%E5%BE%A1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/43%E7%BA%B5%E6%B7%B1%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E7%9A%84%E6%B7%B1%E5%BA%A6%E9%98%B2%E5%BE%A1/</guid>
      <description>&lt;p&gt;42 | 纵深，代码安全的深度防御&lt;/p&gt;&#xA;&lt;p&gt;前面我们聊了保持代码长治久安的两个策略，代码规范和风险预案。这一次，我们接着聊代码安全管理的另外一个策略：纵深防御。&lt;/p&gt;</description>
    </item>
    <item>
      <title>44编写安全代码的最佳实践清单</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/44%E7%BC%96%E5%86%99%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%B8%85%E5%8D%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/44%E7%BC%96%E5%86%99%E5%AE%89%E5%85%A8%E4%BB%A3%E7%A0%81%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%B8%85%E5%8D%95/</guid>
      <description>&lt;p&gt;43 | 编写安全代码的最佳实践清单&lt;/p&gt;&#xA;&lt;p&gt;像以前一样，当大家看到“最佳实践清单”这个标题的时候，就意味着这一个模块又到了总结的时候了。&lt;/p&gt;&#xA;&lt;p&gt;这一模块我们从代码安全的角度出发，探讨了如何编写安全的代码。首先我们再来重温一下，为什么需要安全的代码呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>45代码安全篇答疑汇总</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/45%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E7%AF%87%E7%AD%94%E7%96%91%E6%B1%87%E6%80%BB/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/45%E4%BB%A3%E7%A0%81%E5%AE%89%E5%85%A8%E7%AF%87%E7%AD%94%E7%96%91%E6%B1%87%E6%80%BB/</guid>
      <description>&lt;p&gt;44 | “代码安全篇”答疑汇总&lt;/p&gt;&#xA;&lt;p&gt;到这一篇文章，意味着专栏第三模块“安全的代码”也更新完毕了。今天，我来集中解答一下留言区里的一些疑问。&lt;/p&gt;&#xA;&lt;p&gt;@醉侠&lt;/p&gt;&#xA;&lt;p&gt;希望老师后面能多讲讲安全编码的例子或者推荐好的书籍，这块儿确实是很大的弱点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>46QA加餐丨关于代码质量你关心的那些事儿</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/46qa%E5%8A%A0%E9%A4%90%E4%B8%A8%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E4%BD%A0%E5%85%B3%E5%BF%83%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/46qa%E5%8A%A0%E9%A4%90%E4%B8%A8%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E4%BD%A0%E5%85%B3%E5%BF%83%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</guid>
      <description>&lt;p&gt;Q&amp;amp;A加餐丨关于代码质量，你关心的那些事儿&lt;/p&gt;&#xA;&lt;p&gt;专栏上线后，有一些同学对于代码质量有关的问题还不是很清楚，有很多疑问，所以我特意做了一期 Q&amp;amp;A，来回答一下这些问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>47尾声如何成为一个编程好手</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/47%E5%B0%BE%E5%A3%B0%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E7%BC%96%E7%A8%8B%E5%A5%BD%E6%89%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E4%BB%A3%E7%A0%81%E7%B2%BE%E8%BF%9B%E4%B9%8B%E8%B7%AF/47%E5%B0%BE%E5%A3%B0%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E4%B8%80%E4%B8%AA%E7%BC%96%E7%A8%8B%E5%A5%BD%E6%89%8B/</guid>
      <description>&lt;p&gt;45 | 尾声：如何成为一个编程好手？&lt;/p&gt;&#xA;&lt;p&gt;从刚开始准备这个专栏的时候算起，到这一篇文章和大家见面，已经有十个月的时间了。&lt;/p&gt;&#xA;&lt;p&gt;这个专栏设立的愿景，是想要传达编写优秀代码的理念，帮助软件工程师快速成长并且保持长久的竞争力。但是，四十多篇文章，显然不是通天的秘籍。一个软件工程师的修炼，主要还是靠日积月累的积累和精进。而且，这个修炼还包括编码之外的功夫。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
