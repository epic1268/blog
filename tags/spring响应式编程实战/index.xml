<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring响应式编程实战 on Docs</title>
    <link>https://politcloud.org/tags/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/</link>
    <description>Recent content in Spring响应式编程实战 on Docs</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 10 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://politcloud.org/tags/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01追本溯源：响应式编程究竟是一种什么样的技术体系？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/01%E8%BF%BD%E6%9C%AC%E6%BA%AF%E6%BA%90%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/01%E8%BF%BD%E6%9C%AC%E6%BA%AF%E6%BA%90%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB/</guid>
      <description>&lt;p&gt;响应式编程是一种新的编程技术，其目的是构建响应式系统。对于响应式系统而言，任何时候都需要确保具备即时响应性，这是大多数日常业务场景所需要的，但却是一项非常复杂而有挑战性的任务，需要对相关技术体系有深入的了解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>02背压机制：响应式流为什么能够提高系统的弹性？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/02%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6%E5%93%8D%E5%BA%94%E5%BC%8F%E6%B5%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E5%A4%9F%E6%8F%90%E9%AB%98%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BC%B9%E6%80%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/02%E8%83%8C%E5%8E%8B%E6%9C%BA%E5%88%B6%E5%93%8D%E5%BA%94%E5%BC%8F%E6%B5%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%83%BD%E5%A4%9F%E6%8F%90%E9%AB%98%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%BC%B9%E6%80%A7/</guid>
      <description>&lt;p&gt;上一讲，我们通过分析传统开发模式和响应式编程实现方法之间的差别，引出了数据流的概念。我们知道响应式系统都是通过对数据流中每个事件进行处理，来提高系统的即时响应性的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>03场景应用：响应式编程能够应用于哪些具体场景？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/03%E5%9C%BA%E6%99%AF%E5%BA%94%E7%94%A8%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E8%83%BD%E5%A4%9F%E5%BA%94%E7%94%A8%E4%BA%8E%E5%93%AA%E4%BA%9B%E5%85%B7%E4%BD%93%E5%9C%BA%E6%99%AF/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/03%E5%9C%BA%E6%99%AF%E5%BA%94%E7%94%A8%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E8%83%BD%E5%A4%9F%E5%BA%94%E7%94%A8%E4%BA%8E%E5%93%AA%E4%BA%9B%E5%85%B7%E4%BD%93%E5%9C%BA%E6%99%AF/</guid>
      <description>&lt;p&gt;通过上一讲的学习，相信你已经掌握了响应式编程中的几个核心概念，即响应式流、背压机制以及响应式流规范，这些概念是理解后续课程内容的基础。&lt;/p&gt;&#xA;&lt;p&gt;而在介绍基于 Spring 框架的响应式编程技术之前，你可能会有疑问：响应式编程能够应用到那些具体的场景呢？目前有哪些框架中使用到了这一新型的技术体系呢？这一讲我将为你解答这些疑问。&lt;/p&gt;</description>
    </item>
    <item>
      <title>04案例驱动：如何基于Spring框架来学习响应式编程？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/04%E6%A1%88%E4%BE%8B%E9%A9%B1%E5%8A%A8%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8Espring%E6%A1%86%E6%9E%B6%E6%9D%A5%E5%AD%A6%E4%B9%A0%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/04%E6%A1%88%E4%BE%8B%E9%A9%B1%E5%8A%A8%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8Espring%E6%A1%86%E6%9E%B6%E6%9D%A5%E5%AD%A6%E4%B9%A0%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description>&lt;p&gt;在前面的课时中，我除了对响应式概念和应用场景为你进行了普及以外，还提到了响应式流规范以及响应式编程所包含的一些底层核心组件。相信你也发现了，在现实中，通常不会直接使用这些底层组件来开发应用程序，而是借助特定的开发框架。&lt;/p&gt;</description>
    </item>
    <item>
      <title>05顶级框架：Spring为什么选择Reactor作为响应式编程框架？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/05%E9%A1%B6%E7%BA%A7%E6%A1%86%E6%9E%B6spring%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9reactor%E4%BD%9C%E4%B8%BA%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/05%E9%A1%B6%E7%BA%A7%E6%A1%86%E6%9E%B6spring%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9reactor%E4%BD%9C%E4%B8%BA%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;p&gt;在前面的课时中，我分别介绍了响应式流规范以及 Spring 框架中的响应式编程技术，也提到了响应式编程框架 Project Reactor。Reactor 是响应式领域中具有代表性的类库，实现了响应式流规范，同时已经成为 Spring 框架生态系统的重要组成部分。&lt;/p&gt;</description>
    </item>
    <item>
      <title>06流式操作：如何使用Flux和Mono高效构建响应式数据流？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/06%E6%B5%81%E5%BC%8F%E6%93%8D%E4%BD%9C%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8flux%E5%92%8Cmono%E9%AB%98%E6%95%88%E6%9E%84%E5%BB%BA%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E6%B5%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/06%E6%B5%81%E5%BC%8F%E6%93%8D%E4%BD%9C%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8flux%E5%92%8Cmono%E9%AB%98%E6%95%88%E6%9E%84%E5%BB%BA%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E6%B5%81/</guid>
      <description>&lt;p&gt;在上一讲中，我为你介绍了 Reactor 响应式编程框架，该框架实现了响应式流规范。我们知道在响应式流规范中，存在代表发布者的 Publisher 接口，而 Reactor 提供了这一接口的两种实现，即 Flux 和 Mono，它们是我们利用 Reactor 框架进行响应式编程的基础组件。在引入 Flux 和 Mono 的概念之后，这一讲的内容将围绕如何创建这两个组件展开。&lt;/p&gt;</description>
    </item>
    <item>
      <title>07Reactor操作符（上）：如何快速转换响应式流？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/07reactor%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%8A%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BD%AC%E6%8D%A2%E5%93%8D%E5%BA%94%E5%BC%8F%E6%B5%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/07reactor%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%8A%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E8%BD%AC%E6%8D%A2%E5%93%8D%E5%BA%94%E5%BC%8F%E6%B5%81/</guid>
      <description>&lt;p&gt;上一讲，我系统地为你介绍了 Reactor 框架中创建 Flux 和 Mono 这两种数据流的各种方法。一旦我们得到了一个数据流，就可以使用它来完成某个特定的需求。&lt;/p&gt;&#xA;&lt;p&gt;和其他主流的响应式编程框架一样，Reactor 框架的设计目标也是为了简化响应式流的使用方法。为此，Reactor 框架为我们提供了大量操作符，用于操作 Flux 和 Mono 对象。本讲和下一讲，我们将对常用的操作符展开讨论。&lt;/p&gt;</description>
    </item>
    <item>
      <title>08Reactor操作符（下）：如何多样化裁剪响应式流？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/08reactor%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%8B%E5%A6%82%E4%BD%95%E5%A4%9A%E6%A0%B7%E5%8C%96%E8%A3%81%E5%89%AA%E5%93%8D%E5%BA%94%E5%BC%8F%E6%B5%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/08reactor%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%8B%E5%A6%82%E4%BD%95%E5%A4%9A%E6%A0%B7%E5%8C%96%E8%A3%81%E5%89%AA%E5%93%8D%E5%BA%94%E5%BC%8F%E6%B5%81/</guid>
      <description>&lt;p&gt;通过前两讲的内容可以知道，Reactor 框架为我们提供了各种操作符，使用这些操作符可以高效地操作 Flux 和 Mono 对象。Reactor 中的操作符可以分成不同的类型，上一讲我们关注转换、过滤和组合类的操作符，而今天我将继续为你介绍剩余的条件、裁剪、工具类的操作符。&lt;/p&gt;</description>
    </item>
    <item>
      <title>09框架升级：WebFlux比WebMVC到底好在哪里？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/09%E6%A1%86%E6%9E%B6%E5%8D%87%E7%BA%A7webflux%E6%AF%94webmvc%E5%88%B0%E5%BA%95%E5%A5%BD%E5%9C%A8%E5%93%AA%E9%87%8C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/09%E6%A1%86%E6%9E%B6%E5%8D%87%E7%BA%A7webflux%E6%AF%94webmvc%E5%88%B0%E5%BA%95%E5%A5%BD%E5%9C%A8%E5%93%AA%E9%87%8C/</guid>
      <description>&lt;p&gt;前面我通过几讲的内容，对响应式编程的概念和开发框架做了介绍。从这一讲开始，我们将进入实际应用阶段，即围绕一个典型的多层架构，从每一层出发构建响应式应用程序。&lt;/p&gt;</description>
    </item>
    <item>
      <title>10WebFlux（上）：如何使用注解编程模式构建异步非阻塞服务？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/10webflux%E4%B8%8A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F%E6%9E%84%E5%BB%BA%E5%BC%82%E6%AD%A5%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/10webflux%E4%B8%8A%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%BC%8F%E6%9E%84%E5%BB%BA%E5%BC%82%E6%AD%A5%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%9C%8D%E5%8A%A1/</guid>
      <description>&lt;p&gt;通过上一讲的介绍，我们已经明确了 Spring 家族中 WebFlux 组件诞生的背景和意义。作为一款新型的 Web 服务开发组件，WebFlux 一方面充分考虑了与原有 Spring MVC 在开发模式上的兼容性，开发人员仍然可以使用基于注解的编程方式来创建响应式 Web 服务；另一方面，WebFlux 也引入了基于函数式编程的全新开发模式。本讲和下一讲将分别对这两种开发模式展开讨论，今天的内容将先关注基于注解的编程模型。&lt;/p&gt;</description>
    </item>
    <item>
      <title>11WebFlux（下）：如何使用函数式编程模型构建异步非阻塞服务？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/11webflux%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%9E%84%E5%BB%BA%E5%BC%82%E6%AD%A5%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/11webflux%E4%B8%8B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%9E%84%E5%BB%BA%E5%BC%82%E6%AD%A5%E9%9D%9E%E9%98%BB%E5%A1%9E%E6%9C%8D%E5%8A%A1/</guid>
      <description>&lt;p&gt;上一讲，我们引入了 Spring 框架中专门用于构建响应式 Web 服务的 WebFlux 框架，同时我也给出了两种创建 RESTful 风格 HTTP 端点实现方法中的一种，即注解编程模型。今天，我将介绍另一种实现方法——如何使用函数式编程模型创建响应式 RESTful 服务，这种编程模型与传统的基于 Spring MVC 构建 RESTful 服务的方法有较大差别。&lt;/p&gt;</description>
    </item>
    <item>
      <title>12WebClient：如何实现非阻塞式的跨服务远程调用？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/12webclient%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%BC%8F%E7%9A%84%E8%B7%A8%E6%9C%8D%E5%8A%A1%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/12webclient%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%BC%8F%E7%9A%84%E8%B7%A8%E6%9C%8D%E5%8A%A1%E8%BF%9C%E7%A8%8B%E8%B0%83%E7%94%A8/</guid>
      <description>&lt;p&gt;在上一讲中，我已经带你在 ReactiveSpringCSS 案例系统中通过 WebFlux 创建了响应式 Web 服务，并给你留下了一道思考题：如何实现非阻塞式的跨服务调用？&lt;/p&gt;&#xA;&lt;p&gt;我们知道在 Spring 中存在一个功能强大的工具类 RestTemplate，专门用来实现基于 HTTP 协议的远程请求和响应处理。RestTemplate 的主要问题在于不支持响应式流规范，也就无法提供非阻塞式的流式操作。Spring 5 全面引入响应式编程模型，同时也提供了 RestTemplate 的响应式版本，这就是 WebClient 工具类。&lt;/p&gt;</description>
    </item>
    <item>
      <title>13RSocket：一种新的高性能网络通信协议</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/13rsocket%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/13rsocket%E4%B8%80%E7%A7%8D%E6%96%B0%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BD%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</guid>
      <description>&lt;p&gt;前面几讲我们讨论了如何使用 WebFlux 构建响应式 Web 服务的实现方案。WebFlux 和 WebMVC 一样，都是基于 HTTP 协议实现请求-响应式的交互方式。这种交互方案很简单，但不够灵活，也无法应对所有的响应式应用场景。那么，有没有在网络协议层上提供更加丰富的交互方式呢？答案是肯定的，那就是我们今天要讨论的 RSocket 协议。&lt;/p&gt;</description>
    </item>
    <item>
      <title>14响应式全栈：响应式编程能为数据访问过程带来什么样的变化？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/14%E5%93%8D%E5%BA%94%E5%BC%8F%E5%85%A8%E6%A0%88%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E8%83%BD%E4%B8%BA%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E8%BF%87%E7%A8%8B%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E5%8F%98%E5%8C%96/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/14%E5%93%8D%E5%BA%94%E5%BC%8F%E5%85%A8%E6%A0%88%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E8%83%BD%E4%B8%BA%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E8%BF%87%E7%A8%8B%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E5%8F%98%E5%8C%96/</guid>
      <description>&lt;p&gt;从这一讲开始，我们就进入新的模块，讨论 Spring Boot 中另一个核心技术体系——数据访问。&lt;/p&gt;&#xA;&lt;p&gt;无论是传统软件还是互联网应用，对于任何一个系统而言，数据的存储和访问都是不可缺少的。而数据访问层的构建可能会涉及多种不同形式的数据存储媒介，包括传统的关系型数据库，也包含各种 NoSQL。今天这一讲我们先讨论响应式数据访问的模型，以及 Spring 框架所提供的支持。&lt;/p&gt;</description>
    </item>
    <item>
      <title>15MongoDB集成：如何在响应式应用中访问NoSQL数据库？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/15mongodb%E9%9B%86%E6%88%90%E5%A6%82%E4%BD%95%E5%9C%A8%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BA%94%E7%94%A8%E4%B8%AD%E8%AE%BF%E9%97%AEnosql%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/15mongodb%E9%9B%86%E6%88%90%E5%A6%82%E4%BD%95%E5%9C%A8%E5%93%8D%E5%BA%94%E5%BC%8F%E5%BA%94%E7%94%A8%E4%B8%AD%E8%AE%BF%E9%97%AEnosql%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>&lt;p&gt;上一讲开始，我们进入了响应式数据访问这一模块的学习，并且引出了 Spring 家族中专门用于实现数据访问的 Spring Data 框架及其响应式版本。我们知道 Spring Data 支持多种响应式 Repository 用来构建全栈响应式编程模型，而 MongoDB 就是其中具有代表性的一种数据存储库。今天，我就将结合案例来给出 Reactive MongoDB 的使用方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>16Redi集成：如何实现对Redi的响应式数据访问？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/16redi%E9%9B%86%E6%88%90%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%AF%B9redi%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/16redi%E9%9B%86%E6%88%90%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%AF%B9redi%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</guid>
      <description>&lt;p&gt;上一讲，我们介绍了 Spring Data MongoDB Reactive 组件，它是 Spring Data MongoDB 的响应式版本。今天我们要讨论的是 Spring Data Redis Reactive 组件，它专门针对 Redis 这款 NoSQL 数据库提供了响应式编程能力。&lt;/p&gt;&#xA;&lt;p&gt;使用该组件的步骤与 MongoDB 类似，我们同样围绕开发环境的初始化、Repository 的创建以及与 Service 层之间的集成这些步骤展开讨论，并结合 ReactiveSpringCSS 案例来集成这款主流的缓存中间件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>17R2DBC：关系型数据库能具备响应式数据访问特性吗？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/17r2dbc%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%83%BD%E5%85%B7%E5%A4%87%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E7%89%B9%E6%80%A7%E5%90%97/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/17r2dbc%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E8%83%BD%E5%85%B7%E5%A4%87%E5%93%8D%E5%BA%94%E5%BC%8F%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E7%89%B9%E6%80%A7%E5%90%97/</guid>
      <description>&lt;p&gt;在“14 | 响应式全栈：响应式编程能为数据访问过程带来什么样的变化”中我们提到了全栈响应式编程的概念，知道了数据访问层同样需要处理响应式场景。而在日常开发过程中被广泛采用的关系型数据库，采用的都是非响应式的数据访问机制。那么，关系型数据库能否具备响应式数据访问特性呢？这就是这一讲将要探讨的话题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>18消息驱动：SpringCloudStream如何为系统提升伸缩性？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/18%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8springcloudstream%E5%A6%82%E4%BD%95%E4%B8%BA%E7%B3%BB%E7%BB%9F%E6%8F%90%E5%8D%87%E4%BC%B8%E7%BC%A9%E6%80%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/18%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8springcloudstream%E5%A6%82%E4%BD%95%E4%B8%BA%E7%B3%BB%E7%BB%9F%E6%8F%90%E5%8D%87%E4%BC%B8%E7%BC%A9%E6%80%A7/</guid>
      <description>&lt;p&gt;请你回想一下我在“01 | 追本溯源：响应式编程究竟是一种什么样的技术体系”中提到的，响应式宣言认为，响应式系统的价值在于提供了即时响应性、可维护性和扩展性，表现的形式是回弹性和弹性，而实现的手段则是消息驱动。&lt;/p&gt;</description>
    </item>
    <item>
      <title>19消息发布：如何以响应式的编程方式发送消息？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/19%E6%B6%88%E6%81%AF%E5%8F%91%E5%B8%83%E5%A6%82%E4%BD%95%E4%BB%A5%E5%93%8D%E5%BA%94%E5%BC%8F%E7%9A%84%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/19%E6%B6%88%E6%81%AF%E5%8F%91%E5%B8%83%E5%A6%82%E4%BD%95%E4%BB%A5%E5%93%8D%E5%BA%94%E5%BC%8F%E7%9A%84%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</guid>
      <description>&lt;p&gt;通过上一讲的内容，相信你已经对 Reactive Spring Cloud Stream 的基本架构有了全面的了解。今天这一讲，我将基于 ReactiveSpringCSS 案例系统，带你看看如何使用 Reactive Spring Cloud Stream 来完成响应式消息发布者的构建。&lt;/p&gt;</description>
    </item>
    <item>
      <title>20消息消费：如何选择可用的高级开发技巧？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/20%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%8F%AF%E7%94%A8%E7%9A%84%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/20%E6%B6%88%E6%81%AF%E6%B6%88%E8%B4%B9%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E5%8F%AF%E7%94%A8%E7%9A%84%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;p&gt;在上一讲中，我们讨论了 ReactiveSpringCSS 案例中基于 Reactive Spring Cloud Stream 的消息发布场景以及实现方式。今天我将延续上一讲的内容，为你介绍消息消费的应用场景，具体讲解如何在服务中添加消息消费者，以及使用各项消息消费的高级开发技巧。&lt;/p&gt;</description>
    </item>
    <item>
      <title>21测试方案：如何验证响应式编程组件的正确性？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/21%E6%B5%8B%E8%AF%95%E6%96%B9%E6%A1%88%E5%A6%82%E4%BD%95%E9%AA%8C%E8%AF%81%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%BB%84%E4%BB%B6%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/21%E6%B5%8B%E8%AF%95%E6%96%B9%E6%A1%88%E5%A6%82%E4%BD%95%E9%AA%8C%E8%AF%81%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%BB%84%E4%BB%B6%E7%9A%84%E6%AD%A3%E7%A1%AE%E6%80%A7/</guid>
      <description>&lt;p&gt;作为整个课程最后一部分内容，从这一讲开始，我们将讨论响应式 Spring 所提供的测试解决方案。&lt;/p&gt;&#xA;&lt;p&gt;对于响应式系统而言，测试是一个难点。当一个应用程序中涉及数据层、服务层、Web 层以及各种外部服务之间的交互关系时，除了针对各层组件的独立测试之外，还需要充分引入集成测试来保证服务的正确性和稳定性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>22测试集成：响应式Web应用程序如何进行测试？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/22%E6%B5%8B%E8%AF%95%E9%9B%86%E6%88%90%E5%93%8D%E5%BA%94%E5%BC%8Fweb%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/22%E6%B5%8B%E8%AF%95%E9%9B%86%E6%88%90%E5%93%8D%E5%BA%94%E5%BC%8Fweb%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95/</guid>
      <description>&lt;p&gt;上一讲，我们探讨了针对响应式系统的测试解决方案，也介绍了测试 Reactor 响应式流的系统方法。那么这一讲的内容仍然聚焦于此，我们来看看如何测试 Web 三层架构中的各层组件，即 Repository 层、Service 层和 Controller 层。&lt;/p&gt;</description>
    </item>
    <item>
      <title>结束语以终为始：响应式编程是一种银弹吗？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/%E7%BB%93%E6%9D%9F%E8%AF%AD%E4%BB%A5%E7%BB%88%E4%B8%BA%E5%A7%8B%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%98%AF%E4%B8%80%E7%A7%8D%E9%93%B6%E5%BC%B9%E5%90%97/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/%E7%BB%93%E6%9D%9F%E8%AF%AD%E4%BB%A5%E7%BB%88%E4%B8%BA%E5%A7%8B%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%98%AF%E4%B8%80%E7%A7%8D%E9%93%B6%E5%BC%B9%E5%90%97/</guid>
      <description>&lt;p&gt;课程已经接近尾声了，不知道这 22 讲的内容对你帮助如何？最后这一节结束语，我将结合课程的内容，和你一起展望响应式编程未来的发展趋势，它到底能否成为一种“银弹”呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>开篇词响应式编程：紧跟技术趋势，提升系统弹性</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/%E5%BC%80%E7%AF%87%E8%AF%8D%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%B4%A7%E8%B7%9F%E6%8A%80%E6%9C%AF%E8%B6%8B%E5%8A%BF%E6%8F%90%E5%8D%87%E7%B3%BB%E7%BB%9F%E5%BC%B9%E6%80%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/spring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/%E5%BC%80%E7%AF%87%E8%AF%8D%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%B4%A7%E8%B7%9F%E6%8A%80%E6%9C%AF%E8%B6%8B%E5%8A%BF%E6%8F%90%E5%8D%87%E7%B3%BB%E7%BB%9F%E5%BC%B9%E6%80%A7/</guid>
      <description>&lt;p&gt;你好，我是鉴湘，拥有 10 年以上大型 Java EE 和分布式系统的构建和优化经验，曾带领百人团队完成基于 Spring 家族技术体系的亿级用户规模互联网应用系统的建设工作，对基于 Spring 框架进行系统开发和维护有着丰富的实战经验，目前在一家创业企业任 CTO。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
