<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go微服务实战38讲 on Docs</title>
    <link>https://politcloud.org/tags/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/</link>
    <description>Recent content in Go微服务实战38讲 on Docs</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 10 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://politcloud.org/tags/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01为什么说云原生重构了互联网产品开发模式？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/01%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E4%BA%91%E5%8E%9F%E7%94%9F%E9%87%8D%E6%9E%84%E4%BA%86%E4%BA%92%E8%81%94%E7%BD%91%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/01%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E4%BA%91%E5%8E%9F%E7%94%9F%E9%87%8D%E6%9E%84%E4%BA%86%E4%BA%92%E8%81%94%E7%BD%91%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;云原生（Cloud Native）这个概念最早是由 Pivotal 公司的 Matt Stine 提出的。发展至今，云原生架构已然成为互联网行业的技术热点，并在很大程度上推动了 IT 成本的降低和企业的发展。不过为便于你更好地理解和学习这部分内容，在本节课的开始，我们就先来快速了解下相关的架构演进及其设计思想。&lt;/p&gt;</description>
    </item>
    <item>
      <title>02云原生基础架构的组成以及云原生应用的特征</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/02%E4%BA%91%E5%8E%9F%E7%94%9F%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E7%BB%84%E6%88%90%E4%BB%A5%E5%8F%8A%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%9A%84%E7%89%B9%E5%BE%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/02%E4%BA%91%E5%8E%9F%E7%94%9F%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E7%9A%84%E7%BB%84%E6%88%90%E4%BB%A5%E5%8F%8A%E4%BA%91%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E7%9A%84%E7%89%B9%E5%BE%81/</guid>
      <description>&lt;p&gt;在前一篇文章中，我们讲解了云原生（Cloud Native） 的相关概念，以及它是如何重构互联网产品开发模式的。我们知道云原生不是某个单独的技术，而是技术与管理方法的合集。为便于你在正式了解实践云原生架构的方法之前能有一个系统性的思维，今天我们将继续“云原生”这个话题，介绍云原生基础架构的组成部分，以及构建出来的云原生应用的特征。&lt;/p&gt;</description>
    </item>
    <item>
      <title>03微服务架构是如何演进的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/03%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%98%AF%E5%A6%82%E4%BD%95%E6%BC%94%E8%BF%9B%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/03%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E6%98%AF%E5%A6%82%E4%BD%95%E6%BC%94%E8%BF%9B%E7%9A%84/</guid>
      <description>&lt;p&gt;我们在前面两篇文章中已经介绍了云原生相关的概念及其应用，本课时开始我们将会进入微服务的相关学习。&lt;/p&gt;&#xA;&lt;p&gt;微服务架构是当前流行的架构方式，在本课时我们将会首先介绍服务端架构的发展，如何由单体一步步演进到微服务架构；随后介绍 Go 语言微服务架构的选型，确定本课程的基本框架；最后，在学习完云原生和微服务的相关知识，我们再回顾一下云原生架构与微服务架构之间到底是什么关系。&lt;/p&gt;</description>
    </item>
    <item>
      <title>04DDD领域场景分析的战略模式</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/04ddd%E9%A2%86%E5%9F%9F%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90%E7%9A%84%E6%88%98%E7%95%A5%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/04ddd%E9%A2%86%E5%9F%9F%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90%E7%9A%84%E6%88%98%E7%95%A5%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;在微服务架构落地实践的过程中，工程师往往会遇到微服务的粒度与边界划分等实践问题，DDD（Domain Driven Design，领域驱动设计）是解答这些问题的关键技术之一，它是一套完整且系统的设计方法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>05为什么说ServiceMeh是下一代微服务架构？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/05%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4servicemeh%E6%98%AF%E4%B8%8B%E4%B8%80%E4%BB%A3%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/05%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4servicemeh%E6%98%AF%E4%B8%8B%E4%B8%80%E4%BB%A3%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</guid>
      <description>&lt;p&gt;在前面第 2 课时我们介绍过，Service Mesh（服务网格） 是云原生的代表技术之一，并且在后面的组件案例实践中，Service Mesh 也是其中的“主角”，因此我们非常有必要重点介绍下 Service Mesh 的诞生背景、相关特性以及三种常见的开源组件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>06Go语言开发快速回顾：语法、数据结构和流程控制</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/06go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE%E8%AF%AD%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/06go%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E5%BF%AB%E9%80%9F%E5%9B%9E%E9%A1%BE%E8%AF%AD%E6%B3%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>&lt;p&gt;Go 语言简单、高效，具备很强的语言表达能力，支持静态类型安全，同时提供动态语言的特性。不仅如此，它还支持自动垃圾回收，能够有效防止内存泄漏，并从底层支持协程并发，充分利用计算机的硬件性能。基于以上种种优势，Go 目前在软件行业发挥着重要作用，不少优秀的开源软件都是基于 Go 进行开发的，包括 Docker、Etcd 和 Kubernetes 等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>07如何使用Go更好地开发并发程序？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/07%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8go%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%BC%80%E5%8F%91%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/07%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8go%E6%9B%B4%E5%A5%BD%E5%9C%B0%E5%BC%80%E5%8F%91%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F/</guid>
      <description>&lt;p&gt;我们都知道计算机的核心为 CPU，它是计算机的运算和控制核心，承载了所有的计算任务。最近半个世纪以来，由于半导体技术的高速发展，集成电路中晶体管的数量也在大幅度增长，这大大提升了 CPU 的性能。著名的摩尔定律——“集成电路芯片上所集成的电路的数目，每隔18个月就翻一番”，描述的就是该种情形。&lt;/p&gt;</description>
    </item>
    <item>
      <title>08如何基于Go-kit开发Web应用：从接口层到业务层再到数据层</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/08%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8Ego-kit%E5%BC%80%E5%8F%91web%E5%BA%94%E7%94%A8%E4%BB%8E%E6%8E%A5%E5%8F%A3%E5%B1%82%E5%88%B0%E4%B8%9A%E5%8A%A1%E5%B1%82%E5%86%8D%E5%88%B0%E6%95%B0%E6%8D%AE%E5%B1%82/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/08%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8Ego-kit%E5%BC%80%E5%8F%91web%E5%BA%94%E7%94%A8%E4%BB%8E%E6%8E%A5%E5%8F%A3%E5%B1%82%E5%88%B0%E4%B8%9A%E5%8A%A1%E5%B1%82%E5%86%8D%E5%88%B0%E6%95%B0%E6%8D%AE%E5%B1%82/</guid>
      <description>&lt;p&gt;在前面两个课时，我们回顾了 Go 的基础语法和 Go 的并发编程相关的知识，相信你对如何编写一个简单的 Go 程序已经有了足够的知识积累。但是你可能并没有完整开发过一个 Go 应用项目，因此本课时我们就通过开发一个 User Web 应用来学习如何进行 Go Web 项目开发。&lt;/p&gt;</description>
    </item>
    <item>
      <title>09案例：货运平台应用的微服务划分</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/09%E6%A1%88%E4%BE%8B%E8%B4%A7%E8%BF%90%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%92%E5%88%86/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/09%E6%A1%88%E4%BE%8B%E8%B4%A7%E8%BF%90%E5%B9%B3%E5%8F%B0%E5%BA%94%E7%94%A8%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%88%92%E5%88%86/</guid>
      <description>&lt;p&gt;今天我们主要来介绍货运平台应用的微服务划分的案例。&lt;/p&gt;&#xA;&lt;p&gt;在前面的 04 课时中，我和你分享了 DDD 领域场景分析的战略模式，介绍了如何根据问题域，划分业务系统的领域和限界上下文。理想情况下，在划分完业务系统的领域和限界上下文后，我们就能够从高层的视野审视整个业务系统，并将限界上下文和微服务一一对应；接着再关注限界上下文内的领域模型，通过模型内的领域对象解决子领域内的特定问题，多个限界上下文通力合作共同解决整个领域内的问题，提供业务系统的解决方案。&lt;/p&gt;</description>
    </item>
    <item>
      <title>10案例：微服务Docker容器化部署和Kubernete容器编排</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/10%E6%A1%88%E4%BE%8B%E5%BE%AE%E6%9C%8D%E5%8A%A1docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%92%8Ckubernete%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/10%E6%A1%88%E4%BE%8B%E5%BE%AE%E6%9C%8D%E5%8A%A1docker%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%92%8Ckubernete%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92/</guid>
      <description>&lt;p&gt;今天我们主要来介绍微服务 Docker 容器化部署和 Kubernetes 容器编排的案例。&lt;/p&gt;&#xA;&lt;p&gt;微服务架构“分而治之”的手段将大型系统按业务分割为多个互相协作的微服务，每个微服务关注于自身业务职责，可独立开发、部署和维护，从而更好地应对频繁的需求变更和迭代。但是数量众多的微服务实例给运维带来了巨大的挑战，如果没有好的办法快速部署和启动微服务，那么微服务架构带来的好处将所剩无几。而容器化和容器编排的兴起正好填补了这个缺点。&lt;/p&gt;</description>
    </item>
    <item>
      <title>11案例：如何结合Jenkin完成持续化集成和自动化测试？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/11%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E7%BB%93%E5%90%88jenkin%E5%AE%8C%E6%88%90%E6%8C%81%E7%BB%AD%E5%8C%96%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/11%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E7%BB%93%E5%90%88jenkin%E5%AE%8C%E6%88%90%E6%8C%81%E7%BB%AD%E5%8C%96%E9%9B%86%E6%88%90%E5%92%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</guid>
      <description>&lt;p&gt;今天我们主要来介绍如何结合 Jenkins 完成持续化集成和自动化测试的案例。&lt;/p&gt;&#xA;&lt;p&gt;在微服务开发团队中，一般会采用敏捷开发这类增长式的开发方式，这能有效提高各个微服务的迭代效率。为了让完成的代码能够尽快得到反馈，我们建议尽早将完成的代码提交到代码库中被集成部署，每天一次甚至一天多次，通过自动构建和自动化测试，尽早检测出集成的错误，从而确保错误被尽快发现和纠正。&lt;/p&gt;</description>
    </item>
    <item>
      <title>12服务注册与发现如何满足服务治理？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/12%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E5%A6%82%E4%BD%95%E6%BB%A1%E8%B6%B3%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/12%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%E5%A6%82%E4%BD%95%E6%BB%A1%E8%B6%B3%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/</guid>
      <description>&lt;p&gt;在单体应用向微服务架构演进的过程中，原本的巨石型应用会按照业务需求被拆分成多个微服务，每个微服务会提供特定的功能，并可能依赖于其他的微服务。每个微服务实例都可以动态部署，服务实例之间的调用通过轻量级的远程调用方式（HTTP、消息队列等）实现，它们之间通过预先定义好的接口进行访问。&lt;/p&gt;</description>
    </item>
    <item>
      <title>13案例：如何基于Conul给微服务添加服务注册与发现？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/13%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8Econul%E7%BB%99%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B7%BB%E5%8A%A0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/13%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8Econul%E7%BB%99%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B7%BB%E5%8A%A0%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</guid>
      <description>&lt;p&gt;今天我和你分享的是如何基于 Consul 给微服务添加服务注册与发现的案例。&lt;/p&gt;&#xA;&lt;p&gt;微服务架构按业务划分微服务的特点，使得原本聚合了大量业务模块的单体应用被划分为众多的微服务。而大量微服务的出现，势必会带来运维管理上的巨大挑战，于是服务注册与发现这类自动化策略应运而生。但是引入服务注册与发现就可能引入额外技术栈，增加系统总体的复杂性，比如会引入中心化的服务注册与发现中心这类基础组件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>14案例：如何在Go-kit和ServiceMeh中进行服务注册与发现？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/14%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E5%9C%A8go-kit%E5%92%8Cservicemeh%E4%B8%AD%E8%BF%9B%E8%A1%8C%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/14%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E5%9C%A8go-kit%E5%92%8Cservicemeh%E4%B8%AD%E8%BF%9B%E8%A1%8C%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0/</guid>
      <description>&lt;p&gt;今天我和你分享的是如何在 Go-kit 和 Service Mesh 中进行服务注册与发现的案例。&lt;/p&gt;&#xA;&lt;p&gt;在上一课时中，我们基于搭建好的 Consul 集群，通过 Consul 中提供的 HTTP API 实现了 register 的服务注册与发现功能。我们采用手动构造 HTTP 请求的方式，在服务启动时发送服务实例数据到 Consul 中完成服务注册，在服务关闭时向 Consul 请求服务注销，并通过 Consul 提供的服务发现接口根据服务名获取可用的服务实例信息列表。&lt;/p&gt;</description>
    </item>
    <item>
      <title>15微服务间如何进行远程方法调用？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/15%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%97%B4%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/15%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%97%B4%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E8%BF%9C%E7%A8%8B%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/</guid>
      <description>&lt;p&gt;在微服务架构中，每个服务实例负责一个单一领域的业务实现，不同服务实例之间需要进行频繁交互来共同实现业务。那它们是如何通信的呢？服务实例之间主要通过轻量级的远程调用方式来实现，比如 RPC。&lt;/p&gt;</description>
    </item>
    <item>
      <title>16GoRPC如何实现服务间通信？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/16gorpc%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E9%97%B4%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/16gorpc%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1%E9%97%B4%E9%80%9A%E4%BF%A1/</guid>
      <description>&lt;p&gt;在上一课时，我们讲解了 RPC 的相关概念和常见的 RPC 框架。其中， Go RPC 是指 Go 语言原生支持的 RPC 框架，它虽然简单但却十分经典，非常适合作为你后续深入了解 RPC 框架时的研究对象。&lt;/p&gt;</description>
    </item>
    <item>
      <title>17gRPC和ApacheThrift之间如何进行选型？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/17grpc%E5%92%8Capachethrift%E4%B9%8B%E9%97%B4%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E9%80%89%E5%9E%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/17grpc%E5%92%8Capachethrift%E4%B9%8B%E9%97%B4%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E9%80%89%E5%9E%8B/</guid>
      <description>&lt;p&gt;在上一课时中，我们已经对 Go 语言原生 RPC 的使用和具体实现原理进行了详细讲解，并指出其缺少超时熔断、链接管理和服务注册发现等功能，达不到生产环境“开箱即用”的水准，不过官方已经不再为其扩充新功能了，而是推荐使用 gRPC。&lt;/p&gt;</description>
    </item>
    <item>
      <title>18案例：Go-kit如何集成gRPC？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/18%E6%A1%88%E4%BE%8Bgo-kit%E5%A6%82%E4%BD%95%E9%9B%86%E6%88%90grpc/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/18%E6%A1%88%E4%BE%8Bgo-kit%E5%A6%82%E4%BD%95%E9%9B%86%E6%88%90grpc/</guid>
      <description>&lt;p&gt;在上一课时中，我们对比分析了 gRPC 和 Thrift ，发现二者都缺少了大量的功能，比如：连接池、服务框架、服务发现、服务治理、分布式链路追踪、埋点和上下文日志等，这些功能才是日常开发和运维最常使用的。而 Go-kit 提供了上述的功能，并且还可以和 gRPC 进行结合，所以今天我们就来详细讲解一下 Go-kit 和 gRPC 结合的基本原理和实战案例。&lt;/p&gt;</description>
    </item>
    <item>
      <title>19微服务网关如何作为服务端统一入口点？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/19%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E5%A6%82%E4%BD%95%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BB%9F%E4%B8%80%E5%85%A5%E5%8F%A3%E7%82%B9/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/19%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3%E5%A6%82%E4%BD%95%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BB%9F%E4%B8%80%E5%85%A5%E5%8F%A3%E7%82%B9/</guid>
      <description>&lt;p&gt;在单体架构中，客户端在向服务端发起请求时，会通过类似 Nginx 的负载均衡组件获取到多个相同的应用程序实例中的一个。请求由该服务实例进行处理，服务端处理完之后返回响应给客户端。&lt;/p&gt;</description>
    </item>
    <item>
      <title>20如何进行网关选型？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/20%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%BD%91%E5%85%B3%E9%80%89%E5%9E%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/20%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E7%BD%91%E5%85%B3%E9%80%89%E5%9E%8B/</guid>
      <description>&lt;p&gt;在上一课时我们介绍了网关的基本原理，并动手实现了一个 Go 简易网关。那本课时我们就接着来探讨微服务网关的选型。&lt;/p&gt;&#xA;&lt;p&gt;业界有很多流行的 API 网关，比如开源的就有 Nginx、Netflix Zuul、Kong 等。Kong 有商业版，与此类似的商业版网关还有 GoKu API Gateway 和 Tyk 等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>21案例：如何使用Kong进行网关业务化定制？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/21%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8kong%E8%BF%9B%E8%A1%8C%E7%BD%91%E5%85%B3%E4%B8%9A%E5%8A%A1%E5%8C%96%E5%AE%9A%E5%88%B6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/21%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8kong%E8%BF%9B%E8%A1%8C%E7%BD%91%E5%85%B3%E4%B8%9A%E5%8A%A1%E5%8C%96%E5%AE%9A%E5%88%B6/</guid>
      <description>&lt;p&gt;在上一课时中，我们对比了几款市面上流行的微服务网关，那么本课时我们就基于其中一款，也就是 Kong 来重点介绍微服务网关是如何搭建和实现的。&lt;/p&gt;&#xA;&lt;p&gt;为什么使用 Kong&lt;/p&gt;</description>
    </item>
    <item>
      <title>22如何保障分布式系统的高可用性？（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/22%E5%A6%82%E4%BD%95%E4%BF%9D%E9%9A%9C%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/22%E5%A6%82%E4%BD%95%E4%BF%9D%E9%9A%9C%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E4%B8%8A/</guid>
      <description>&lt;p&gt;高可用性是我们经常提到的名词，指系统提供的服务要始终可用，无论是系统内部运行出现故障，还是系统的外部依赖出现问题，甚至遇到系统硬件损坏、停电等致命性打击，系统都要保证基本可用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>23如何保障分布式系统的高可用性？（下）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/23%E5%A6%82%E4%BD%95%E4%BF%9D%E9%9A%9C%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/23%E5%A6%82%E4%BD%95%E4%BF%9D%E9%9A%9C%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E4%B8%8B/</guid>
      <description>&lt;p&gt;在上一篇文章中，我们首先介绍了系统可用性的相关概念——系统故障的必现性以及系统可用性指标，然后还详细说明了两种常用于提高分布式系统可用性的设计——冗余设计和熔断设计。&lt;/p&gt;</description>
    </item>
    <item>
      <title>24如何实现熔断机制？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/24%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/24%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%86%94%E6%96%AD%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;p&gt;在第 22 课时中，我们已经了解了熔断的基本原理和断路器在服务高可用架构中的重要性。那本课时我们继续往下剖析，来详细介绍熔断主要预防的服务雪崩现象的形成和危害，以及推荐使用的断路器中间件Hystrix 的使用方法和相关原理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>25如何实现接口限流和降级？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/25%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E9%99%90%E6%B5%81%E5%92%8C%E9%99%8D%E7%BA%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/25%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E9%99%90%E6%B5%81%E5%92%8C%E9%99%8D%E7%BA%A7/</guid>
      <description>&lt;p&gt;在前面的第 23 课时中，我们已经介绍了限流和降级的相关概念以及在服务高可用架构中的重要性。那本课时我们就继续往下剖析，来详细讲解限流和降级的使用场景以及二者的区别，接着我还会给你一些具体的案例，让你更好地掌握如何去进行限流和降级。&lt;/p&gt;</description>
    </item>
    <item>
      <title>26案例：如何通过ServiceMeh实现熔断和限流？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/26%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87servicemeh%E5%AE%9E%E7%8E%B0%E7%86%94%E6%96%AD%E5%92%8C%E9%99%90%E6%B5%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/26%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87servicemeh%E5%AE%9E%E7%8E%B0%E7%86%94%E6%96%AD%E5%92%8C%E9%99%90%E6%B5%81/</guid>
      <description>&lt;p&gt;在前面的课时中，我们分别学习了熔断、限流在服务高可用架构中的重要性和具体使用方式。但是，在具体使用过程中，我们会发现实现熔断和限流的代码和实现业务逻辑的代码耦合在一起，对系统的可维护性产生了不良的影响。&lt;/p&gt;</description>
    </item>
    <item>
      <title>27负载均衡如何提高系统可用性？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/27%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E7%B3%BB%E7%BB%9F%E5%8F%AF%E7%94%A8%E6%80%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/27%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E7%B3%BB%E7%BB%9F%E5%8F%AF%E7%94%A8%E6%80%A7/</guid>
      <description>&lt;p&gt;负载均衡能够将大量的请求，根据负载均衡算法，分发到多台服务器上进行处理，使得所有服务器负载都维持在高效稳定的状态，以提高系统的吞吐量。此外，多个服务实例组成的服务集群，消除了单点问题，当某一个服务实例宕机时，负载均衡就不会将请求分发给它，而是转发给其他正常的服务实例，以此提高整个系统的可用性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>28案例：如何在Go微服务中实现负载均衡？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/28%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E5%9C%A8go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/28%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E5%9C%A8go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</guid>
      <description>&lt;p&gt;在上一课时中，我们已经介绍了负载均衡的相关概念以及在服务高可用架构中的重要性，也了解了几种主流负载均衡算法的实现。在本课时中，我们将在 Go 微服务实例中具体使用负载均衡技术，并详细说明如何基于服务发现来实现负载均衡的微服务间 HTTP 调用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>29统一认证与授权如何保障服务安全？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/29%E7%BB%9F%E4%B8%80%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E5%A6%82%E4%BD%95%E4%BF%9D%E9%9A%9C%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/29%E7%BB%9F%E4%B8%80%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E5%A6%82%E4%BD%95%E4%BF%9D%E9%9A%9C%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8/</guid>
      <description>&lt;p&gt;认证与授权对于当前的互联网应用是非常重要的基础功能：认证用于验证当前用户的身份，而授权意味着用户在认证成功后，会被系统授予访问系统资源的权限。只有具备相应身份和权限的人才能访问系统中的相应资源，比如在购物网站中你只能支付你自己购物车内的商品，这就保护了用户和系统的信息安全。&lt;/p&gt;</description>
    </item>
    <item>
      <title>30如何设计基于OAuth2和JWT的认证与授权服务体系</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/30%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E5%9F%BA%E4%BA%8Eoauth2%E5%92%8Cjwt%E7%9A%84%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E4%BD%93%E7%B3%BB/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/30%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E5%9F%BA%E4%BA%8Eoauth2%E5%92%8Cjwt%E7%9A%84%E8%AE%A4%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E4%BD%93%E7%B3%BB/</guid>
      <description>&lt;p&gt;在上一课时中，我们介绍了统一认证与授权在微服务架构中存在的一些必要性和挑战，并介绍了 3 种主流的统一认证与授权方案，包括 OAuth2、分布式 Session 和 JWT。在本课时，我们将基于 OAuth2 和 JWT 设计一个认证与授权服务，让其为我们微服务的信息安全保驾护航。&lt;/p&gt;</description>
    </item>
    <item>
      <title>31案例：如何自定义授权服务器？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/31%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/31%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%88%E6%9D%83%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>&lt;p&gt;今天我和你分享的是如何自定义授权服务器的案例。&lt;/p&gt;&#xA;&lt;p&gt;在上一课时中，我们基于 OAuth2 和 JWT 设计了认证与授权服务体系，在本课时，我们将通过 Go 来搭建一个授权服务器。&lt;/p&gt;</description>
    </item>
    <item>
      <title>32案例：如何保证微服务实例资源安全？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/32%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E4%BE%8B%E8%B5%84%E6%BA%90%E5%AE%89%E5%85%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/32%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E4%BE%8B%E8%B5%84%E6%BA%90%E5%AE%89%E5%85%A8/</guid>
      <description>&lt;p&gt;今天我和你分享的是如何保证微服务实例资源安全的案例。&lt;/p&gt;&#xA;&lt;p&gt;在上一课时中，我们实践了如何使用 Go 搭建一个基本的授权服务器，它的主要功能是颁发访问令牌和验证访问令牌的有效性。在统一认证与授权服务体系中，还存在资源服务器对用户数据进行保护，它允许携带有效访问令牌的客户端请求用户资源。&lt;/p&gt;</description>
    </item>
    <item>
      <title>33如何追踪分布式系统调用链路的问题？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/33%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E9%93%BE%E8%B7%AF%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/33%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E9%93%BE%E8%B7%AF%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;微服务极大地改变了软件的开发和交付模式，单体应用被拆分为多个微服务，单个服务的复杂度大幅降低，库之间的依赖也转变为服务之间的依赖。由此带来的问题是部署的粒度变得越来越细，众多的微服务给运维带来巨大压力，即使有了 Docker 容器和服务编排组件 Kubernetes，这依然是个严肃的问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>34OpenTracing规范介绍与分布式链路追踪组件选型</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/34opentracing%E8%A7%84%E8%8C%83%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E7%BB%84%E4%BB%B6%E9%80%89%E5%9E%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/34opentracing%E8%A7%84%E8%8C%83%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA%E7%BB%84%E4%BB%B6%E9%80%89%E5%9E%8B/</guid>
      <description>&lt;p&gt;在上一课时，我们介绍了分布式链路追踪组件的相关背景和概念。市面上有多款流行的分布式链路追踪组件，包括 Zipkin、Jaeger、SkyWalking 和 Pinpoint 等，那它们具体的工作特性是怎样的呢？在实际工作中，我们又应该如何选型呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>35案例：如何在微服务中集成Zipkin组件？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/35%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E5%9C%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%9B%86%E6%88%90zipkin%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/35%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E5%9C%A8%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%AD%E9%9B%86%E6%88%90zipkin%E7%BB%84%E4%BB%B6/</guid>
      <description>&lt;p&gt;这一课时我们就来进行案例实战，选择当前流行的链路追踪组件 Zipkin 作为示例，演示如何在 Go 微服务中集成 Zipkin。对于很多使用了 Go 微服务框架的用户来说，其框架本身就拥有 Trace 模块，如 Go-kit。所以本课时我们就在 Go-kit 微服务的案例中集成 Zipkin。&lt;/p&gt;</description>
    </item>
    <item>
      <title>36如何使用ELK进行日志采集以及统一处理？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/36%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8elk%E8%BF%9B%E8%A1%8C%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E4%BB%A5%E5%8F%8A%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/36%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8elk%E8%BF%9B%E8%A1%8C%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E4%BB%A5%E5%8F%8A%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;在前面的一系列课时，我们介绍了微服务各个组件的相关实践，从本课时开始我们将会介绍微服务日常开发的一些“利器”，这些工具会帮助我们构建更加健壮的微服务系统，并帮助排查解决微服务系统中的问题与性能瓶颈等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>37如何处理Go错误异常与并发陷阱？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/37%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86go%E9%94%99%E8%AF%AF%E5%BC%82%E5%B8%B8%E4%B8%8E%E5%B9%B6%E5%8F%91%E9%99%B7%E9%98%B1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/37%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86go%E9%94%99%E8%AF%AF%E5%BC%82%E5%B8%B8%E4%B8%8E%E5%B9%B6%E5%8F%91%E9%99%B7%E9%98%B1/</guid>
      <description>&lt;p&gt;错误处理是软件开发中不可回避的问题，Go 中主要通过 error 和 panic 分别表示错误和异常，并提供了较为简洁的错误异常处理机制。作为一门并发性能优越的语言，Go 虽然降低了协程并发开发的难度，但也存在一些并发陷阱，这就需要我们在开发时额外注意。&lt;/p&gt;</description>
    </item>
    <item>
      <title>38案例：如何使用Prometheu和Grafana监控预警服务集群？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/38%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8prometheu%E5%92%8Cgrafana%E7%9B%91%E6%8E%A7%E9%A2%84%E8%AD%A6%E6%9C%8D%E5%8A%A1%E9%9B%86%E7%BE%A4/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/38%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8prometheu%E5%92%8Cgrafana%E7%9B%91%E6%8E%A7%E9%A2%84%E8%AD%A6%E6%9C%8D%E5%8A%A1%E9%9B%86%E7%BE%A4/</guid>
      <description>&lt;p&gt;你好，我是 aoho，今天我和你分享的是如何使用 Prometheus 和 Grafana 监控预警服务集群的案例。&lt;/p&gt;&#xA;&lt;p&gt;监控和预警平台是互联网公司较为重要的后端架构组成之一，是整个运维乃至整个产品生命周期中最重要的一环，它能够事前及时预警发现故障，事后提供详实的数据用于追查定位问题。Prometheus 和 Grafana 相结合是开源服务监控和预警平台的主流方案之一。&lt;/p&gt;</description>
    </item>
    <item>
      <title>结束语云原生不是服务端架构的终点</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/%E7%BB%93%E6%9D%9F%E8%AF%AD%E4%BA%91%E5%8E%9F%E7%94%9F%E4%B8%8D%E6%98%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9E%B6%E6%9E%84%E7%9A%84%E7%BB%88%E7%82%B9/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/%E7%BB%93%E6%9D%9F%E8%AF%AD%E4%BA%91%E5%8E%9F%E7%94%9F%E4%B8%8D%E6%98%AF%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9E%B6%E6%9E%84%E7%9A%84%E7%BB%88%E7%82%B9/</guid>
      <description>&lt;p&gt;你好，我是 aoho，感谢大家的陪伴，课程到这里已经临近尾声。&lt;/p&gt;&#xA;&lt;p&gt;十分感谢读到这里的你，感谢你一路坚持，最终来到了课程的结尾。在课程刚开始时，我曾建议你给自己定个目标，然后将目标进行拆分，每天进步一点点，并多在课程下方留言和大家一起交流。不清楚看到我的这段建议后，认可这种学习方式并且真正坚持下来的人有多少。世间的路和道理就是如此，一万个人读到我的建议，一千人被启发，一百人去执行，最后可能只有一人坚持下来。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开篇词掌握Go和微服务，跟进未来服务端开发的主流趋势</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/%E5%BC%80%E7%AF%87%E8%AF%8D%E6%8E%8C%E6%8F%A1go%E5%92%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B7%9F%E8%BF%9B%E6%9C%AA%E6%9D%A5%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%BB%E6%B5%81%E8%B6%8B%E5%8A%BF/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%9838%E8%AE%B2/%E5%BC%80%E7%AF%87%E8%AF%8D%E6%8E%8C%E6%8F%A1go%E5%92%8C%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%B7%9F%E8%BF%9B%E6%9C%AA%E6%9D%A5%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%BB%E6%B5%81%E8%B6%8B%E5%8A%BF/</guid>
      <description>&lt;p&gt;你好，我是 aoho，一名服务端技术开发专家，已有五年多微服务开发经验，曾就职于美团等一线互联网公司，现任源图信息有限公司架构负责人。由于我很早就关注了微服务架构，对于云原生、微服务、容器化等都有过深入的研究和实践。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
