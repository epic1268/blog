<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>高效敏捷测试49讲 on Docs</title>
    <link>https://politcloud.org/tags/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/</link>
    <description>Recent content in 高效敏捷测试49讲 on Docs</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 10 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://politcloud.org/tags/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>第01讲：究竟什么是敏捷测试？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC01%E8%AE%B2%E7%A9%B6%E7%AB%9F%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC01%E8%AE%B2%E7%A9%B6%E7%AB%9F%E4%BB%80%E4%B9%88%E6%98%AF%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95/</guid>
      <description>&lt;p&gt;2013 年，在 InfoQ 发表了相同标题的文章，但这篇文章是全新而作。在回答“究竟什么是敏捷测试”之前，我先问一个问题：你了解敏捷开发吗？&lt;/p&gt;&#xA;&lt;p&gt;虽然我听不到你的回答，但还是先提醒你回忆一下著名的敏捷宣言和 12 项敏捷开发原则，带着这些回忆或过去的思考，来听听我下面给你讲的案例，在听的过程中，你可以去审视这个案例，来判断哪些符合敏捷价值观，哪些又违反了敏捷开发原则，最后我们一起来分析案例，并回答“究竟什么是敏捷测试”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第02讲：通过案例全面比较传统测试与敏捷测试</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC02%E8%AE%B2%E9%80%9A%E8%BF%87%E6%A1%88%E4%BE%8B%E5%85%A8%E9%9D%A2%E6%AF%94%E8%BE%83%E4%BC%A0%E7%BB%9F%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC02%E8%AE%B2%E9%80%9A%E8%BF%87%E6%A1%88%E4%BE%8B%E5%85%A8%E9%9D%A2%E6%AF%94%E8%BE%83%E4%BC%A0%E7%BB%9F%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95/</guid>
      <description>&lt;p&gt;这一讲的内容我想通过一个例子来全面比较一下传统测试与敏捷测试的区别，这个例子来自一本书——《凤凰项目：一个 IT 运维的传奇故事》。这是由美国的三位 DevOps 专家撰写的一本关于 IT 运维的小说。有人说，在 IT 咨询业，没读过这本书都不好意思跟人家谈 DevOps。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第03讲：敏捷测试思维方式</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC03%E8%AE%B2%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E6%80%9D%E7%BB%B4%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC03%E8%AE%B2%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E6%80%9D%E7%BB%B4%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;上一讲介绍了敏捷测试与传统测试之间的区别，从测试的独立性、阶段性、计划性、自动化测试等多个方面进行了对比，其实敏捷测试与传统测试之间最大的区别不在那里，而是在测试原则（第 1 讲已讨论）和测试思维方式（Test Mindset）上。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第04讲：敏捷测试流程解析</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC04%E8%AE%B2%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC04%E8%AE%B2%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;p&gt;谈完敏捷测试思维方式之后，为何先谈流程呢？因为流程也可以理解为实施框架，容易让人看到研究对象完整的概貌，并了解实施的全过程，知道从哪里开始、如何结束，不至于陷入“一片茫然”之境地。例如，在敏捷开发中，有众多的落地模式，比如水晶方法、极限编程、Scrum、自适应软件开发、动态系统开发方法等，但 Scrum 给了一个清晰、简单的流程，很容易理解 Scrum 是如何运作的，所以就容易被大家所接受。今天我们谈起敏捷，你肯定会想到 Scrum。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第05讲：仅有的两本敏捷测试的图书是如何误导我们的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC05%E8%AE%B2%E4%BB%85%E6%9C%89%E7%9A%84%E4%B8%A4%E6%9C%AC%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9B%BE%E4%B9%A6%E6%98%AF%E5%A6%82%E4%BD%95%E8%AF%AF%E5%AF%BC%E6%88%91%E4%BB%AC%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC05%E8%AE%B2%E4%BB%85%E6%9C%89%E7%9A%84%E4%B8%A4%E6%9C%AC%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9B%BE%E4%B9%A6%E6%98%AF%E5%A6%82%E4%BD%95%E8%AF%AF%E5%AF%BC%E6%88%91%E4%BB%AC%E7%9A%84/</guid>
      <description>&lt;p&gt;Lisa Crispin 和 Janet Gregory 两位女作者分别写了两本关于敏捷测试的图书，即 Agile Testing: A Practical Guide for Testers and Agile Teams（2009 年元月出版，后面简称为《敏捷软件测试》），More Agile Testing: Learning Journeys for the Whole Team（2014 年 10 月出版，后面简称为《深入敏捷测试》）。图 1 是我收藏的这两本书的中文译本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第06讲：敏捷团队究竟要不要专职的测试人员？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC06%E8%AE%B2%E6%95%8F%E6%8D%B7%E5%9B%A2%E9%98%9F%E7%A9%B6%E7%AB%9F%E8%A6%81%E4%B8%8D%E8%A6%81%E4%B8%93%E8%81%8C%E7%9A%84%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC06%E8%AE%B2%E6%95%8F%E6%8D%B7%E5%9B%A2%E9%98%9F%E7%A9%B6%E7%AB%9F%E8%A6%81%E4%B8%8D%E8%A6%81%E4%B8%93%E8%81%8C%E7%9A%84%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98/</guid>
      <description>&lt;p&gt;问题的提出及各方理由&lt;/p&gt;&#xA;&lt;p&gt;随着 Fackbook 和 Google 在商业上取得的巨大成功，他们的开发模式引起了广泛的讨论，并且和敏捷挂上了钩，同时引来了“敏捷团队需不需要专职的测试人员？”这样有争议的问题。人的问题是最关键的问题，所以我们有必要在这里讨论一下。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第07讲：如果有专职的敏捷测试人员，他们的职责是什么？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC07%E8%AE%B2%E5%A6%82%E6%9E%9C%E6%9C%89%E4%B8%93%E8%81%8C%E7%9A%84%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BB%96%E4%BB%AC%E7%9A%84%E8%81%8C%E8%B4%A3%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC07%E8%AE%B2%E5%A6%82%E6%9E%9C%E6%9C%89%E4%B8%93%E8%81%8C%E7%9A%84%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E4%BA%BA%E5%91%98%E4%BB%96%E4%BB%AC%E7%9A%84%E8%81%8C%E8%B4%A3%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;我们第 6 讲讨论的是没有专职测试人员的情况，这一讲主要讨论有专职测试人员的情况。相信购买这个专栏的同学，大多数是专职测试人员，所以大家对这个话题会更感兴趣，对吧？&lt;/p&gt;</description>
    </item>
    <item>
      <title>第08讲：借助TetOwner角色，完成团队转型？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC08%E8%AE%B2%E5%80%9F%E5%8A%A9tetowner%E8%A7%92%E8%89%B2%E5%AE%8C%E6%88%90%E5%9B%A2%E9%98%9F%E8%BD%AC%E5%9E%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC08%E8%AE%B2%E5%80%9F%E5%8A%A9tetowner%E8%A7%92%E8%89%B2%E5%AE%8C%E6%88%90%E5%9B%A2%E9%98%9F%E8%BD%AC%E5%9E%8B/</guid>
      <description>&lt;p&gt;三年前的一天，我碰到了一个之前在思科的老同事，问了下他现在软件开发采用的是什么模式？&lt;/p&gt;&#xA;&lt;p&gt;他回答：“已全面实施敏捷开发模式了，有些团队都没有测试人员，测试都是开发人员自己做。”&lt;/p&gt;</description>
    </item>
    <item>
      <title>第09讲：如何构建有强烈质量意识的学习型组织？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC09%E8%AE%B2%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E6%9C%89%E5%BC%BA%E7%83%88%E8%B4%A8%E9%87%8F%E6%84%8F%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%9E%8B%E7%BB%84%E7%BB%87/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC09%E8%AE%B2%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E6%9C%89%E5%BC%BA%E7%83%88%E8%B4%A8%E9%87%8F%E6%84%8F%E8%AF%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%9E%8B%E7%BB%84%E7%BB%87/</guid>
      <description>&lt;p&gt;达成质量共识&lt;/p&gt;&#xA;&lt;p&gt;在两个月之前，我写了一篇“软件测试灵魂三问”的文章，很受欢迎，有 8000 多的阅读量。而在此之前，还写过一篇“质量三问”的文章，更具有挑战，即通常所说的哲学三问，你是谁？从哪里来？到哪里去？那么，质量是什么？从哪里来？到哪里去？这样的基本问题，按道理每个公司都应该去回答，企业中的每个团队、团队中的每个成员都需要思考这样的问题，是否认同自己所在的公司给出的答案。如果不认同，怎么办？要不要进一步和公司管理层去沟通，在如今质量认知上达成共识。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第10讲：如何更好地为测试而学？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC10%E8%AE%B2%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E4%B8%BA%E6%B5%8B%E8%AF%95%E8%80%8C%E5%AD%A6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC10%E8%AE%B2%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E4%B8%BA%E6%B5%8B%E8%AF%95%E8%80%8C%E5%AD%A6/</guid>
      <description>&lt;p&gt;上一讲介绍了如何构建学习型组织，这一讲则从团队成员的个人角度来讨论如何加强测试方面的学习。&lt;/p&gt;&#xA;&lt;p&gt;在讲解之前，我先考你一个简单的问题，来自于《塔木德》经，问： “有两个男孩帮家里打扫烟囱。打扫完了，一个满脸乌黑地从烟囱里跑出来，另一个脸上一点煤灰都没有。那么，你认为哪一个男孩会去洗脸呢？”&lt;/p&gt;</description>
    </item>
    <item>
      <title>第11讲：产品、测试与开发如何协作？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC11%E8%AE%B2%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%BC%80%E5%8F%91%E5%A6%82%E4%BD%95%E5%8D%8F%E4%BD%9C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC11%E8%AE%B2%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%BC%80%E5%8F%91%E5%A6%82%E4%BD%95%E5%8D%8F%E4%BD%9C/</guid>
      <description>&lt;p&gt;在敏捷宣言核心的四句话中，第一句就是“个体与协作胜于流程和工具”，在敏捷中，强调自我管理，团队对质量负责、对测试负责，这些也离不开协作。Lisa 和 Janet 在 2017 年给出的“敏捷测试定义”中认为：敏捷测试就是从开始到交付的协作测试实践，并支持高质量产品的频繁交付……。如果高度概括的话，敏捷测试就是协作测试实践。这些都说明，协作在敏捷测试中是非常重要的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第12讲：持续交付（CD）与持续集成（CI）意味着什么？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC12%E8%AE%B2%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98cd%E4%B8%8E%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90ci%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC12%E8%AE%B2%E6%8C%81%E7%BB%AD%E4%BA%A4%E4%BB%98cd%E4%B8%8E%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90ci%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;从这一讲开始，我们进入本专栏第 3 部分的学习，我将用 8 讲的内容来讲解如何构建强大的敏捷测试基础设施（Testing Infrastructure）。测试基础设施是指支持自动化测试运行、测试开发、测试管理以及与研发环境集成的综合性平台。敏捷测试离不开稳定、高效、准确的基础设施，以满足对于持续测试、持续反馈的需要；同时，持续集成、持续交付和 DevOps 环境必须实现和测试基础设施的无缝集成，才能够满足软件在各种环境中持续验证的需要。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第13讲：测试如何融入CICD环境中？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC13%E8%AE%B2%E6%B5%8B%E8%AF%95%E5%A6%82%E4%BD%95%E8%9E%8D%E5%85%A5cicd%E7%8E%AF%E5%A2%83%E4%B8%AD/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC13%E8%AE%B2%E6%B5%8B%E8%AF%95%E5%A6%82%E4%BD%95%E8%9E%8D%E5%85%A5cicd%E7%8E%AF%E5%A2%83%E4%B8%AD/</guid>
      <description>&lt;p&gt;CI/CD 的工程实践发生在研发阶段，从左到右的快速流动必然离不开从右到左的快速反馈，测试是提供快速反馈的基础，在 CI/CD 的每一个环节都应该伴随着测试活动。测试与 CI/CD 的融合可以从四个方面来考虑：前期开发测试与持续集成的融合，持续测试（狭义的）与 CI/CD 的融合，验收测试与 CI/CD 的融合，产品的部署实践与 CI/CD 的融合。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第14讲：基于DevOp的测试基础设施构成</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC14%E8%AE%B2%E5%9F%BA%E4%BA%8Edevop%E7%9A%84%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E6%9E%84%E6%88%90/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC14%E8%AE%B2%E5%9F%BA%E4%BA%8Edevop%E7%9A%84%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E6%9E%84%E6%88%90/</guid>
      <description>&lt;p&gt;2009 年 6月，在美国 San Jose 第二届 Velocity 大会上 “10+ Deploys Per Day: Dev and Ops Cooperation at Flickr”的这个演讲，成为 DevOps 开始被引用的标志性事件。&lt;/p&gt;&#xA;&lt;p&gt;最初，DevOps 被定义为一组用于促进开发、运维和 QA 部门之间沟通、协作与整合的解决方案，它强调自动化软件交付和基础设施变更的过程，以帮助组织快速、频繁和可靠地发布软件，并提高软件的操作性能和质量保证。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第15讲：虚拟机技术与容器技术的应用</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC15%E8%AE%B2%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E7%9A%84%E5%BA%94%E7%94%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC15%E8%AE%B2%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
      <description>&lt;p&gt;你好，我是敏捷测试专栏讲师朱少民，欢迎进入第 15 讲“虚拟机技术与容器技术的应用”。&lt;/p&gt;&#xA;&lt;p&gt;在前面几讲中，我介绍了 CI/CD、DevOps 中的测试基础设施，测试基础设施的搭建离不开计算资源的支持，测试基础设施越庞大，我们对计算资源的需求就越多。早期的计算资源指的是物理上的主机服务器、网络或存储硬件设备；如今的计算资源可以通过虚拟化技术进行“云化”，即将实体资源（如 CPU、内存、硬盘和网络等）抽象成数字的或逻辑的资源，用户可以用更好的组态方式来使用这些资源，使资源分配、获取与管理更高效。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第16讲：测试四象限与金字塔模型</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC16%E8%AE%B2%E6%B5%8B%E8%AF%95%E5%9B%9B%E8%B1%A1%E9%99%90%E4%B8%8E%E9%87%91%E5%AD%97%E5%A1%94%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC16%E8%AE%B2%E6%B5%8B%E8%AF%95%E5%9B%9B%E8%B1%A1%E9%99%90%E4%B8%8E%E9%87%91%E5%AD%97%E5%A1%94%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;p&gt;当 CI/CD 环境或 DevOps 测试基础设施准备好之后，我们就准备开始自动化测试了。自动化测试一直是测试开发者感兴趣的内容，也是本专栏的重点内容之一。说起自动化测试，先要说清楚从哪里开始比较好、哪些方面更容易见成效，这也是我们经常说的自动化测试策略，明确自动化测试的特点，争取以较低的代价产出更高的收益。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第17讲：如何完成全自动的部署和BVT？（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC17%E8%AE%B2%E5%A6%82%E4%BD%95%E5%AE%8C%E6%88%90%E5%85%A8%E8%87%AA%E5%8A%A8%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8Cbvt%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC17%E8%AE%B2%E5%A6%82%E4%BD%95%E5%AE%8C%E6%88%90%E5%85%A8%E8%87%AA%E5%8A%A8%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8Cbvt%E4%B8%8A/</guid>
      <description>&lt;p&gt;前面已经讲解了 CI/CD、DevOps 的操作过程和工具链，这一讲我重点介绍自动化部署，也会讲解关于 BVT 的具体内容。因为自动化部署内容比较多，所以这一讲会拆分上、下两部分，先介绍持续集成中的部署和 BVT，后介绍 DevOps、Cloud 中的部署和发布。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第17讲：如何完成全自动的部署和BVT？（下）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC17%E8%AE%B2%E5%A6%82%E4%BD%95%E5%AE%8C%E6%88%90%E5%85%A8%E8%87%AA%E5%8A%A8%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8Cbvt%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC17%E8%AE%B2%E5%A6%82%E4%BD%95%E5%AE%8C%E6%88%90%E5%85%A8%E8%87%AA%E5%8A%A8%E7%9A%84%E9%83%A8%E7%BD%B2%E5%92%8Cbvt%E4%B8%8B/</guid>
      <description>&lt;p&gt;在上一讲中，我介绍了 CI 的自动化部署，这一讲则重点介绍如何完成 DevOps 的自动化部署。云化是虚拟化技术的集大成者，现在企业级应用部署的主要特点是：虚拟机和容器技术广泛应用，甚至可以容器化一切；系统从数据中心向公有云或私有云迁移；基础设施即代码日趋成熟。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第18讲：增加自动的静态测试和测试报告生成功能</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC18%E8%AE%B2%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%8A%A8%E7%9A%84%E9%9D%99%E6%80%81%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A%E7%94%9F%E6%88%90%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC18%E8%AE%B2%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%8A%A8%E7%9A%84%E9%9D%99%E6%80%81%E6%B5%8B%E8%AF%95%E5%92%8C%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A%E7%94%9F%E6%88%90%E5%8A%9F%E8%83%BD/</guid>
      <description>&lt;p&gt;在之前的讲解里，我曾经提到过，静态测试的对象包括需求、设计和代码，也提到过代码审查的两种方式：一种是人工评审，另一种是基于工具的自动静态测试。在 CI 环境中我们可以通过 GitHub 的 Pull Request 特性来进行代码的人工评审。这一讲，我将带你学习自动的静态测试方法、工具和静态测试报告，以及自动化测试报告的生成。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第19讲：搭建敏捷自动化测试框架及其案例分析</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC19%E8%AE%B2%E6%90%AD%E5%BB%BA%E6%95%8F%E6%8D%B7%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%85%B6%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC19%E8%AE%B2%E6%90%AD%E5%BB%BA%E6%95%8F%E6%8D%B7%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E5%8F%8A%E5%85%B6%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;在前几讲已经介绍了虚拟化技术、CI/CD 环境、DevOps 下的基础设施及自动部署、BVT 等，而上一讲介绍了静态测试技术和工具，这一讲将侧重介绍动态测试工具，从而形成一个完整的测试基础设施的体系。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第20讲：没有ATDD，就没有用户故事的可测试性</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC20%E8%AE%B2%E6%B2%A1%E6%9C%89atdd%E5%B0%B1%E6%B2%A1%E6%9C%89%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E7%9A%84%E5%8F%AF%E6%B5%8B%E8%AF%95%E6%80%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC20%E8%AE%B2%E6%B2%A1%E6%9C%89atdd%E5%B0%B1%E6%B2%A1%E6%9C%89%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E7%9A%84%E5%8F%AF%E6%B5%8B%E8%AF%95%E6%80%A7/</guid>
      <description>&lt;p&gt;从这一讲开始，我们就进入了第 4 部分的学习：测试左移更体现敏捷测试的价值。因为敏捷更提倡团队对质量负责、预防缺陷胜于发现缺陷，这两点就意味着我们要构建出高质量的产品，把质量构建推向源头——需求，把测试活动左移到需求阶段，持续地对需求和设计进行评审、及时发现需求和设计的问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第21讲：产品价值分析：商业画布、影响地图、故事地图</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC21%E8%AE%B2%E4%BA%A7%E5%93%81%E4%BB%B7%E5%80%BC%E5%88%86%E6%9E%90%E5%95%86%E4%B8%9A%E7%94%BB%E5%B8%83%E5%BD%B1%E5%93%8D%E5%9C%B0%E5%9B%BE%E6%95%85%E4%BA%8B%E5%9C%B0%E5%9B%BE/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC21%E8%AE%B2%E4%BA%A7%E5%93%81%E4%BB%B7%E5%80%BC%E5%88%86%E6%9E%90%E5%95%86%E4%B8%9A%E7%94%BB%E5%B8%83%E5%BD%B1%E5%93%8D%E5%9C%B0%E5%9B%BE%E6%95%85%E4%BA%8B%E5%9C%B0%E5%9B%BE/</guid>
      <description>&lt;p&gt;上一讲介绍了用户故事的可测试性及 ATDD。这一讲为什么不继续讲测试，而要讲解产品价值分析呢？首要原因是由于我们提倡业务驱动测试，希望从业务的角度出发来进行测试分析与设计，然后再回归业务。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第22讲：从Epic到UerStory完成需求评审</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC22%E8%AE%B2%E4%BB%8Eepic%E5%88%B0uerstory%E5%AE%8C%E6%88%90%E9%9C%80%E6%B1%82%E8%AF%84%E5%AE%A1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC22%E8%AE%B2%E4%BB%8Eepic%E5%88%B0uerstory%E5%AE%8C%E6%88%90%E9%9C%80%E6%B1%82%E8%AF%84%E5%AE%A1/</guid>
      <description>&lt;p&gt;传统的需求评审是通过评审会议，产品、开发、测试等各路人马坐在一起来完成市场需求文档（Market Requirements Document，MRD）或产品需求文档（Product Requirements Document，PRD）的评审，以发现如需求缺失、无意义的需求、模棱两可的描述等问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第23讲：不可忽视的设计评审</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC23%E8%AE%B2%E4%B8%8D%E5%8F%AF%E5%BF%BD%E8%A7%86%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%AF%84%E5%AE%A1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC23%E8%AE%B2%E4%B8%8D%E5%8F%AF%E5%BF%BD%E8%A7%86%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%AF%84%E5%AE%A1/</guid>
      <description>&lt;p&gt;设计评审的价值和重要性&lt;/p&gt;&#xA;&lt;p&gt;与需求评审不同，传统开发模式下测试人员很少参加设计评审，总觉得和测试的关系不大，其实，这样的认知是错误的。&lt;/p&gt;&#xA;&lt;p&gt;记得在一次会议演讲之后，一位与会的测试同学提问：如何进行可靠性测试？&lt;/p&gt;</description>
    </item>
    <item>
      <title>第24讲：BDD及其自动化实践</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC24%E8%AE%B2bdd%E5%8F%8A%E5%85%B6%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC24%E8%AE%B2bdd%E5%8F%8A%E5%85%B6%E8%87%AA%E5%8A%A8%E5%8C%96%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;p&gt;在第 20 讲，我介绍了 TDD、UTDD 和 ATDD，主要讨论了需求的可测试性，通过测试先行的敏捷开发理念，比如先建立用户故事的验收标准，来提升需求的质量。今天在 ATDD 基础上，再往前进一步，介绍 BDD——行为驱动开发。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第25讲：再往前一步，让实例化需求（RBE）落地</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC25%E8%AE%B2%E5%86%8D%E5%BE%80%E5%89%8D%E4%B8%80%E6%AD%A5%E8%AE%A9%E5%AE%9E%E4%BE%8B%E5%8C%96%E9%9C%80%E6%B1%82rbe%E8%90%BD%E5%9C%B0/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC25%E8%AE%B2%E5%86%8D%E5%BE%80%E5%89%8D%E4%B8%80%E6%AD%A5%E8%AE%A9%E5%AE%9E%E4%BE%8B%E5%8C%96%E9%9C%80%E6%B1%82rbe%E8%90%BD%E5%9C%B0/</guid>
      <description>&lt;p&gt;什么是实例化需求&lt;/p&gt;&#xA;&lt;p&gt;ATDD 是 TDD 思想在需求层的实现，而 BDD 可以看做是 ATDD 的实例化，将验收标准归为场景，并用 GWT 格式描述。而实例化需求则是在 BDD 的基础上再往前进了一步，真正让需求成为测试，因为 BDD 中的场景还不能执行，必须转化为具体的实例才能执行。实例化需求真正将需求和测试合二为一，彻底践行“测试驱动开发”的理念。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第26讲：基于上下文驱动思维的测试分析</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC26%E8%AE%B2%E5%9F%BA%E4%BA%8E%E4%B8%8A%E4%B8%8B%E6%96%87%E9%A9%B1%E5%8A%A8%E6%80%9D%E7%BB%B4%E7%9A%84%E6%B5%8B%E8%AF%95%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC26%E8%AE%B2%E5%9F%BA%E4%BA%8E%E4%B8%8A%E4%B8%8B%E6%96%87%E9%A9%B1%E5%8A%A8%E6%80%9D%E7%BB%B4%E7%9A%84%E6%B5%8B%E8%AF%95%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;从这一讲开始，我们就进入了第 5 部分内容的学习：敏捷测试分析与计划。在这一部分你将学到：测试需求分析、测试风险的识别、测试策略及测试计划的制定。今天先从基于上下文驱动的测试分析开始。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第27讲：如何培养自己的业务与用户体验分析技能？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC27%E8%AE%B2%E5%A6%82%E4%BD%95%E5%9F%B9%E5%85%BB%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%9A%E5%8A%A1%E4%B8%8E%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC27%E8%AE%B2%E5%A6%82%E4%BD%95%E5%9F%B9%E5%85%BB%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%9A%E5%8A%A1%E4%B8%8E%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C%E5%88%86%E6%9E%90%E6%8A%80%E8%83%BD/</guid>
      <description>&lt;p&gt;上一讲我们讨论了“基于上下文驱动思维的测试分析”，因为在敏捷开发模式下，我们强调持续交付、持续测试，整个测试过程是非常动态的，所以必须关注上下文的变化，基于上下文来制定测试策略和方法。上下文驱动思维是在第 3 讲中所讨论的主要敏捷测试思维方式之一，而其中另一种主要思维方式——“用户思维”，不仅和质量因素相关，而且还会更有助于测试需求分析和用户体验分析，我们有必要在这一讲先讨论一下“用户思维”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第28讲：敏捷测试风险在哪里？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC28%E8%AE%B2%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E9%A3%8E%E9%99%A9%E5%9C%A8%E5%93%AA%E9%87%8C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC28%E8%AE%B2%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E9%A3%8E%E9%99%A9%E5%9C%A8%E5%93%AA%E9%87%8C/</guid>
      <description>&lt;p&gt;测试分析的一个重要任务是识别测试风险并在测试策略中做出应对。通常情况下，不论采用什么方法和技术，测试都是不彻底的：&lt;/p&gt;&#xA;&lt;p&gt;测试是不可能穷尽的，测试不能做到业务、数据、代码路径等全方位的百分之百覆盖；&lt;/p&gt;</description>
    </item>
    <item>
      <title>第29讲：启发式测试策略与测试策略制定</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC29%E8%AE%B2%E5%90%AF%E5%8F%91%E5%BC%8F%E6%B5%8B%E8%AF%95%E7%AD%96%E7%95%A5%E4%B8%8E%E6%B5%8B%E8%AF%95%E7%AD%96%E7%95%A5%E5%88%B6%E5%AE%9A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC29%E8%AE%B2%E5%90%AF%E5%8F%91%E5%BC%8F%E6%B5%8B%E8%AF%95%E7%AD%96%E7%95%A5%E4%B8%8E%E6%B5%8B%E8%AF%95%E7%AD%96%E7%95%A5%E5%88%B6%E5%AE%9A/</guid>
      <description>&lt;p&gt;上一讲我们讨论了“敏捷测试风险在哪里”，有风险就有应对措施，在这些措施中蕴含着测试策略，甚至有比较激进的说法，没有测试风险，就不需要测试策略。但实际情况是，风险总是存在的，上一讲已讨论过，而且在敏捷开发模式中测试风险更严重，所以更需要测试策略。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第30讲：代码依赖性分析与精准测试</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC30%E8%AE%B2%E4%BB%A3%E7%A0%81%E4%BE%9D%E8%B5%96%E6%80%A7%E5%88%86%E6%9E%90%E4%B8%8E%E7%B2%BE%E5%87%86%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC30%E8%AE%B2%E4%BB%A3%E7%A0%81%E4%BE%9D%E8%B5%96%E6%80%A7%E5%88%86%E6%9E%90%E4%B8%8E%E7%B2%BE%E5%87%86%E6%B5%8B%E8%AF%95/</guid>
      <description>&lt;p&gt;你好，我是敏捷测试专栏讲师朱少民，欢迎进入第 30 讲“代码依赖性分析与精准测试”。&lt;/p&gt;&#xA;&lt;p&gt;在传统的开发模式中，产品上市前都会做一次完整的回归测试，在这个阶段项目会严格控制代码的改动，担心会引入重大缺陷，这种全量的回归测试的工作量就会很大，而且其中有一部分测试用例的执行是没必要的、是一种浪费，这是因为被测试的这部分没有受到影响。如果在测试过程中发现了不得不修复的缺陷，那么在代码修改后就只能凭测试人员的经验选取有限数量的测试用例来做 针对性的回归测试，选取很少的测试用例，风险比较大，而且缺少科学依据。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第31讲：敏捷测试要不要计划？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC31%E8%AE%B2%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E8%A6%81%E4%B8%8D%E8%A6%81%E8%AE%A1%E5%88%92/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC31%E8%AE%B2%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E8%A6%81%E4%B8%8D%E8%A6%81%E8%AE%A1%E5%88%92/</guid>
      <description>&lt;p&gt;“凡事预则立，不预则废”，没有事先的计划和准备，就不能获得项目的胜利，这充分体现了计划的重要性，没有计划是万万不可的，即使是在敏捷开发模式下，虽然在敏捷宣言中有这样一句“拥抱变化 胜于 遵循计划”。但是，敏捷宣言末尾有一行小字，特别提醒我们右边项也是有价值的，即“遵循计划”是有价值的，只是“拥抱变化”更具有价值。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第32讲：探索式测试与基于脚本的测试</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC32%E8%AE%B2%E6%8E%A2%E7%B4%A2%E5%BC%8F%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%9F%BA%E4%BA%8E%E8%84%9A%E6%9C%AC%E7%9A%84%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC32%E8%AE%B2%E6%8E%A2%E7%B4%A2%E5%BC%8F%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%9F%BA%E4%BA%8E%E8%84%9A%E6%9C%AC%E7%9A%84%E6%B5%8B%E8%AF%95/</guid>
      <description>&lt;p&gt;上一讲谈到了如何完成“测试计划”相关的内容，对于第五模块“敏捷测试分析与计划”，是否意味着可以告一段落了？按照正常逻辑，这一模块可以结束了，但是考虑到探索式测试的应用，增加了三讲内容。你可能会问，探索式测试是指“设计、执行和学习同时进行”这种测试方式，只影响测试的设计和执行，与计划没有什么关系，计划该这么做还是这么做，为何要在这个模块来讨论探索式测试呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>第33讲：如何采用SBTM：从Miion到Seion？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC33%E8%AE%B2%E5%A6%82%E4%BD%95%E9%87%87%E7%94%A8sbtm%E4%BB%8Emiion%E5%88%B0seion/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC33%E8%AE%B2%E5%A6%82%E4%BD%95%E9%87%87%E7%94%A8sbtm%E4%BB%8Emiion%E5%88%B0seion/</guid>
      <description>&lt;p&gt;SBTM（Session-Based Test Management，基于会话的测试管理）是在探索式测试的基础上提出来的，虽然已经有 20 年的历史了，但目前国内测试人员真正了解它的并不多。这也是值得大家思考的一个问题：软件测试不缺好的技术和方法，但为什么没有把它们应用到工作中去呢？是你所在的团队对测试的要求低，还是你自己就认为测试不需要技术和方法呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>第34讲：一个应用SBTM的真实案例</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC34%E8%AE%B2%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8sbtm%E7%9A%84%E7%9C%9F%E5%AE%9E%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC34%E8%AE%B2%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8sbtm%E7%9A%84%E7%9C%9F%E5%AE%9E%E6%A1%88%E4%BE%8B/</guid>
      <description>&lt;p&gt;上一讲讲解了什么是 SBTM，以及如何根据测试计划分解测试任务和测试会话。今天这一讲我将介绍一个应用 SBTM 进行任务分解并汇报结果的案例。为了方便你的理解，案例中的被测系统还是采用移动端的在线教育 App。先介绍一下案例背景。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第35讲：正确理解DoD与敏捷中的验收测试</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC35%E8%AE%B2%E6%AD%A3%E7%A1%AE%E7%90%86%E8%A7%A3dod%E4%B8%8E%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E9%AA%8C%E6%94%B6%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC35%E8%AE%B2%E6%AD%A3%E7%A1%AE%E7%90%86%E8%A7%A3dod%E4%B8%8E%E6%95%8F%E6%8D%B7%E4%B8%AD%E7%9A%84%E9%AA%8C%E6%94%B6%E6%B5%8B%E8%AF%95/</guid>
      <description>&lt;p&gt;从这一讲开始就进入了第 6 部分的学习“敏捷测试设计与执行”，测试设计指的是测试用例的设计、自动化测试脚本的设计，以及探索式测试中的设计。在敏捷测试里，测试计划仍然是测试设计的基础，测试设计仍然是测试执行的基础。计划和设计都必须在测试的执行中得到贯彻体现，并且几乎总是需要在执行过程中根据上下文不断地调整和完善。因此，测试执行是和计划、设计循环交替进行的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第36讲：如何将用户故事转化为测试用例？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC36%E8%AE%B2%E5%A6%82%E4%BD%95%E5%B0%86%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E8%BD%AC%E5%8C%96%E4%B8%BA%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC36%E8%AE%B2%E5%A6%82%E4%BD%95%E5%B0%86%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E8%BD%AC%E5%8C%96%E4%B8%BA%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B/</guid>
      <description>&lt;p&gt;你好，我是敏捷测试专栏讲师朱少民，欢迎进入第 36 讲“如何将用户故事转化为测试用例？”&lt;/p&gt;&#xA;&lt;p&gt;背景&lt;/p&gt;&#xA;&lt;p&gt;单纯的用户故事是不具有可测试性的，如果让用户故事具有可测试性，这就需要增加验收标准。例如在第 20 讲，我们就举了一个例子说明：&lt;/p&gt;</description>
    </item>
    <item>
      <title>第37讲：敏捷开发中基于场景事件流的用例设计</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC37%E8%AE%B2%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E4%B8%AD%E5%9F%BA%E4%BA%8E%E5%9C%BA%E6%99%AF%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%9A%84%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC37%E8%AE%B2%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E4%B8%AD%E5%9F%BA%E4%BA%8E%E5%9C%BA%E6%99%AF%E4%BA%8B%E4%BB%B6%E6%B5%81%E7%9A%84%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;p&gt;前面介绍了从用户故事、场景到测试用例的分解或设计的过程，它主要为单个用户故事的测试设计服务的，但这是不够的，还需要在业务层次、针对整个系统进行端到端的测试，才能更好地确保软件系统的质量。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第38讲：探索式测试的设计与执行：扮演角色、场景挖掘</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC38%E8%AE%B2%E6%8E%A2%E7%B4%A2%E5%BC%8F%E6%B5%8B%E8%AF%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%89%A7%E8%A1%8C%E6%89%AE%E6%BC%94%E8%A7%92%E8%89%B2%E5%9C%BA%E6%99%AF%E6%8C%96%E6%8E%98/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC38%E8%AE%B2%E6%8E%A2%E7%B4%A2%E5%BC%8F%E6%B5%8B%E8%AF%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%89%A7%E8%A1%8C%E6%89%AE%E6%BC%94%E8%A7%92%E8%89%B2%E5%9C%BA%E6%99%AF%E6%8C%96%E6%8E%98/</guid>
      <description>&lt;p&gt;对于探索式测试，前面已经讲过其概念，以及采用 SBTM 对探索式测试进行有效的管理。这一讲将讲解如何针对 SBTM 中特定的一个 Session 执行探索式测试，重点是在探索式测试中如何运用批判性思维，并借助用户角色扮演、场景挖掘等进行更深入的测试，发现更多的缺陷。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第39讲：测试自动化设计模式：一步到位</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC39%E8%AE%B2%E6%B5%8B%E8%AF%95%E8%87%AA%E5%8A%A8%E5%8C%96%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E6%AD%A5%E5%88%B0%E4%BD%8D/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC39%E8%AE%B2%E6%B5%8B%E8%AF%95%E8%87%AA%E5%8A%A8%E5%8C%96%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80%E6%AD%A5%E5%88%B0%E4%BD%8D/</guid>
      <description>&lt;p&gt;第 37 讲在讨论基于事件流图的测试设计时，就已经触及基于模型的软件测试（Model-Based Testing，MBT），事件流图、有限状态机等可以被看做是测试模型，基于模型的自动化测试才是更为彻底的自动化测试。因为基于模型的自动化测试可以自动生成测试用例或对应的自动化测试脚本，然后自动执行相应的测试脚本，而日常我们讨论的自动化测试，只能算半自动化测试——测试执行自动化，而脚本的开发还是手工的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第40讲：脚本开发、调试与维护的常用技巧</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC40%E8%AE%B2%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E4%B8%8E%E7%BB%B4%E6%8A%A4%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC40%E8%AE%B2%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E4%B8%8E%E7%BB%B4%E6%8A%A4%E7%9A%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;p&gt;这一讲的内容是针对 Web UI 的自动化测试。测试金字塔告诉我们，要尽量多做单元测试和 API 层的自动化测试，而 UI 层的要少做，因为脚本开发和维护的成本会很高，执行起来还不稳定。但从业务的角度来说，UI 层的自动化测试最接近用户对产品的操作，因此也最接近用户需求。另外，在拿不到 API 的情况下，UI 自动化测试也不得不做。所以，还是有必要讲一讲 UI 层测试的脚本开发和维护。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第41讲：质效合一：自动化测试和手工测试的完美融合</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC41%E8%AE%B2%E8%B4%A8%E6%95%88%E5%90%88%E4%B8%80%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%92%8C%E6%89%8B%E5%B7%A5%E6%B5%8B%E8%AF%95%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%9E%8D%E5%90%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC41%E8%AE%B2%E8%B4%A8%E6%95%88%E5%90%88%E4%B8%80%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%92%8C%E6%89%8B%E5%B7%A5%E6%B5%8B%E8%AF%95%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%9E%8D%E5%90%88/</guid>
      <description>&lt;p&gt;今天主要讲敏捷测试在执行阶段的策略。在前面讲了很多测试自动化的内容，也讲了不少探索式测试。不知道你想过没有，在产品的一次迭代开发中，什么样的测试适合自动化，什么样的测试适合手工测试？自动化测试和手工测试怎么结合才能达到更好的质量和效率？据我了解，不少团队对这些问题是缺乏思考和明确指导的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第42讲：单元测试必须TDD吗？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC42%E8%AE%B2%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%BF%85%E9%A1%BBtdd%E5%90%97/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC42%E8%AE%B2%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%BF%85%E9%A1%BBtdd%E5%90%97/</guid>
      <description>&lt;p&gt;单元测试必须 TDD（等同于第 20 讲中提到的 UTDD）吗？这个问题的答案很简单，回答“No”就可以。通过本专栏前面课程的学习，咱们已经被“上下文驱动思维”武装起来了，认定不会只存在一种情况，而是根据上下文（比如所处的行业、产品特点、团队能力等）有不同的选择，即使在众多互联网公司中间，其单元测试也是参差不齐。所以，你既可以按 TDD 方式进行，也可以按普通的方式进行，即先写一个产品代码类，然后再写一个测试类。但有一点需要强调，无论是哪一种方式，单元测试都要尽早做、持续做，编程和单元测试相当于一对双胞胎，形影不离。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第43讲：优先实现面向接口的测试</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC43%E8%AE%B2%E4%BC%98%E5%85%88%E5%AE%9E%E7%8E%B0%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC43%E8%AE%B2%E4%BC%98%E5%85%88%E5%AE%9E%E7%8E%B0%E9%9D%A2%E5%90%91%E6%8E%A5%E5%8F%A3%E7%9A%84%E6%B5%8B%E8%AF%95/</guid>
      <description>&lt;p&gt;从原理上来说，接口测试是模拟客户端向服务器端发送请求，然后检查能否获得正确的返回信息。这里说的面向接口的自动化测试和 API 测试是一回事。在第 16 讲中介绍测试金字塔模型的时候已经说过，相对上层 UI 测试，自动化测试更适合进行 API 测试。这里的 API 测试是指面向接口的系统功能测试。接口测试越来越重要，不仅因为接口测试与 UI 测试相比性价比更高，还因为目前软件系统的开发模式和架构风格带来的必然需求。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第44讲：大数据&#43;AI系统的测试设计与执行</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC44%E8%AE%B2%E5%A4%A7%E6%95%B0%E6%8D%AE&#43;ai%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC44%E8%AE%B2%E5%A4%A7%E6%95%B0%E6%8D%AE&#43;ai%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%B5%8B%E8%AF%95%E8%AE%BE%E8%AE%A1%E4%B8%8E%E6%89%A7%E8%A1%8C/</guid>
      <description>&lt;p&gt;人工智能时代的到来，也意味着大量的人工智能系统需要得到测试和验证。而人工智能的测试最早可以追溯到上个世纪五十年代，即 1950 年阿兰·图灵（A.M.Turing）在那篇名垂青史的论文《计算机器与智能》（Computing Machinery and Intelligence）中第一次提出了“图灵测试”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第45讲：测试右移：在线测试与日志分析</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC45%E8%AE%B2%E6%B5%8B%E8%AF%95%E5%8F%B3%E7%A7%BB%E5%9C%A8%E7%BA%BF%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC45%E8%AE%B2%E6%B5%8B%E8%AF%95%E5%8F%B3%E7%A7%BB%E5%9C%A8%E7%BA%BF%E6%B5%8B%E8%AF%95%E4%B8%8E%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;到这里，你已经学习了敏捷测试专栏的 6 个模块，从敏捷测试的概念和文化、测试基础设施、再到敏捷测试的分析与计划、设计与执行，并且也讲解了测试左移。从这一讲将进入第 7 个模块，也是本专栏的最后一个模块——敏捷测试的收尾与改进。收尾只是针对即将交付的这一版软件来说，实际上，只要有新的版本发布，就会进入新的测试周期。在收尾过程中，既需要关注上线版本的运行情况、及时修复严重缺陷，又要收集和分析用户反馈和线上数据，为下一个版本的缺陷预防做准备。同时，团队也需要在实践中不断地反思和总结，持续地改进测试过程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第46讲：如何分析测试结果和评估测试工作的质量？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC46%E8%AE%B2%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%E5%92%8C%E8%AF%84%E4%BC%B0%E6%B5%8B%E8%AF%95%E5%B7%A5%E4%BD%9C%E7%9A%84%E8%B4%A8%E9%87%8F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC46%E8%AE%B2%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C%E5%92%8C%E8%AF%84%E4%BC%B0%E6%B5%8B%E8%AF%95%E5%B7%A5%E4%BD%9C%E7%9A%84%E8%B4%A8%E9%87%8F/</guid>
      <description>&lt;p&gt;软件测试中每一项测试活动都会产生测试结果，通过测试结果来评估产品的质量体现了测试的目的和价值。而通过测试结果评估测试工作本身的质量也非常重要，能让我们及时发现测试中存在的问题，并及时改正，是测试工作进行持续改进的基础。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第47讲：如何获得良好的（测试与质量）可追溯性、可视化</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC47%E8%AE%B2%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E8%89%AF%E5%A5%BD%E7%9A%84%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B4%A8%E9%87%8F%E5%8F%AF%E8%BF%BD%E6%BA%AF%E6%80%A7%E5%8F%AF%E8%A7%86%E5%8C%96/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC47%E8%AE%B2%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E8%89%AF%E5%A5%BD%E7%9A%84%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%B4%A8%E9%87%8F%E5%8F%AF%E8%BF%BD%E6%BA%AF%E6%80%A7%E5%8F%AF%E8%A7%86%E5%8C%96/</guid>
      <description>&lt;p&gt;上一讲介绍了如何度量和评估测试工作的质量，以及对测试过程进行量化管理。实现量化管理不仅要有度量体系，要实现度量指标的可视化才够完美，对于产品质量的评估也是如此，这就离不开一个数据统计、分析的呈现平台。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第48讲：敏捷测试优秀实践</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC48%E8%AE%B2%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E4%BC%98%E7%A7%80%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC48%E8%AE%B2%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E4%BC%98%E7%A7%80%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;p&gt;谈起敏捷测试的优秀实践，其实我们已经在第 7 讲中介绍过一家优秀公司——Etsy 公司的实践。该公司建立了“代码即艺匠（Code as Craft）”这样优秀的工程师文化和质量内建文化，开发阶段的测试由开发人员负责，但 Etsy 拥有独立的测试（QA）团队，主要负责下列一些工作：&lt;/p&gt;</description>
    </item>
    <item>
      <title>第49讲：敏捷过程的反思与持续改进</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC49%E8%AE%B2%E6%95%8F%E6%8D%B7%E8%BF%87%E7%A8%8B%E7%9A%84%E5%8F%8D%E6%80%9D%E4%B8%8E%E6%8C%81%E7%BB%AD%E6%94%B9%E8%BF%9B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E7%AC%AC49%E8%AE%B2%E6%95%8F%E6%8D%B7%E8%BF%87%E7%A8%8B%E7%9A%84%E5%8F%8D%E6%80%9D%E4%B8%8E%E6%8C%81%E7%BB%AD%E6%94%B9%E8%BF%9B/</guid>
      <description>&lt;p&gt;专栏内容回顾与总结&lt;/p&gt;&#xA;&lt;p&gt;时间过得很快，陪伴大家快四个月了，终于来到最后一讲的内容了。这一讲将回顾一下过去 48 讲主要聊了些什么？如果把 48 讲的标题全都过一遍，估计这一讲的时间就差不多用完了，所以咱们就只能快速回顾一下七大模块。&lt;/p&gt;</description>
    </item>
    <item>
      <title>加餐1：搭建基于K8和Docker的Jenkin可伸缩持续集成系统</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E5%8A%A0%E9%A4%901%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ek8%E5%92%8Cdocker%E7%9A%84jenkin%E5%8F%AF%E4%BC%B8%E7%BC%A9%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E5%8A%A0%E9%A4%901%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8Ek8%E5%92%8Cdocker%E7%9A%84jenkin%E5%8F%AF%E4%BC%B8%E7%BC%A9%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%B3%BB%E7%BB%9F/</guid>
      <description>&lt;p&gt;根据前面用户的反馈，这里补充一个完整的动手实践的案例——搭建“基于 K8s 和 Docker 的 Jenkins 可伸缩持续集成系统”，让模块 3 所介绍的内容落地。&lt;/p&gt;&#xA;&lt;p&gt;这部分内容比较多且非常具体，包括 4 大部分：&lt;/p&gt;</description>
    </item>
    <item>
      <title>加餐2：敏捷测试分析与计划的案例</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E5%8A%A0%E9%A4%902%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%A1%E5%88%92%E7%9A%84%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E5%8A%A0%E9%A4%902%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%95%E5%88%86%E6%9E%90%E4%B8%8E%E8%AE%A1%E5%88%92%E7%9A%84%E6%A1%88%E4%BE%8B/</guid>
      <description>&lt;p&gt;这一讲是第 5 部分“敏捷测试分析与计划”加餐的内容，利用前面学到的测试分析和测试计划的知识，从信息收集到测试分析、测试策略制定，一步步制定出测试计划。案例仍然沿用了在线教育 App 第二次迭代的软件开发项目，也就是 App 2.0，项目背景请参考第 34 讲中的介绍。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开篇词：重剑无锋、大道至简</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E5%BC%80%E7%AF%87%E8%AF%8D%E9%87%8D%E5%89%91%E6%97%A0%E9%94%8B%E5%A4%A7%E9%81%93%E8%87%B3%E7%AE%80/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E9%AB%98%E6%95%88%E6%95%8F%E6%8D%B7%E6%B5%8B%E8%AF%9549%E8%AE%B2/%E5%BC%80%E7%AF%87%E8%AF%8D%E9%87%8D%E5%89%91%E6%97%A0%E9%94%8B%E5%A4%A7%E9%81%93%E8%87%B3%E7%AE%80/</guid>
      <description>&lt;p&gt;你好，我是朱少民，欢迎来到我的“敏捷测试”专栏。2000 年至今，我已在测试行业摸爬滚打 20 年，因为热衷分享应该有不少同行认识我。可能是因为读过我写的《全程软件测试》《软件测试方法和技术》等十多本测试图书，也可能是因为看过我写的文章，还可能是听过我的公开课或者技术大会演讲。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
