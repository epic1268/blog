<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go语言核心36讲 on Docs</title>
    <link>https://politcloud.org/tags/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/</link>
    <description>Recent content in Go语言核心36讲 on Docs</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 10 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://politcloud.org/tags/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01__工作区和GOPATH</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/01__%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8Cgopath/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/01__%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8Cgopath/</guid>
      <description>&lt;h3 id=&#34;go-语言代码较多建议配合文章收听音频&#34;&gt;【Go 语言代码较多，建议配合文章收听音频。】&lt;/h3&gt;&#xA;&lt;p&gt;你好，我是郝林。从今天开始，我将和你一起梳理 Go 语言的整个知识体系。&lt;/p&gt;&#xA;&lt;p&gt;在过去的几年里，我与广大爱好者一起见证了 Go 语言的崛起。&lt;/p&gt;</description>
    </item>
    <item>
      <title>02__命令源码文件</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/02__%E5%91%BD%E4%BB%A4%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/02__%E5%91%BD%E4%BB%A4%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;我们已经知道，环境变量 GOPATH 指向的是一个或多个工作区，每个工作区中都会有以代码包为基本组织形式的源码文件。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;这里的源码文件又分为三种，即：命令源码文件、库源码文件和测试源码文件，它们都有着不同的用途和编写规则。（&lt;/strong&gt; 我在&lt;a href=&#34;./13540_utm%5Fsource=weibo&amp;amp;utm%5Fmedium=xuxiaoping&amp;amp;utm%5Fcampaign=promotion&amp;amp;utm%5Fcontent=columns.md&#34;&gt;“预习篇”的基础知识图&lt;/a&gt;介绍过这三种文件的基本情况。）&lt;/p&gt;</description>
    </item>
    <item>
      <title>03__库源码文件</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/03__%E5%BA%93%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/03__%E5%BA%93%E6%BA%90%E7%A0%81%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;你已经使用过 Go 语言编写了小命令（或者说微型程序）吗？&lt;/p&gt;&#xA;&lt;p&gt;当你在编写“Hello, world”的时候，一个源码文件就足够了，虽然这种小玩意儿没什么用，最多能给你一点点莫名的成就感。如果你对这一点点并不满足，别着急，跟着学，我肯定你也可以写出很厉害的程序。&lt;/p&gt;</description>
    </item>
    <item>
      <title>04__程序实体的那些事儿（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/04__%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BD%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/04__%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BD%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF%E4%B8%8A/</guid>
      <description>&lt;p&gt;我已经为你打开了 Go 语言编程之门，并向你展示了“程序从初建到拆分，再到模块化”的基本演化路径。&lt;/p&gt;&#xA;&lt;p&gt;一个编程老手让程序完成基本演化，可能也就需要几十分钟甚至十几分钟，因为他们一开始就会把车开到模块化编程的道路上。我相信，等你真正理解了这个过程之后，也会驾轻就熟的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>05__程序实体的那些事儿（中）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/05__%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BD%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF%E4%B8%AD/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/05__%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BD%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF%E4%B8%AD/</guid>
      <description>&lt;p&gt;在前文中，我解释过代码块的含义。Go 语言的代码块是一层套一层的，就像大圆套小圆。&lt;/p&gt;&#xA;&lt;p&gt;一个代码块可以有若干个子代码块；但对于每个代码块，最多只会有一个直接包含它的代码块（后者可以简称为前者的外层代码块）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>06__程序实体的那些事儿_（下）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/06__%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BD%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF_%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/06__%E7%A8%8B%E5%BA%8F%E5%AE%9E%E4%BD%93%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF_%E4%B8%8B/</guid>
      <description>&lt;p&gt;在上一篇文章，我们一直都在围绕着可重名变量，也就是不同代码块中的重名变量，进行了讨论。&lt;/p&gt;&#xA;&lt;p&gt;还记得吗？最后我强调，如果可重名变量的类型不同，那么就需要引起我们的特别关注了，它们之间可能会存在“屏蔽”的现象。&lt;/p&gt;</description>
    </item>
    <item>
      <title>07__数组和切片</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/07__%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/07__%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</guid>
      <description>&lt;p&gt;从本篇文章开始，我们正式进入了模块 2 的学习。在这之前，我们已经聊了很多的 Go 语言和编程方面的基础知识，相信你已经对 Go 语言的开发环境配置、常用源码文件写法，以及程序实体（尤其是变量）及其相关的各种概念和编程技巧（比如类型推断、变量重声明、可重名变量、类型断言、类型转换、别名类型和潜在类型等）都有了一定的理解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>08__container包中的那些容器</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/08__container%E5%8C%85%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/08__container%E5%8C%85%E4%B8%AD%E7%9A%84%E9%82%A3%E4%BA%9B%E5%AE%B9%E5%99%A8/</guid>
      <description>&lt;p&gt;我们在上次讨论了数组和切片，当我们提到数组的时候，往往会想起链表。那么 Go 语言的链表是什么样的呢？&lt;/p&gt;&#xA;&lt;p&gt;Go 语言的链表实现在标准库的&lt;code&gt;container/list&lt;/code&gt;代码包中。这个代码包中有两个公开的程序实体——&lt;code&gt;List&lt;/code&gt;和&lt;code&gt;Element&lt;/code&gt;，List 实现了一个双向链表（以下简称链表），而 Element 则代表了链表中元素的结构。&lt;/p&gt;</description>
    </item>
    <item>
      <title>09__字典的操作和约束</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/09__%E5%AD%97%E5%85%B8%E7%9A%84%E6%93%8D%E4%BD%9C%E5%92%8C%E7%BA%A6%E6%9D%9F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/09__%E5%AD%97%E5%85%B8%E7%9A%84%E6%93%8D%E4%BD%9C%E5%92%8C%E7%BA%A6%E6%9D%9F/</guid>
      <description>&lt;p&gt;至今为止，我们讲过的集合类的高级数据类型都属于针对单一元素的容器。&lt;/p&gt;&#xA;&lt;p&gt;它们或用连续存储，或用互存指针的方式收纳元素，这里的每个元素都代表了一个从属某一类型的独立值。&lt;/p&gt;</description>
    </item>
    <item>
      <title>09-Go语言核心36讲</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/09-go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/09-go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/</guid>
      <description></description>
    </item>
    <item>
      <title>10__通道的基本操作</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/10__%E9%80%9A%E9%81%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/10__%E9%80%9A%E9%81%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>&lt;p&gt;作为 Go 语言最有特色的数据类型，通道（channel）完全可以与 goroutine（也可称为 go 程）并驾齐驱，共同代表 Go 语言独有的并发编程模式和编程哲学。&lt;/p&gt;</description>
    </item>
    <item>
      <title>11__通道的高级玩法</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/11__%E9%80%9A%E9%81%93%E7%9A%84%E9%AB%98%E7%BA%A7%E7%8E%A9%E6%B3%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/11__%E9%80%9A%E9%81%93%E7%9A%84%E9%AB%98%E7%BA%A7%E7%8E%A9%E6%B3%95/</guid>
      <description>&lt;p&gt;我们已经讨论过了通道的基本操作以及背后的规则。今天，我再来讲讲通道的高级玩法。&lt;/p&gt;&#xA;&lt;p&gt;首先来说说单向通道。我们在说“通道”的时候指的都是双向通道，即：既可以发也可以收的通道。&lt;/p&gt;</description>
    </item>
    <item>
      <title>12__使用函数的正确姿势</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/12__%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/12__%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</guid>
      <description>&lt;p&gt;在前几期文章中，我们分了几次，把 Go 语言自身提供的，所有集合类的数据类型都讲了一遍，额外还讲了标准库的&lt;code&gt;container&lt;/code&gt;包中的几个类型。&lt;/p&gt;&#xA;&lt;p&gt;在几乎所有主流的编程语言中，集合类的数据类型都是最常用和最重要的。我希望通过这几次的讨论，能让你对它们的运用更上一层楼。&lt;/p&gt;</description>
    </item>
    <item>
      <title>13__结构体及其方法的使用法门</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/13__%E7%BB%93%E6%9E%84%E4%BD%93%E5%8F%8A%E5%85%B6%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E6%B3%95%E9%97%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/13__%E7%BB%93%E6%9E%84%E4%BD%93%E5%8F%8A%E5%85%B6%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E6%B3%95%E9%97%A8/</guid>
      <description>&lt;p&gt;我们都知道，结构体类型表示的是实实在在的数据结构。一个结构体类型可以包含若干个字段，每个字段通常都需要有确切的名字和类型。&lt;/p&gt;&#xA;&lt;h2 id=&#34;前导内容结构体类型基础知识&#34;&gt;前导内容：结构体类型基础知识&lt;/h2&gt;&#xA;&lt;p&gt;当然了，结构体类型也可以不包含任何字段，这样并不是没有意义的，因为我们还可以为类型关联上一些方法，这里你可以把方法看做是函数的特殊版本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>14__接口类型的合理运用</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/14__%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%90%88%E7%90%86%E8%BF%90%E7%94%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/14__%E6%8E%A5%E5%8F%A3%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%90%88%E7%90%86%E8%BF%90%E7%94%A8/</guid>
      <description>&lt;p&gt;你好，我是郝林，今天我们来聊聊接口的相关内容。&lt;/p&gt;&#xA;&lt;h2 id=&#34;前导内容正确使用接口的基础知识&#34;&gt;前导内容：正确使用接口的基础知识&lt;/h2&gt;&#xA;&lt;p&gt;在 Go 语言的语境中，当我们在谈论“接口”的时候，一定指的是接口类型。因为接口类型与其他数据类型不同，它是没法被实例化的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>15__关于指针的有限操作</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/15__%E5%85%B3%E4%BA%8E%E6%8C%87%E9%92%88%E7%9A%84%E6%9C%89%E9%99%90%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/15__%E5%85%B3%E4%BA%8E%E6%8C%87%E9%92%88%E7%9A%84%E6%9C%89%E9%99%90%E6%93%8D%E4%BD%9C/</guid>
      <description>&lt;p&gt;在前面的文章中，我们已经提到过很多次“指针”了，你应该已经比较熟悉了。不过，我们那时大多指的是指针类型及其对应的指针值，今天我们讲的则是更为深入的内容。&lt;/p&gt;</description>
    </item>
    <item>
      <title>16__go语句及其执行规则（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/16__go%E8%AF%AD%E5%8F%A5%E5%8F%8A%E5%85%B6%E6%89%A7%E8%A1%8C%E8%A7%84%E5%88%99%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/16__go%E8%AF%AD%E5%8F%A5%E5%8F%8A%E5%85%B6%E6%89%A7%E8%A1%8C%E8%A7%84%E5%88%99%E4%B8%8A/</guid>
      <description>&lt;p&gt;你很棒，已经学完了关于 Go 语言数据类型的全部内容。我相信你不但已经知晓了怎样高效地使用 Go 语言内建的那些数据类型，还明白了怎样正确地创造自己的数据类型。&lt;/p&gt;</description>
    </item>
    <item>
      <title>17__go语句及其执行规则（下）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/17__go%E8%AF%AD%E5%8F%A5%E5%8F%8A%E5%85%B6%E6%89%A7%E8%A1%8C%E8%A7%84%E5%88%99%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/17__go%E8%AF%AD%E5%8F%A5%E5%8F%8A%E5%85%B6%E6%89%A7%E8%A1%8C%E8%A7%84%E5%88%99%E4%B8%8B/</guid>
      <description>&lt;p&gt;你好，我是郝林，今天我们继续分享 go 语句执行规则的内容。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我们讲到了 goroutine 在操作系统的并发编程体系，以及在 Go 语言并发编程模型中的地位和作用等一系列内容，今天我们继续来聊一聊这个话题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>18__if语句、for语句和switch语句</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/18__if%E8%AF%AD%E5%8F%A5for%E8%AF%AD%E5%8F%A5%E5%92%8Cswitch%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/18__if%E8%AF%AD%E5%8F%A5for%E8%AF%AD%E5%8F%A5%E5%92%8Cswitch%E8%AF%AD%E5%8F%A5/</guid>
      <description>&lt;p&gt;在上两篇文章中，我主要为你讲解了与&lt;code&gt;go&lt;/code&gt;语句、goroutine 和 Go 语言调度器有关的知识和技法。&lt;/p&gt;&#xA;&lt;p&gt;内容很多，你不用急于完全消化，可以在编程实践过程中逐步理解和感悟，争取夯实它们。&lt;/p&gt;</description>
    </item>
    <item>
      <title>19__错误处理（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/19__%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/19__%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E4%B8%8A/</guid>
      <description>&lt;p&gt;提到 Go 语言中的错误处理，我们其实已经在前面接触过几次了。比如，我们声明过&lt;code&gt;error&lt;/code&gt;类型的变量&lt;code&gt;err&lt;/code&gt;，也调用过&lt;code&gt;errors&lt;/code&gt;包中的&lt;code&gt;New&lt;/code&gt;函数。今天，我会用这篇文章为你梳理 Go 语言错误处理的相关知识，同时提出一些关键问题并与你一起探讨。&lt;/p&gt;</description>
    </item>
    <item>
      <title>20__错误处理_（下）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/20__%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86_%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/20__%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86_%E4%B8%8B/</guid>
      <description>&lt;p&gt;你好，我是郝林，今天我们继续来分享错误处理。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我们主要讨论的是从使用者的角度看“怎样处理好错误值”。那么，接下来我们需要关注的，就是站在建造者的角度，去关心“怎样才能给予使用者恰当的错误值”的问题了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>21__panic函数、recover函数以及defer语句_（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/21__panic%E5%87%BD%E6%95%B0recover%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8Adefer%E8%AF%AD%E5%8F%A5_%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/21__panic%E5%87%BD%E6%95%B0recover%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8Adefer%E8%AF%AD%E5%8F%A5_%E4%B8%8A/</guid>
      <description>&lt;p&gt;我在上两篇文章中，详细地讲述了 Go 语言中的错误处理，并从两个视角为你总结了错误类型、错误值的处理技巧和设计方式。&lt;/p&gt;&#xA;&lt;p&gt;在本篇，我要给你展示 Go 语言的另外一种错误处理方式。不过，严格来说，它处理的不是错误，而是异常，并且是一种在我们意料之外的程序异常。&lt;/p&gt;</description>
    </item>
    <item>
      <title>22__panic函数、recover函数以及defer语句（下）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/22__panic%E5%87%BD%E6%95%B0recover%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8Adefer%E8%AF%AD%E5%8F%A5%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/22__panic%E5%87%BD%E6%95%B0recover%E5%87%BD%E6%95%B0%E4%BB%A5%E5%8F%8Adefer%E8%AF%AD%E5%8F%A5%E4%B8%8B/</guid>
      <description>&lt;p&gt;你好，我是郝林，今天我们继续来聊聊 panic 函数、recover 函数以及 defer 语句的内容。&lt;/p&gt;&#xA;&lt;p&gt;我在前一篇文章提到过这样一个说法，panic 之中可以包含一个值，用于简要解释引发此 panic 的原因。&lt;/p&gt;</description>
    </item>
    <item>
      <title>23__测试的基本规则和流程_（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/23__%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99%E5%92%8C%E6%B5%81%E7%A8%8B_%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/23__%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99%E5%92%8C%E6%B5%81%E7%A8%8B_%E4%B8%8A/</guid>
      <description>&lt;p&gt;你好，我是郝林，今天我分享的主题是：测试的基本规则和流程（上）。&lt;/p&gt;&#xA;&lt;p&gt;你很棒，已经学完了本专栏最大的一个模块！这涉及了 Go 语言的所有内建数据类型，以及非常有特色的那些流程和语句。&lt;/p&gt;</description>
    </item>
    <item>
      <title>24__测试的基本规则和流程（下）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/24__%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99%E5%92%8C%E6%B5%81%E7%A8%8B%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/24__%E6%B5%8B%E8%AF%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%A7%84%E5%88%99%E5%92%8C%E6%B5%81%E7%A8%8B%E4%B8%8B/</guid>
      <description>&lt;p&gt;你好，我是郝林。今天我分享的主题是测试的基本规则和流程的（下）篇。&lt;/p&gt;&#xA;&lt;p&gt;Go 语言是一门很重视程序测试的编程语言，所以在上一篇中，我与你再三强调了程序测试的重要性，同时，也介绍了关于&lt;code&gt;go test&lt;/code&gt;命令的基本规则和主要流程的内容。今天我们继续分享测试的基本规则和流程。本篇代码和指令较多，你可以点击文章查看原文。&lt;/p&gt;</description>
    </item>
    <item>
      <title>25__更多的测试手法</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/25__%E6%9B%B4%E5%A4%9A%E7%9A%84%E6%B5%8B%E8%AF%95%E6%89%8B%E6%B3%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/25__%E6%9B%B4%E5%A4%9A%E7%9A%84%E6%B5%8B%E8%AF%95%E6%89%8B%E6%B3%95/</guid>
      <description>&lt;p&gt;在前面的文章中，我们一起学习了 Go 程序测试的基础知识和基本测试手法。这主要包括了 Go 程序测试的基本规则和主要流程、&lt;code&gt;testing.T&lt;/code&gt;类型和&lt;code&gt;testing.B&lt;/code&gt;类型的常用方法、&lt;code&gt;go test&lt;/code&gt;命令的基本使用方式、常规测试结果的解读等等。&lt;/p&gt;</description>
    </item>
    <item>
      <title>26__sync.Mutex与sync.RWMutex</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/26__sync.mutex%E4%B8%8Esync.rwmutex/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/26__sync.mutex%E4%B8%8Esync.rwmutex/</guid>
      <description>&lt;p&gt;我在前面用 20 多篇文章，为你详细地剖析了 Go 语言本身的一些东西，这包括了基础概念、重要语法、高级数据类型、特色语句、测试方案等等。&lt;/p&gt;&#xA;&lt;p&gt;这些都是 Go 语言为我们提供的最核心的技术。我想，这已经足够让你对 Go 语言有一个比较深刻的理解了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>27__条件变量sync.Cond_（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/27__%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8Fsync.cond_%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/27__%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8Fsync.cond_%E4%B8%8A/</guid>
      <description>&lt;p&gt;在上篇文章中，我们主要说的是互斥锁，今天我和你来聊一聊条件变量（conditional variable）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;前导内容条件变量与互斥锁&#34;&gt;前导内容：条件变量与互斥锁&lt;/h2&gt;&#xA;&lt;p&gt;我们常常会把条件变量这个同步工具拿来与互斥锁一起讨论。实际上，条件变量是基于互斥锁的，它必须有互斥锁的支撑才能发挥作用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>28__条件变量sync.Cond_（下）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/28__%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8Fsync.cond_%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/28__%E6%9D%A1%E4%BB%B6%E5%8F%98%E9%87%8Fsync.cond_%E4%B8%8B/</guid>
      <description>&lt;p&gt;你好，我是郝林，今天我继续分享条件变量 sync.Cond 的内容。我们紧接着上一篇的内容进行知识扩展。&lt;/p&gt;&#xA;&lt;h2 id=&#34;问题-1条件变量的wait方法做了什么&#34;&gt;问题 1：条件变量的&lt;code&gt;Wait&lt;/code&gt;方法做了什么？&lt;/h2&gt;&#xA;&lt;p&gt;在了解了条件变量的使用方式之后，你可能会有这么几个疑问。&lt;/p&gt;</description>
    </item>
    <item>
      <title>29__原子操作（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/29__%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/29__%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E4%B8%8A/</guid>
      <description>&lt;p&gt;我们在前两篇文章中讨论了互斥锁、读写锁以及基于它们的条件变量，先来总结一下。&lt;/p&gt;&#xA;&lt;p&gt;互斥锁是一个很有用的同步工具，它可以保证每一时刻进入临界区的 goroutine 只有一个。读写锁对共享资源的写操作和读操作则区别看待，并消除了读操作之间的互斥。&lt;/p&gt;</description>
    </item>
    <item>
      <title>30__原子操作（下）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/30__%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/30__%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C%E4%B8%8B/</guid>
      <description>&lt;p&gt;你好，我是郝林，今天我们继续分享原子操作的内容。&lt;/p&gt;&#xA;&lt;p&gt;我们接着上一篇文章的内容继续聊，上一篇我们提到了，&lt;code&gt;sync/atomic&lt;/code&gt;包中的函数可以做的原子操作有：加法（add）、比较并交换（compare and swap，简称 CAS）、加载（load）、存储（store）和交换（swap）。并且以此衍生出了两个问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>31__sync.WaitGroup和sync.Once</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/31__sync.waitgroup%E5%92%8Csync.once/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/31__sync.waitgroup%E5%92%8Csync.once/</guid>
      <description>&lt;p&gt;我们在前几次讲的互斥锁、条件变量和原子操作都是最基本重要的同步工具。在 Go 语言中，除了通道之外，它们也算是最为常用的并发安全工具了。&lt;/p&gt;&#xA;&lt;p&gt;说到通道，不知道你想过没有，之前在一些场合下里，我们使用通道的方式看起来都似乎有些蹩脚。&lt;/p&gt;</description>
    </item>
    <item>
      <title>32__context.Context类型</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/32__context.context%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/32__context.context%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;p&gt;我们在上篇文章中讲到了&lt;code&gt;sync.WaitGroup&lt;/code&gt;类型：一个可以帮我们实现一对多 goroutine 协作流程的同步工具。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;在使用&lt;code&gt;WaitGroup&lt;/code&gt;值的时候，我们最好用“先统一&lt;code&gt;Add&lt;/code&gt;，再并发&lt;code&gt;Done&lt;/code&gt;，最后&lt;code&gt;Wait&lt;/code&gt;”的标准模式来构建协作流程。&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>33__临时对象池sync.Pool</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/33__%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1%E6%B1%A0sync.pool/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/33__%E4%B8%B4%E6%97%B6%E5%AF%B9%E8%B1%A1%E6%B1%A0sync.pool/</guid>
      <description>&lt;p&gt;到目前为止，我们已经一起学习了 Go 语言标准库中最重要的那几个同步工具，这包括非常经典的互斥锁、读写锁、条件变量和原子操作，以及 Go 语言特有的几个同步工具：&lt;/p&gt;</description>
    </item>
    <item>
      <title>34__并发安全字典sync.Map_（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/34__%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E5%AD%97%E5%85%B8sync.map_%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/34__%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E5%AD%97%E5%85%B8sync.map_%E4%B8%8A/</guid>
      <description>&lt;p&gt;在前面，我几乎已经把 Go 语言自带的同步工具全盘托出了。你是否已经听懂了会用了呢？&lt;/p&gt;&#xA;&lt;p&gt;无论怎样，我都希望你能够多多练习、多多使用。它们和 Go 语言独有的并发编程方式并不冲突，相反，配合起来使用，绝对能达到“一加一大于二”的效果。&lt;/p&gt;</description>
    </item>
    <item>
      <title>35__并发安全字典sync.Map_(下)</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/35__%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E5%AD%97%E5%85%B8sync.map_%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/35__%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E5%AD%97%E5%85%B8sync.map_%E4%B8%8B/</guid>
      <description>&lt;p&gt;你好，我是郝林，今天我们继续来分享并发安全字典 sync.Map 的内容。&lt;/p&gt;&#xA;&lt;p&gt;我们在上一篇文章中谈到了，由于并发安全字典提供的方法涉及的键和值的类型都是&lt;code&gt;interface{}&lt;/code&gt;，所以我们在调用这些方法的时候，往往还需要对键和值的实际类型进行检查。&lt;/p&gt;</description>
    </item>
    <item>
      <title>36__unicode与字符编码</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/36__unicode%E4%B8%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/36__unicode%E4%B8%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</guid>
      <description>&lt;p&gt;到目前为止，我们已经一起陆陆续续地学完了 Go 语言中那些最重要也最有特色的概念、语法和编程方式。我对于它们非常喜爱，简直可以用如数家珍来形容了。&lt;/p&gt;&#xA;&lt;p&gt;在开始今天的内容之前，我先来做一个简单的总结。&lt;/p&gt;</description>
    </item>
    <item>
      <title>37__strings包与字符串操作</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/37__strings%E5%8C%85%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/37__strings%E5%8C%85%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</guid>
      <description>&lt;p&gt;在上一篇文章中，我介绍了 Go 语言与 Unicode 编码规范、UTF-8 编码格式的渊源及运用。&lt;/p&gt;&#xA;&lt;p&gt;Go 语言不但拥有可以独立代表 Unicode 字符的类型&lt;code&gt;rune&lt;/code&gt;，而且还有可以对字符串值进行 Unicode 字符拆分的&lt;code&gt;for&lt;/code&gt;语句。&lt;/p&gt;</description>
    </item>
    <item>
      <title>38__bytes包与字节串操作（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/38__bytes%E5%8C%85%E4%B8%8E%E5%AD%97%E8%8A%82%E4%B8%B2%E6%93%8D%E4%BD%9C%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/38__bytes%E5%8C%85%E4%B8%8E%E5%AD%97%E8%8A%82%E4%B8%B2%E6%93%8D%E4%BD%9C%E4%B8%8A/</guid>
      <description>&lt;p&gt;我相信，经过上一次的学习，你已经对&lt;code&gt;strings.Builder&lt;/code&gt;和&lt;code&gt;strings.Reader&lt;/code&gt;这两个类型足够熟悉了。&lt;/p&gt;&#xA;&lt;p&gt;我上次还建议你去自行查阅&lt;code&gt;strings&lt;/code&gt;代码包中的其他程序实体。如果你认真去看了，那么肯定会对我们今天要讨论的&lt;code&gt;bytes&lt;/code&gt;代码包，有种似曾相识的感觉。&lt;/p&gt;</description>
    </item>
    <item>
      <title>39__bytes包与字节串操作（下）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/39__bytes%E5%8C%85%E4%B8%8E%E5%AD%97%E8%8A%82%E4%B8%B2%E6%93%8D%E4%BD%9C%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/39__bytes%E5%8C%85%E4%B8%8E%E5%AD%97%E8%8A%82%E4%B8%B2%E6%93%8D%E4%BD%9C%E4%B8%8B/</guid>
      <description>&lt;p&gt;你好，我是郝林，今天我们继续分享 bytes 包与字节串操作的相关内容。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我们分享了&lt;code&gt;bytes.Buffer&lt;/code&gt;中已读计数的大致功用，并围绕着这个问题做了解析，下面我们来进行相关的知识扩展。&lt;/p&gt;</description>
    </item>
    <item>
      <title>40__io包中的接口和工具_（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/40__io%E5%8C%85%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7_%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/40__io%E5%8C%85%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7_%E4%B8%8A/</guid>
      <description>&lt;p&gt;我们在前几篇文章中，主要讨论了&lt;code&gt;strings.Builder&lt;/code&gt;、&lt;code&gt;strings.Reader&lt;/code&gt;和&lt;code&gt;bytes.Buffer&lt;/code&gt;这三个数据类型。&lt;/p&gt;&#xA;&lt;h2 id=&#34;知识回顾&#34;&gt;知识回顾&lt;/h2&gt;&#xA;&lt;p&gt;还记得吗？当时我还问过你“它们都实现了哪些接口”。在我们继续讲解&lt;code&gt;io&lt;/code&gt;包中的接口和工具之前，我先来解答一下这个问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>41__io包中的接口和工具_（下）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/41__io%E5%8C%85%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7_%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/41__io%E5%8C%85%E4%B8%AD%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%B7%A5%E5%85%B7_%E4%B8%8B/</guid>
      <description>&lt;p&gt;上一篇文章中，我主要讲到了&lt;code&gt;io.Reader&lt;/code&gt;的扩展接口和实现类型。当然，&lt;code&gt;io&lt;/code&gt;代码包中的核心接口不止&lt;code&gt;io.Reader&lt;/code&gt;一个。&lt;/p&gt;&#xA;&lt;p&gt;我们基于它引出的一条主线，只是&lt;code&gt;io&lt;/code&gt;包类型体系中的一部分。我们很有必要再从另一个角度去探索一下，以求对&lt;code&gt;io&lt;/code&gt;包有更加全面的了解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>42__bufio包中的数据类型_（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/42__bufio%E5%8C%85%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B_%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/42__bufio%E5%8C%85%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B_%E4%B8%8A/</guid>
      <description>&lt;p&gt;今天，我们来讲另一个与 I/O 操作强相关的代码包&lt;code&gt;bufio&lt;/code&gt;。&lt;code&gt;bufio&lt;/code&gt;是“buffered I/O”的缩写。顾名思义，这个代码包中的程序实体实现的 I/O 操作都内置了缓冲区。&lt;/p&gt;</description>
    </item>
    <item>
      <title>43__bufio包中的数据类型（下）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/43__bufio%E5%8C%85%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/43__bufio%E5%8C%85%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B8%8B/</guid>
      <description>&lt;p&gt;你好，我是郝林，我今天继续分享 bufio 包中的数据类型。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我提到了&lt;code&gt;bufio&lt;/code&gt;包中的数据类型主要有&lt;code&gt;Reader&lt;/code&gt;、&lt;code&gt;Scanner&lt;/code&gt;、&lt;code&gt;Writer&lt;/code&gt;和&lt;code&gt;ReadWriter&lt;/code&gt;。并着重讲到了&lt;code&gt;bufio.Reader&lt;/code&gt;类型与&lt;code&gt;bufio.Writer&lt;/code&gt;类型，今天，我们继续专注&lt;code&gt;bufio.Reader&lt;/code&gt;的内容来进行学习。&lt;/p&gt;</description>
    </item>
    <item>
      <title>44__使用os包中的API_（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/44__%E4%BD%BF%E7%94%A8os%E5%8C%85%E4%B8%AD%E7%9A%84api_%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/44__%E4%BD%BF%E7%94%A8os%E5%8C%85%E4%B8%AD%E7%9A%84api_%E4%B8%8A/</guid>
      <description>&lt;p&gt;我们今天要讲的是&lt;code&gt;os&lt;/code&gt;代码包中的 API。这个代码包可以让我们拥有操控计算机操作系统的能力。&lt;/p&gt;&#xA;&lt;h2 id=&#34;前导内容os-包中的-api&#34;&gt;前导内容：os 包中的 API&lt;/h2&gt;&#xA;&lt;p&gt;这个代码包提供的都是平台不相关的 API。那么说，什么叫平台不相关的 API 呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>45__使用os包中的API_（下）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/45__%E4%BD%BF%E7%94%A8os%E5%8C%85%E4%B8%AD%E7%9A%84api_%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/45__%E4%BD%BF%E7%94%A8os%E5%8C%85%E4%B8%AD%E7%9A%84api_%E4%B8%8B/</guid>
      <description>&lt;p&gt;你好，我是郝林，今天我们继续分享使用 os 包中的 API。&lt;/p&gt;&#xA;&lt;p&gt;我们在上一篇文章中。从“&lt;code&gt;os.File&lt;/code&gt;类型都实现了哪些&lt;code&gt;io&lt;/code&gt;包中的接口”这一问题出发，介绍了一系列的相关内容。今天我们继续围绕这一知识点进行扩展。&lt;/p&gt;</description>
    </item>
    <item>
      <title>46__访问网络服务</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/46__%E8%AE%BF%E9%97%AE%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/46__%E8%AE%BF%E9%97%AE%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/</guid>
      <description>&lt;p&gt;你真的很棒，已经跟着我一起从最开始初识 Go 语言，一步一步地走到了这里。&lt;/p&gt;&#xA;&lt;p&gt;在这之前的几十篇文章中，我向你一点一点地介绍了很多 Go 语言的核心知识，以及一些最最基础的标准库代码包。我想，你已经完全有能力独立去做一些事情了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>47__基于HTTP协议的网络服务</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/47__%E5%9F%BA%E4%BA%8Ehttp%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/47__%E5%9F%BA%E4%BA%8Ehttp%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1/</guid>
      <description>&lt;p&gt;我们在上一篇文章中简单地讨论了网络编程和 socket，并由此提及了 Go 语言标准库中的&lt;code&gt;syscall&lt;/code&gt;代码包和&lt;code&gt;net&lt;/code&gt;代码包。&lt;/p&gt;&#xA;&lt;p&gt;我还重点讲述了&lt;code&gt;net.Dial&lt;/code&gt;函数和&lt;code&gt;syscall.Socket&lt;/code&gt;函数的参数含义。前者间接地调用了后者，所以正确理解后者，会对用好前者有很大裨益。&lt;/p&gt;</description>
    </item>
    <item>
      <title>48__程序性能分析基础（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/48__%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/48__%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E4%B8%8A/</guid>
      <description>&lt;p&gt;作为拾遗的部分，今天我们来讲讲与 Go 程序性能分析有关的基础知识。&lt;/p&gt;&#xA;&lt;p&gt;Go 语言为程序开发者们提供了丰富的性能分析 API，和非常好用的标准工具。这些 API 主要存在于：&lt;/p&gt;</description>
    </item>
    <item>
      <title>49__程序性能分析基础（下）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/49__%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/49__%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%9F%BA%E7%A1%80%E4%B8%8B/</guid>
      <description>&lt;p&gt;你好，我是郝林，今天我们继续分享程序性能分析基础的内容。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我们围绕着“怎样让程序对 CPU 概要信息进行采样”这一问题进行了探讨，今天，我们再来一起看看它的拓展问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>50__学习专栏的正确姿势</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/50__%E5%AD%A6%E4%B9%A0%E4%B8%93%E6%A0%8F%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/50__%E5%AD%A6%E4%B9%A0%E4%B8%93%E6%A0%8F%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</guid>
      <description>&lt;p&gt;你好，我是郝林，今天我分享的主题是，学习专栏的正确姿势。&lt;/p&gt;&#xA;&lt;p&gt;到了这里，专栏的全部内容已经都推送到你的面前了。如果你已经同步学习完了，那么我要给你点一个大大的赞！&lt;/p&gt;</description>
    </item>
    <item>
      <title>开篇词__跟着学，你也能成为Go语言高手</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/%E5%BC%80%E7%AF%87%E8%AF%8D__%E8%B7%9F%E7%9D%80%E5%AD%A6%E4%BD%A0%E4%B9%9F%E8%83%BD%E6%88%90%E4%B8%BAgo%E8%AF%AD%E8%A8%80%E9%AB%98%E6%89%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/%E5%BC%80%E7%AF%87%E8%AF%8D__%E8%B7%9F%E7%9D%80%E5%AD%A6%E4%BD%A0%E4%B9%9F%E8%83%BD%E6%88%90%E4%B8%BAgo%E8%AF%AD%E8%A8%80%E9%AB%98%E6%89%8B/</guid>
      <description>&lt;p&gt;你好，我是郝林。今天想跟你聊聊我和 Go 语言的故事。&lt;/p&gt;&#xA;&lt;p&gt;Go 语言是由 Google 出品的一门通用型计算机编程语言。作为在近年来快速崛起的编程语言，Go 已经成功跻身主流编程语言的行列。&lt;/p&gt;</description>
    </item>
    <item>
      <title>尾声__愿你披荆斩棘，所向无敌</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/%E5%B0%BE%E5%A3%B0__%E6%84%BF%E4%BD%A0%E6%8A%AB%E8%8D%86%E6%96%A9%E6%A3%98%E6%89%80%E5%90%91%E6%97%A0%E6%95%8C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/%E5%B0%BE%E5%A3%B0__%E6%84%BF%E4%BD%A0%E6%8A%AB%E8%8D%86%E6%96%A9%E6%A3%98%E6%89%80%E5%90%91%E6%97%A0%E6%95%8C/</guid>
      <description>&lt;p&gt;你好，我是郝林。&lt;/p&gt;&#xA;&lt;p&gt;专栏到这里，就要结束了。&lt;/p&gt;&#xA;&lt;p&gt;差不多在半年以前（2018 年的第二个季度），极客时间的总编辑郭蕾找到我，说想让我写一个关于 Go 语言的技术专栏。&lt;/p&gt;</description>
    </item>
    <item>
      <title>新年彩蛋__完整版思考题答案</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/%E6%96%B0%E5%B9%B4%E5%BD%A9%E8%9B%8B__%E5%AE%8C%E6%95%B4%E7%89%88%E6%80%9D%E8%80%83%E9%A2%98%E7%AD%94%E6%A1%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/%E6%96%B0%E5%B9%B4%E5%BD%A9%E8%9B%8B__%E5%AE%8C%E6%95%B4%E7%89%88%E6%80%9D%E8%80%83%E9%A2%98%E7%AD%94%E6%A1%88/</guid>
      <description>&lt;p&gt;你好，我是郝林。&lt;/p&gt;&#xA;&lt;p&gt;在 2019 年的春节来临之际，我恰好也更新完了专栏所有的配图和思考题答案。希望这些可以帮助到你，在新的一年中，祝你新年快乐，Go 语言学习之路更加顺利。&lt;/p&gt;</description>
    </item>
    <item>
      <title>预习篇__写给0基础入门的Go语言学习者</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/%E9%A2%84%E4%B9%A0%E7%AF%87__%E5%86%99%E7%BB%990%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%9A%84go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%80%85/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/go%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%8336%E8%AE%B2/%E9%A2%84%E4%B9%A0%E7%AF%87__%E5%86%99%E7%BB%990%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%E7%9A%84go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E8%80%85/</guid>
      <description>&lt;p&gt;你好，我是郝林，今天我分享的内容是：0 基础的你，如何开始入门学习 Go 语言。&lt;/p&gt;&#xA;&lt;h2 id=&#34;1-你需要遵循怎样的学习路径来学习-go-语言&#34;&gt;1. 你需要遵循怎样的学习路径来学习 Go 语言？&lt;/h2&gt;&#xA;&lt;p&gt;我们发现，订阅本专栏的同学们都在非常积极的学习和讨论，这让我们非常欣慰，并且和你一样干劲十足。不过，我在留言中发现，大家的基础好像都不太一样，大致可以分为这么几类。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
