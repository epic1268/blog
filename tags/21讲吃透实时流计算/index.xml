<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>21讲吃透实时流计算 on Docs</title>
    <link>https://politcloud.org/tags/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/</link>
    <description>Recent content in 21讲吃透实时流计算 on Docs</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 10 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://politcloud.org/tags/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01实时流计算的通用架构</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/01%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97%E7%9A%84%E9%80%9A%E7%94%A8%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/01%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97%E7%9A%84%E9%80%9A%E7%94%A8%E6%9E%B6%E6%9E%84/</guid>
      <description>&lt;p&gt;为什么把本课时作为第一课时呢？因为通过本课时，你将构建起对流计算技术和系统的整体认识，这样既可以为后面的课时打下基础，又可以对设计和开发实时流计算应用有所启发。&lt;/p&gt;</description>
    </item>
    <item>
      <title>02异步和高并发：为什么NIO是异步和高并发编程的基础？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/02%E5%BC%82%E6%AD%A5%E5%92%8C%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B8%BA%E4%BB%80%E4%B9%88nio%E6%98%AF%E5%BC%82%E6%AD%A5%E5%92%8C%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/02%E5%BC%82%E6%AD%A5%E5%92%8C%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B8%BA%E4%BB%80%E4%B9%88nio%E6%98%AF%E5%BC%82%E6%AD%A5%E5%92%8C%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E5%9F%BA%E7%A1%80/</guid>
      <description>&lt;p&gt;为什么在讲流计算之前，要先讲异步和高并发的问题呢？&lt;/p&gt;&#xA;&lt;p&gt;其一，是因为“流”本质是异步的，可以说“流计算”也是一种形式的异步编程。&lt;/p&gt;&#xA;&lt;p&gt;其二，是因为对于一个流计算系统而言，其起点一定是数据采集，没数据就什么事情都做不了，而数据采集通常就会涉及 IO 问题，如何设计一个高性能的 IO 密集型应用，异步和并发编程既是过不去的坎，也是我们掌握高性能 Java 编程的基础。&lt;/p&gt;</description>
    </item>
    <item>
      <title>03反向压力：如何避免异步系统中的OOM问题？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/03%E5%8F%8D%E5%90%91%E5%8E%8B%E5%8A%9B%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%BC%82%E6%AD%A5%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84oom%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/03%E5%8F%8D%E5%90%91%E5%8E%8B%E5%8A%9B%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%BC%82%E6%AD%A5%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84oom%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;在第 02 课时，我们使用了 Netty 并配合 Java 8 中的 CompletableFuture 类，构建了一个完全异步执行的数据采集服务器。经过这种改造，CPU 和 IO 的使用效率被充分发挥出来，显著提高了服务器在高并发场景下的性能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>04流与异步：为什么说掌握流计算先要理解异步编程？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/04%E6%B5%81%E4%B8%8E%E5%BC%82%E6%AD%A5%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E6%8E%8C%E6%8F%A1%E6%B5%81%E8%AE%A1%E7%AE%97%E5%85%88%E8%A6%81%E7%90%86%E8%A7%A3%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/04%E6%B5%81%E4%B8%8E%E5%BC%82%E6%AD%A5%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E6%8E%8C%E6%8F%A1%E6%B5%81%E8%AE%A1%E7%AE%97%E5%85%88%E8%A6%81%E7%90%86%E8%A7%A3%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</guid>
      <description>&lt;p&gt;在前面的课时中，我们详细分析了“异步”的工作原理，并且在解决异步系统的 OOM 问题时，使用了“反向压力”的方法。在讨论过程中，我们已经明确地使用到，诸如上游、下游、streams 这样的概念都暗示着我们，“流”和“异步”之间有着某种关联。&lt;/p&gt;</description>
    </item>
    <item>
      <title>05有向无环图（DAG）：如何描述、分解流计算过程？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/05%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BEdag%E5%A6%82%E4%BD%95%E6%8F%8F%E8%BF%B0%E5%88%86%E8%A7%A3%E6%B5%81%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/05%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BEdag%E5%A6%82%E4%BD%95%E6%8F%8F%E8%BF%B0%E5%88%86%E8%A7%A3%E6%B5%81%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;p&gt;今天，我们来聊聊如何用 Java 中最常见的工具类，开发一个简单的流计算框架，你会进一步在源码细节的层面，看到异步和流是如何相通的。另外，虽然这个框架简单，但它是我们从 Java 异步编程，迈入流计算领域的第一步，同时它也反映出了所有流计算框架中，最基础也是最核心的组件，即用于传递流数据的队列，和用于执行流计算的线程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>06CompletableFuture：如何理解Java8新引入的异步编程类？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/06completablefuture%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3java8%E6%96%B0%E5%BC%95%E5%85%A5%E7%9A%84%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%B1%BB/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/06completablefuture%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3java8%E6%96%B0%E5%BC%95%E5%85%A5%E7%9A%84%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%B1%BB/</guid>
      <description>&lt;p&gt;今天，我们一起来看下如何理解 Java8 引入的新异步编程类，CompletableFuture。&lt;/p&gt;&#xA;&lt;p&gt;在第 05 时，我们直接用“线程”和“阻塞队列”构建实现了一个简单的流计算框架。这个框架帮助我们理解了流计算系统的基本实现原理，但是它用起来不是非常方便，需要配合框架写一些业务无关的代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>07死锁：为什么流计算应用突然卡住，不处理数据了</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/07%E6%AD%BB%E9%94%81%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B5%81%E8%AE%A1%E7%AE%97%E5%BA%94%E7%94%A8%E7%AA%81%E7%84%B6%E5%8D%A1%E4%BD%8F%E4%B8%8D%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E4%BA%86/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/07%E6%AD%BB%E9%94%81%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B5%81%E8%AE%A1%E7%AE%97%E5%BA%94%E7%94%A8%E7%AA%81%E7%84%B6%E5%8D%A1%E4%BD%8F%E4%B8%8D%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E4%BA%86/</guid>
      <description>&lt;p&gt;今天，我们来讨论一个非常有趣的话题，也就是流计算系统中的死锁问题。&lt;/p&gt;&#xA;&lt;p&gt;在第 06 课时，我们讲解了 CompletableFuture 这个异步编程类的工作原理，并用它实现了一个流计算应用。为了流计算应用不会出现 OOM 问题，我们还专门使用 BackPressureExecutor 执行器，实现了反向压力的功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>08性能调优：如何优化流计算应用？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/08%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E6%B5%81%E8%AE%A1%E7%AE%97%E5%BA%94%E7%94%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/08%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E6%B5%81%E8%AE%A1%E7%AE%97%E5%BA%94%E7%94%A8/</guid>
      <description>&lt;p&gt;今天，我们来讨论一个非常重要的话题，也就是流计算系统的性能调优问题。&lt;/p&gt;&#xA;&lt;p&gt;到目前为止，我们的课程已经讲解了流计算编程的基础知识，开发了一个简单的流计算框架，并用它展示了如何根据 DAG 来实现一个流计算应用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>09流数据操作：最基本的流计算功能</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/09%E6%B5%81%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%B5%81%E8%AE%A1%E7%AE%97%E5%8A%9F%E8%83%BD/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/09%E6%B5%81%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E6%9C%80%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%B5%81%E8%AE%A1%E7%AE%97%E5%8A%9F%E8%83%BD/</guid>
      <description>&lt;p&gt;在前面的两个模块中，我们讨论的主要是构成流计算系统的基础框架。我们有了这个框架，接下来就应该用它解决实际的实时计算问题。而解决实际问题的过程，落到实处就是实现某种具体算法的过程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>10时间维度聚合计算：如何在长时间窗口上实时计算聚合值？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/10%E6%97%B6%E9%97%B4%E7%BB%B4%E5%BA%A6%E8%81%9A%E5%90%88%E8%AE%A1%E7%AE%97%E5%A6%82%E4%BD%95%E5%9C%A8%E9%95%BF%E6%97%B6%E9%97%B4%E7%AA%97%E5%8F%A3%E4%B8%8A%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97%E8%81%9A%E5%90%88%E5%80%BC/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/10%E6%97%B6%E9%97%B4%E7%BB%B4%E5%BA%A6%E8%81%9A%E5%90%88%E8%AE%A1%E7%AE%97%E5%A6%82%E4%BD%95%E5%9C%A8%E9%95%BF%E6%97%B6%E9%97%B4%E7%AA%97%E5%8F%A3%E4%B8%8A%E5%AE%9E%E6%97%B6%E8%AE%A1%E7%AE%97%E8%81%9A%E5%90%88%E5%80%BC/</guid>
      <description>&lt;p&gt;今天，我们来讨论实时流计算中第二类非常常见的算法，即时间维度聚合值的计算。&lt;/p&gt;&#xA;&lt;p&gt;在09 课中，我们在讨论流数据操作中的聚合 Reduce 操作时，就用到过时间窗口的概念。当时我们的思路是将流数据划分成一个个的滑动窗口，然后在每个窗口内进行聚合计算。这种做法实际上与传统关系型数据库，在实现聚合计算时使用的算法相同。&lt;/p&gt;</description>
    </item>
    <item>
      <title>11关联图谱分析：如何用Lambda架构实现实时的社交网络分析？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/11%E5%85%B3%E8%81%94%E5%9B%BE%E8%B0%B1%E5%88%86%E6%9E%90%E5%A6%82%E4%BD%95%E7%94%A8lambda%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E7%9A%84%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/11%E5%85%B3%E8%81%94%E5%9B%BE%E8%B0%B1%E5%88%86%E6%9E%90%E5%A6%82%E4%BD%95%E7%94%A8lambda%E6%9E%B6%E6%9E%84%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E7%9A%84%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/</guid>
      <description>&lt;p&gt;今天，我们来讨论实时流计算中第三类非常常见的算法，即关联图谱分析。&lt;/p&gt;&#xA;&lt;p&gt;关联图谱是一种在许多业务场景下都需要使用的算法，比如社交关系、金融风控等。相比第 10 课时中时间维度聚合值的计算，实时计算关联图谱会复杂很多。这主要是因为“关联图谱”需要使用“图”这种数据结构来表示实体之间的关联关系。&lt;/p&gt;</description>
    </item>
    <item>
      <title>12事件序列分析：大家都在说的CEP是怎么一回事？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/12%E4%BA%8B%E4%BB%B6%E5%BA%8F%E5%88%97%E5%88%86%E6%9E%90%E5%A4%A7%E5%AE%B6%E9%83%BD%E5%9C%A8%E8%AF%B4%E7%9A%84cep%E6%98%AF%E6%80%8E%E4%B9%88%E4%B8%80%E5%9B%9E%E4%BA%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/12%E4%BA%8B%E4%BB%B6%E5%BA%8F%E5%88%97%E5%88%86%E6%9E%90%E5%A4%A7%E5%AE%B6%E9%83%BD%E5%9C%A8%E8%AF%B4%E7%9A%84cep%E6%98%AF%E6%80%8E%E4%B9%88%E4%B8%80%E5%9B%9E%E4%BA%8B/</guid>
      <description>&lt;p&gt;在前面两个课时中，我分别讲解了“时间维度聚合值”计算和“关联图谱分析”的方法。这两者分别是对流数据，在“时间”维度和“空间”维度进行的聚合分析。但其实，除了这两种聚合分析以外，针对流数据我们还会做另外一种形式的聚合分析，也就是，对流数据中数据和数据之间的关联关系进行聚合分析。这里，我将这种聚合分析，称之为“事件序列分析”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>13模型学习和预测：如何检查流数据异常？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/13%E6%A8%A1%E5%9E%8B%E5%AD%A6%E4%B9%A0%E5%92%8C%E9%A2%84%E6%B5%8B%E5%A6%82%E4%BD%95%E6%A3%80%E6%9F%A5%E6%B5%81%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/13%E6%A8%A1%E5%9E%8B%E5%AD%A6%E4%B9%A0%E5%92%8C%E9%A2%84%E6%B5%8B%E5%A6%82%E4%BD%95%E6%A3%80%E6%9F%A5%E6%B5%81%E6%95%B0%E6%8D%AE%E5%BC%82%E5%B8%B8/</guid>
      <description>&lt;p&gt;今天，我们来讨论流数据中有关模型学习和预测的问题。相比前面讲述的四类算法，模型学习和预测，是一个内容更加丰富，也需要更多数据科学专业知识的领域。它的交叉性非常强，往往在具体实践时，需要工程人员（如 Java 工程师和大数据工程师）和数据人员（如数据科学家和数据分析师）紧密的配合，才能实现一个可以切实落地的方案。&lt;/p&gt;</description>
    </item>
    <item>
      <title>14状态管理：为什么说流计算是有“状态”的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/14%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E6%B5%81%E8%AE%A1%E7%AE%97%E6%98%AF%E6%9C%89%E7%8A%B6%E6%80%81%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/14%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E6%B5%81%E8%AE%A1%E7%AE%97%E6%98%AF%E6%9C%89%E7%8A%B6%E6%80%81%E7%9A%84/</guid>
      <description>&lt;p&gt;如果你曾经访问过 Flink 官网的话，你会看到 Flink 是这么描述它自己的：&lt;/p&gt;&#xA;&lt;p&gt;看到没，第一个词就是Stateful（状态）！而且，正是因为这个 stateful，Flink 才会从众多开源流计算框架中脱颖而出，一下子就成为那个最靓的仔，还引得其他流计算框架开始纷纷效仿。&lt;/p&gt;</description>
    </item>
    <item>
      <title>15扩展为集群：如何实现分布式状态存储？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/15%E6%89%A9%E5%B1%95%E4%B8%BA%E9%9B%86%E7%BE%A4%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E5%AD%98%E5%82%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/15%E6%89%A9%E5%B1%95%E4%B8%BA%E9%9B%86%E7%BE%A4%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E7%8A%B6%E6%80%81%E5%AD%98%E5%82%A8/</guid>
      <description>&lt;p&gt;今天我们需要接着讨论有关流计算中状态管理的另外一个重要问题，也就是将状态存储扩展为集群的问题。&lt;/p&gt;&#xA;&lt;p&gt;为什么说将状态存储扩展为集群会很重要呢？&lt;/p&gt;&#xA;&lt;p&gt;一方面，这是因为当业务量比较大时，单一的机器节点将不足以处理业务数据洪流，必须通过将流计算系统扩展为集群，来提升系统整体处理能力。&lt;/p&gt;</description>
    </item>
    <item>
      <title>16ApacheStorm：最早的开源流计算框架</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/16apachestorm%E6%9C%80%E6%97%A9%E7%9A%84%E5%BC%80%E6%BA%90%E6%B5%81%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/16apachestorm%E6%9C%80%E6%97%A9%E7%9A%84%E5%BC%80%E6%BA%90%E6%B5%81%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;p&gt;从今天开始，我们就正式步入第四个模块的学习了。在这个模块中，我们将根据前面课程中的各种流计算系统核心概念和关键技术点，来对多种开源流计算框架进行分析和验证。从而，实现一种从“形而上谓之道”向“形而下谓之器”的具象，让你在以后面对各种流计算工具和实际业务问题时，能够做到胸有成竹。&lt;/p&gt;</description>
    </item>
    <item>
      <title>17SparkStreaming：从批处理走向流处理</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/17sparkstreaming%E4%BB%8E%E6%89%B9%E5%A4%84%E7%90%86%E8%B5%B0%E5%90%91%E6%B5%81%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/17sparkstreaming%E4%BB%8E%E6%89%B9%E5%A4%84%E7%90%86%E8%B5%B0%E5%90%91%E6%B5%81%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;今天，我们还是从系统架构、流的描述、流的处理、流的状态、消息处理可靠性这五个方面对 Spark Streaming 进行分析和讲解。&lt;/p&gt;&#xA;&lt;p&gt;Spark Streaming&lt;/p&gt;&#xA;&lt;p&gt;说到 Spark Streaming，还得从 Spark 谈起。如今在大数据的世界里，Spark 早已是众所周知的大数据处理和分析框架。Spark 在其诞生之初，由于采用内存计算和 DAG 简化处理流程的原因，使得大数据处理性能得到显著提升，一下子就将传统大数据批处理框架 Hadoop MapReduce 比了下去，取而代之成为大数据领域最耀眼的明星框架。&lt;/p&gt;</description>
    </item>
    <item>
      <title>18ApacheSamza：最简洁的开源流计算框架</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/18apachesamza%E6%9C%80%E7%AE%80%E6%B4%81%E7%9A%84%E5%BC%80%E6%BA%90%E6%B5%81%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/18apachesamza%E6%9C%80%E7%AE%80%E6%B4%81%E7%9A%84%E5%BC%80%E6%BA%90%E6%B5%81%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;p&gt;今天，我们来看第三种开源流计算框架 Apache Samza。我们同样是从系统架构、流的描述、流的处理、流的状态、消息处理可靠性这五个方面来进行分析和讲解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>19ApacheFlink：最惊艳的开源流计算框架</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/19apacheflink%E6%9C%80%E6%83%8A%E8%89%B3%E7%9A%84%E5%BC%80%E6%BA%90%E6%B5%81%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/19apacheflink%E6%9C%80%E6%83%8A%E8%89%B3%E7%9A%84%E5%BC%80%E6%BA%90%E6%B5%81%E8%AE%A1%E7%AE%97%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;p&gt;今天，我们来看第四种开源流计算框架 Apache Flink。我们继续从系统架构、流的描述、流的处理、流的状态、消息处理可靠性这五个方面来进行分析和讲解。&lt;/p&gt;&#xA;&lt;p&gt;Apache Flink&lt;/p&gt;</description>
    </item>
    <item>
      <title>20场景案例：如何用Flink实现实时风控引擎？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/20%E5%9C%BA%E6%99%AF%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E7%94%A8flink%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E9%A3%8E%E6%8E%A7%E5%BC%95%E6%93%8E/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/20%E5%9C%BA%E6%99%AF%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E7%94%A8flink%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E9%A3%8E%E6%8E%A7%E5%BC%95%E6%93%8E/</guid>
      <description>&lt;p&gt;在前面的课时中，我们讨论了实时流计算系统的核心概念和四种流计算框架。从今天起，我们将把其中部分知识点整合起来，以展示两个完整的实时流计算应用案例。从而帮助你更好地理解这些概念以及如何将流计算框架运用到具体业务中。&lt;/p&gt;</description>
    </item>
    <item>
      <title>21场景案例：如何用FlinkSQLCDC实现实时数据同步？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/21%E5%9C%BA%E6%99%AF%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E7%94%A8flinksqlcdc%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/21%E5%9C%BA%E6%99%AF%E6%A1%88%E4%BE%8B%E5%A6%82%E4%BD%95%E7%94%A8flinksqlcdc%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/</guid>
      <description>&lt;p&gt;今天我们来看第二个案例，也就是用 Flink SQL CDC 实现实时数据同步。&lt;/p&gt;&#xA;&lt;p&gt;那究竟什么是 Flink SQL CDC 呢？毕竟这是个相对还比较新的技术，可能很多人都还没听说过这个技术，所以我们先从它诞生的业务场景说起。&lt;/p&gt;</description>
    </item>
    <item>
      <title>彩蛋1竟然还有分布式的JVM？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/%E5%BD%A9%E8%9B%8B1%E7%AB%9F%E7%84%B6%E8%BF%98%E6%9C%89%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84jvm/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/%E5%BD%A9%E8%9B%8B1%E7%AB%9F%E7%84%B6%E8%BF%98%E6%9C%89%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84jvm/</guid>
      <description>&lt;p&gt;经过前面的 21 讲，我们应该说是自底向上、从理论到实践，对实时流计算技术有了一个系统的理解。我们在分析和对比了四种不同的开源流计算框架后，认为 Flink 是当前最好的开源流计算框架。&lt;/p&gt;</description>
    </item>
    <item>
      <title>彩蛋2穷途末路的选择：Lambda架构</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/%E5%BD%A9%E8%9B%8B2%E7%A9%B7%E9%80%94%E6%9C%AB%E8%B7%AF%E7%9A%84%E9%80%89%E6%8B%A9lambda%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/%E5%BD%A9%E8%9B%8B2%E7%A9%B7%E9%80%94%E6%9C%AB%E8%B7%AF%E7%9A%84%E9%80%89%E6%8B%A9lambda%E6%9E%B6%E6%9E%84/</guid>
      <description>&lt;p&gt;在前面的课时中，我们都是在讨论实时计算的问题。但真实的世界里，很多事情都不尽人愿。有时候，因为算法复杂度过高、数据量过大，我们并不能通过直接的实时计算，获得想要的结果。比如，二度关联图谱计算以及一些复杂的统计学习模型或机器学习模型训练等。在这种情况下，我们该如何制定出一个可以真实落地的系统架构方案呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>结束语Java程序员的成长之路和从业方向</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/%E7%BB%93%E6%9D%9F%E8%AF%ADjava%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%E5%92%8C%E4%BB%8E%E4%B8%9A%E6%96%B9%E5%90%91/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/%E7%BB%93%E6%9D%9F%E8%AF%ADjava%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF%E5%92%8C%E4%BB%8E%E4%B8%9A%E6%96%B9%E5%90%91/</guid>
      <description>&lt;p&gt;首先，恭喜你，坚持学到了最后。&lt;/p&gt;&#xA;&lt;p&gt;今天我想借最后这个机会，结合自己多年工作的经历和感悟，和你聊一下有关 Java 程序员的成长之路，以及几个从业方向的问题。&lt;/p&gt;&#xA;&lt;p&gt;成长之路&lt;/p&gt;</description>
    </item>
    <item>
      <title>开篇词攻克实时流计算难点，掌握大数据未来！</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/%E5%BC%80%E7%AF%87%E8%AF%8D%E6%94%BB%E5%85%8B%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97%E9%9A%BE%E7%82%B9%E6%8E%8C%E6%8F%A1%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%9C%AA%E6%9D%A5/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/21%E8%AE%B2%E5%90%83%E9%80%8F%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97/%E5%BC%80%E7%AF%87%E8%AF%8D%E6%94%BB%E5%85%8B%E5%AE%9E%E6%97%B6%E6%B5%81%E8%AE%A1%E7%AE%97%E9%9A%BE%E7%82%B9%E6%8E%8C%E6%8F%A1%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%9C%AA%E6%9D%A5/</guid>
      <description>&lt;p&gt;你好，我是周爽，相熟的人都叫我“爽哥”。&lt;/p&gt;&#xA;&lt;p&gt;我曾任职于华为 2012 实验室高斯部门，负责实时分析型内存数据库 RTANA、华为公有云 RDS 服务的研发工作。目前，我专注于移动反欺诈解决方案的研发。针对公司业务需求，我开发了一个实时流计算系统，并在此基础上完成了风控系统的研发。最终，这个系统被一个独角兽收购。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
