<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript核心原理解析 on Docs</title>
    <link>https://politcloud.org/tags/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</link>
    <description>Recent content in JavaScript核心原理解析 on Docs</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 10 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://politcloud.org/tags/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01__delete_0：JavaScript中到底有什么是可以销毁的</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/01__delete_0javascript%E4%B8%AD%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%AF%E4%BB%A5%E9%94%80%E6%AF%81%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/01__delete_0javascript%E4%B8%AD%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E6%98%AF%E5%8F%AF%E4%BB%A5%E9%94%80%E6%AF%81%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是周爱民，感谢你来听我的专栏。&lt;/p&gt;&#xA;&lt;p&gt;今天是这个系列的第一讲，我将从 JavaScript 中最不起眼的、使用率最低的一个运算——delete 讲起。&lt;/p&gt;&#xA;&lt;p&gt;你知道，JavaScript 是一门面向对象的语言。它很早就支持了 delete 运算，这是一个元老级的语言特性。但细追究起来，delete 其实是从 JavaScript 1.2 中才开始有的，与它一同出现的，是对象和数组的字面量语法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>02__var_x_=_y_=_100：声明语句与语法改变了JavaScript语言核心性质</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/02__var_x__y__100%E5%A3%B0%E6%98%8E%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%AF%AD%E6%B3%95%E6%94%B9%E5%8F%98%E4%BA%86javascript%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83%E6%80%A7%E8%B4%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/02__var_x__y__100%E5%A3%B0%E6%98%8E%E8%AF%AD%E5%8F%A5%E4%B8%8E%E8%AF%AD%E6%B3%95%E6%94%B9%E5%8F%98%E4%BA%86javascript%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83%E6%80%A7%E8%B4%A8/</guid>
      <description>&lt;p&gt;你好，我是周爱民。&lt;/p&gt;&#xA;&lt;p&gt;如果你听过上一讲的内容，心里应该会有一个问题，那就是——在规范中存在的“引用”到底有什么用？它对我们的编程有什么实际的影响呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>03__a.x_=_a_=_{n_2}：一道被无数人无数次地解释过的经典面试题</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/03__a.x__a__n_2%E4%B8%80%E9%81%93%E8%A2%AB%E6%97%A0%E6%95%B0%E4%BA%BA%E6%97%A0%E6%95%B0%E6%AC%A1%E5%9C%B0%E8%A7%A3%E9%87%8A%E8%BF%87%E7%9A%84%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/03__a.x__a__n_2%E4%B8%80%E9%81%93%E8%A2%AB%E6%97%A0%E6%95%B0%E4%BA%BA%E6%97%A0%E6%95%B0%E6%AC%A1%E5%9C%B0%E8%A7%A3%E9%87%8A%E8%BF%87%E7%9A%84%E7%BB%8F%E5%85%B8%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>&lt;p&gt;你好，我是周爱民。&lt;/p&gt;&#xA;&lt;p&gt;在前端的历史中，有很多人都曾经因为同一道面试题而彻夜不眠。这道题出现在 9 年之前，它的提出者“蔡 mc（蔡美纯）”曾是 JQuery 的提交者之一，如今已经隐去多年，不复现身于前端。然而这道经典面试题仍然多年长挂于各大论坛，被众多后来者一遍又一遍地分析。&lt;/p&gt;</description>
    </item>
    <item>
      <title>04__export_default_function()_{}：你无法导出一个匿名函数表达式</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/04__export_default_function_%E4%BD%A0%E6%97%A0%E6%B3%95%E5%AF%BC%E5%87%BA%E4%B8%80%E4%B8%AA%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/04__export_default_function_%E4%BD%A0%E6%97%A0%E6%B3%95%E5%AF%BC%E5%87%BA%E4%B8%80%E4%B8%AA%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>&lt;p&gt;你好，我是周爱民，欢迎回到我的专栏。&lt;/p&gt;&#xA;&lt;p&gt;今天我要讲述的内容是从 ECMAScript 6 开始在 JavaScript 中出现的&lt;strong&gt;模块技术&lt;/strong&gt;，这对许多 JavaScript 开发者来说都是比较陌生的。&lt;/p&gt;&#xA;&lt;p&gt;一方面在于它出现得较晚，另一方面，则是因为在普遍使用的 Node.js 环境带有自己内置的模块加载技术。因此，ECMAScript 6 模块需要通过特定的命令行参数才能开启，它的应用一直以来也就不够广泛。&lt;/p&gt;</description>
    </item>
    <item>
      <title>05__for_(let_x_of_[1,2,3])_...：for循环并不比使用函数递归节省开销</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/05__for_let_x_of_123_...for%E5%BE%AA%E7%8E%AF%E5%B9%B6%E4%B8%8D%E6%AF%94%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92%E8%8A%82%E7%9C%81%E5%BC%80%E9%94%80/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/05__for_let_x_of_123_...for%E5%BE%AA%E7%8E%AF%E5%B9%B6%E4%B8%8D%E6%AF%94%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92%E8%8A%82%E7%9C%81%E5%BC%80%E9%94%80/</guid>
      <description>&lt;p&gt;你好，我是周爱民。欢迎回到我的专栏，我将为你揭示 JavaScript 最为核心的那些实现细节。&lt;/p&gt;&#xA;&lt;p&gt;语句，是 JavaScript 中组织代码的基础语法组件，包括函数声明等等在内的六种声明，其实都被归为“语句”的范畴。因此，如果将一份 JavaScript 代码中的所有语句抽离掉，那么大概就只会剩下为数不多的、在全局范围内执行的表达式了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>06__x_break_x;_搞懂如何在循环外使用break，方知语句执行真解</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/06__x_break_x_%E6%90%9E%E6%87%82%E5%A6%82%E4%BD%95%E5%9C%A8%E5%BE%AA%E7%8E%AF%E5%A4%96%E4%BD%BF%E7%94%A8break%E6%96%B9%E7%9F%A5%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E7%9C%9F%E8%A7%A3/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/06__x_break_x_%E6%90%9E%E6%87%82%E5%A6%82%E4%BD%95%E5%9C%A8%E5%BE%AA%E7%8E%AF%E5%A4%96%E4%BD%BF%E7%94%A8break%E6%96%B9%E7%9F%A5%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E7%9C%9F%E8%A7%A3/</guid>
      <description>&lt;p&gt;你好，我是周爱民。&lt;/p&gt;&#xA;&lt;p&gt;上一讲的&lt;code&gt;for&lt;/code&gt;语句为你揭开了 JavaScript 执行环境的一角。在执行系统的厚重面纱之下，到底还隐藏了哪些秘密呢？那些所谓的执行环境、上下文、闭包或块与块级作用域，到底有什么用，或者它们之间又是如何相互作用的呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>07__`${1}`：详解JavaScript中特殊的可执行结构</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/07__1%E8%AF%A6%E8%A7%A3javascript%E4%B8%AD%E7%89%B9%E6%AE%8A%E7%9A%84%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/07__1%E8%AF%A6%E8%A7%A3javascript%E4%B8%AD%E7%89%B9%E6%AE%8A%E7%9A%84%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;p&gt;你好，我是周爱民。&lt;/p&gt;&#xA;&lt;p&gt;今天这一讲的标题是一个&lt;strong&gt;模板&lt;/strong&gt;。模板这个语法元素在 JavaScript 中出现得很晚，以至于总是有人感到奇怪：为什么 JavaScript 这么晚才弄出个模板这样的东西？&lt;/p&gt;&#xA;&lt;p&gt;模板看起来很简单，就是把一个字符串里的东西替换一下就行了，C 语言里的 printf() 就有类似的功能，Bash 脚本里也可以直接在字符串里替换变量。这个功能非常好用，但在实现上其实很简单，无非就是字符串替换而已。&lt;/p&gt;</description>
    </item>
    <item>
      <title>08__x_=_x：函数式语言的核心抽象：函数与表达式的同一性</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/08__x__x%E5%87%BD%E6%95%B0%E5%BC%8F%E8%AF%AD%E8%A8%80%E7%9A%84%E6%A0%B8%E5%BF%83%E6%8A%BD%E8%B1%A1%E5%87%BD%E6%95%B0%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%90%8C%E4%B8%80%E6%80%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/08__x__x%E5%87%BD%E6%95%B0%E5%BC%8F%E8%AF%AD%E8%A8%80%E7%9A%84%E6%A0%B8%E5%BF%83%E6%8A%BD%E8%B1%A1%E5%87%BD%E6%95%B0%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%90%8C%E4%B8%80%E6%80%A7/</guid>
      <description>&lt;p&gt;你好，我是周爱民。&lt;/p&gt;&#xA;&lt;p&gt;在运行期，语句执行和特殊的可执行结构都不是 JavaScript 的主角，多数情况下，它们都只充当过渡角色而不为开发人员所知。我相信，你在 JavaScript 中最熟悉的执行体一定是&lt;strong&gt;全局代码&lt;/strong&gt;，以及&lt;strong&gt;函数&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>09__(...x)：不是表达式、语句、函数，但它却能执行</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/09__...x%E4%B8%8D%E6%98%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E5%8F%A5%E5%87%BD%E6%95%B0%E4%BD%86%E5%AE%83%E5%8D%B4%E8%83%BD%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/09__...x%E4%B8%8D%E6%98%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E5%8F%A5%E5%87%BD%E6%95%B0%E4%BD%86%E5%AE%83%E5%8D%B4%E8%83%BD%E6%89%A7%E8%A1%8C/</guid>
      <description>&lt;p&gt;你好，我是周爱民，欢迎回到我的专栏。&lt;/p&gt;&#xA;&lt;p&gt;从之前的课程中，你应该已经对语句执行和函数执行有了基本的了解。事实上，这两种执行其实都是对&lt;strong&gt;顺序&lt;/strong&gt;、&lt;strong&gt;分支&lt;/strong&gt;与&lt;strong&gt;循环&lt;/strong&gt;三种逻辑在语义上的表达。&lt;/p&gt;</description>
    </item>
    <item>
      <title>10__x_=_yield_x：迭代过程的“函数式化”</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/10__x__yield_x%E8%BF%AD%E4%BB%A3%E8%BF%87%E7%A8%8B%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E5%8C%96/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/10__x__yield_x%E8%BF%AD%E4%BB%A3%E8%BF%87%E7%A8%8B%E7%9A%84%E5%87%BD%E6%95%B0%E5%BC%8F%E5%8C%96/</guid>
      <description>&lt;p&gt;你好，我是周爱民。欢迎回到我的专栏。&lt;/p&gt;&#xA;&lt;p&gt;相信上一讲的迭代过程已经在许多人心中留下了巨大的阴影，所以很多人一看今天的标题，第一个反应是：“又来！”&lt;/p&gt;&#xA;&lt;p&gt;其实我经常习惯用&lt;strong&gt;同一个例子&lt;/strong&gt;，或者&lt;strong&gt;同类型的示例的细微不同&lt;/strong&gt;去分辨与反映语言特性上的核心与本质的不同。如同在第 2 讲和第 3 讲中都在讲的连续赋值，看起来形似，却根本上不同。&lt;/p&gt;</description>
    </item>
    <item>
      <title>11__throw_1;：它在“最简单语法榜”上排名第三</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/11__throw_1%E5%AE%83%E5%9C%A8%E6%9C%80%E7%AE%80%E5%8D%95%E8%AF%AD%E6%B3%95%E6%A6%9C%E4%B8%8A%E6%8E%92%E5%90%8D%E7%AC%AC%E4%B8%89/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/11__throw_1%E5%AE%83%E5%9C%A8%E6%9C%80%E7%AE%80%E5%8D%95%E8%AF%AD%E6%B3%95%E6%A6%9C%E4%B8%8A%E6%8E%92%E5%90%8D%E7%AC%AC%E4%B8%89/</guid>
      <description>&lt;p&gt;你好，我是周爱民，欢迎回到我的专栏。&lt;/p&gt;&#xA;&lt;p&gt;今天我将为你介绍的是在 ECMAScript 规范中，实现起来“最简单”的 JavaScript 语法榜前三名的 JavaScript 语句。&lt;/p&gt;&#xA;&lt;p&gt;标题中的&lt;code&gt;throw 1&lt;/code&gt;就排在这个“最简单榜”第三名。&lt;/p&gt;</description>
    </item>
    <item>
      <title>12__1_in_1..constructor：这行代码的结果值，既可能是true，也可能是false</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/12__1_in_1..constructor%E8%BF%99%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BB%93%E6%9E%9C%E5%80%BC%E6%97%A2%E5%8F%AF%E8%83%BD%E6%98%AFtrue%E4%B9%9F%E5%8F%AF%E8%83%BD%E6%98%AFfalse/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/12__1_in_1..constructor%E8%BF%99%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9A%84%E7%BB%93%E6%9E%9C%E5%80%BC%E6%97%A2%E5%8F%AF%E8%83%BD%E6%98%AFtrue%E4%B9%9F%E5%8F%AF%E8%83%BD%E6%98%AFfalse/</guid>
      <description>&lt;p&gt;你好，我是周爱民。欢迎你回到我的专栏。&lt;/p&gt;&#xA;&lt;p&gt;如果你听过上一讲，那么你应该知道，接下来我要与你聊的是 JavaScript 的&lt;strong&gt;面向对象系统&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;p&gt;最早期的 JavaScript 只有一个非常非常弱的对象系统。我用过 JavaScript 1.0，甚至可能还是最早尝试用它在浏览器中写代码的一批程序员，我也寻找和收集过早期的 CEniv 和 ScriptEase，只为了探究它最早的语言特性与 JavaScript 之间的相似之处。&lt;/p&gt;</description>
    </item>
    <item>
      <title>13__new_X：从构造器到类，为你揭密对象构造的全程</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/13__new_x%E4%BB%8E%E6%9E%84%E9%80%A0%E5%99%A8%E5%88%B0%E7%B1%BB%E4%B8%BA%E4%BD%A0%E6%8F%AD%E5%AF%86%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E7%9A%84%E5%85%A8%E7%A8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/13__new_x%E4%BB%8E%E6%9E%84%E9%80%A0%E5%99%A8%E5%88%B0%E7%B1%BB%E4%B8%BA%E4%BD%A0%E6%8F%AD%E5%AF%86%E5%AF%B9%E8%B1%A1%E6%9E%84%E9%80%A0%E7%9A%84%E5%85%A8%E7%A8%8B/</guid>
      <description>&lt;p&gt;你好，我是周爱民。&lt;/p&gt;&#xA;&lt;p&gt;今天我只跟你聊一件事，就是 JavaScript 构造器。标题中的这行代码中规中矩，是我这个专栏题目列表中难得的正经代码。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;NOTE：需要稍加说明的是：这行代码在 JavaScript 1.x 的某些版本或具体实现中是不能使用的。即使 ECMAScript ed1 开始就将它作为标准语法之一，当时也还有许多语言并不支持它。&lt;/p&gt;</description>
    </item>
    <item>
      <title>14__super.xxx()：虽然直到ES10还是个半吊子实现，却也值得一讲</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/14__super.xxx%E8%99%BD%E7%84%B6%E7%9B%B4%E5%88%B0es10%E8%BF%98%E6%98%AF%E4%B8%AA%E5%8D%8A%E5%90%8A%E5%AD%90%E5%AE%9E%E7%8E%B0%E5%8D%B4%E4%B9%9F%E5%80%BC%E5%BE%97%E4%B8%80%E8%AE%B2/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/14__super.xxx%E8%99%BD%E7%84%B6%E7%9B%B4%E5%88%B0es10%E8%BF%98%E6%98%AF%E4%B8%AA%E5%8D%8A%E5%90%8A%E5%AD%90%E5%AE%9E%E7%8E%B0%E5%8D%B4%E4%B9%9F%E5%80%BC%E5%BE%97%E4%B8%80%E8%AE%B2/</guid>
      <description>&lt;p&gt;你好，我是周爱民，接下来我们继续讲述 JavaScript 中的那些奇幻代码。&lt;/p&gt;&#xA;&lt;p&gt;今天要说的内容，打根儿里起还是得从 JavaScript 的 1.0 谈起。在此前我已经讲过了，JavaScript 1.0 连继承都没有，但是它实现了以“类抄写”为基础的、基本的面向对象模型。而在此之后，才在 JavaScript 1.1 开始提出，并在后来逐渐完善了原型继承。&lt;/p&gt;</description>
    </item>
    <item>
      <title>15__return_Object.create(new.target.prototype)：做框架设计的基本功：写一个根类</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/15__return_object.createnew.target.prototype%E5%81%9A%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8A%9F%E5%86%99%E4%B8%80%E4%B8%AA%E6%A0%B9%E7%B1%BB/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/15__return_object.createnew.target.prototype%E5%81%9A%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8A%9F%E5%86%99%E4%B8%80%E4%B8%AA%E6%A0%B9%E7%B1%BB/</guid>
      <description>&lt;p&gt;你好，我是周爱民。&lt;/p&gt;&#xA;&lt;p&gt;今天这一讲的标题呢，比较长。它是我这个专栏中最长的标题了。不过说起来，这个标题的意义还是很简单的，就是返回一个用&lt;code&gt;Object.create()&lt;/code&gt;来创建的对象。&lt;/p&gt;</description>
    </item>
    <item>
      <title>16__[a,_b]_=_{a,_b}：让你从一行代码看到对象的本质</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/16__a_b__a_b%E8%AE%A9%E4%BD%A0%E4%BB%8E%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9C%8B%E5%88%B0%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/16__a_b__a_b%E8%AE%A9%E4%BD%A0%E4%BB%8E%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E7%9C%8B%E5%88%B0%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/</guid>
      <description>&lt;p&gt;你好，我是周爱民。欢迎回到我的专栏。&lt;/p&gt;&#xA;&lt;p&gt;接下来的两讲，我要讲的仍然是 JavaScript 中的面向对象。有所不同的是，今天这一讲说的是JavaScript 中的对象本质，而下一讲要说的，则是它最原始的形态（也通常称为原子对象）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>17__Object.setPrototypeOf(x,_null)：连Brendan_Eich都认错，但null值还活着</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/17__object.setprototypeofx_null%E8%BF%9Ebrendan_eich%E9%83%BD%E8%AE%A4%E9%94%99%E4%BD%86null%E5%80%BC%E8%BF%98%E6%B4%BB%E7%9D%80/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/17__object.setprototypeofx_null%E8%BF%9Ebrendan_eich%E9%83%BD%E8%AE%A4%E9%94%99%E4%BD%86null%E5%80%BC%E8%BF%98%E6%B4%BB%E7%9D%80/</guid>
      <description>&lt;p&gt;你好，我是周爱民。欢迎回来继续学习 JavaScript。&lt;/p&gt;&#xA;&lt;p&gt;今天是关于面向对象的最后一讲，上次已经说过，今天这一讲要讨论的是原子对象。关于原子对象的讨论，我们应该从&lt;code&gt;null&lt;/code&gt;值讲起。&lt;/p&gt;</description>
    </item>
    <item>
      <title>18__a_&#43;_b：动态类型是灾难之源还是最好的特性？（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/18__a_&#43;_b%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E6%98%AF%E7%81%BE%E9%9A%BE%E4%B9%8B%E6%BA%90%E8%BF%98%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E7%89%B9%E6%80%A7%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/18__a_&#43;_b%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E6%98%AF%E7%81%BE%E9%9A%BE%E4%B9%8B%E6%BA%90%E8%BF%98%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E7%89%B9%E6%80%A7%E4%B8%8A/</guid>
      <description>&lt;p&gt;你好，我是周爱民，欢迎回到我的专栏。今天我们讲的主题是 JavaScript 的动态类型系统。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;动态类型&lt;/strong&gt;是 JavaScript 的动态语言特性中最有代表性的一种。&lt;/p&gt;&#xA;&lt;p&gt;动态执行与动态类型是天生根植于 JavaScript 语言核心设计中的基础组件，它们相辅相成，导致了 JavaScript 在学习上是易学难精，在使用中是易用易错。成兹败兹，难以得失论。&lt;/p&gt;</description>
    </item>
    <item>
      <title>19__a_&#43;_b：动态类型是灾难之源还是最好的特性？（下）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/19__a_&#43;_b%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E6%98%AF%E7%81%BE%E9%9A%BE%E4%B9%8B%E6%BA%90%E8%BF%98%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E7%89%B9%E6%80%A7%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/19__a_&#43;_b%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E6%98%AF%E7%81%BE%E9%9A%BE%E4%B9%8B%E6%BA%90%E8%BF%98%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E7%89%B9%E6%80%A7%E4%B8%8B/</guid>
      <description>&lt;p&gt;你好，我是周爱民。&lt;/p&gt;&#xA;&lt;p&gt;上一讲，我们说到如何将复杂的类型转换缩减到两条简单的规则，以及两种主要类型。这两条简单规则是：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;从值 x 到引用：调用 Object(x) 函数。&lt;/li&gt;&#xA;&lt;li&gt;从引用 x 到值：调用 x.valueOf() 方法；或，调用四种值类型的包装类函数，例如 Number(x)，或者 String(x) 等等。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;两种主要类型则是&lt;strong&gt;字符串&lt;/strong&gt;和&lt;strong&gt;数字值&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>20__(0,_eval)(_x_=_100_)_：一行让严格模式形同虚设的破坏性设计（上）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/20__0_eval_x__100__%E4%B8%80%E8%A1%8C%E8%AE%A9%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E5%BD%A2%E5%90%8C%E8%99%9A%E8%AE%BE%E7%9A%84%E7%A0%B4%E5%9D%8F%E6%80%A7%E8%AE%BE%E8%AE%A1%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/20__0_eval_x__100__%E4%B8%80%E8%A1%8C%E8%AE%A9%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E5%BD%A2%E5%90%8C%E8%99%9A%E8%AE%BE%E7%9A%84%E7%A0%B4%E5%9D%8F%E6%80%A7%E8%AE%BE%E8%AE%A1%E4%B8%8A/</guid>
      <description>&lt;p&gt;你好，我是周爱民。&lt;/p&gt;&#xA;&lt;p&gt;今天我们讨论动态执行。与最初的预告不同，我在这一讲里把原来的第 20 讲合并掉了，变成了 20~21 的两讲合讲，但也分成了上、下两节。所以，其实只是课程的标题少了一个，内容却没有变。&lt;/p&gt;</description>
    </item>
    <item>
      <title>21__(0,_eval)(_x_=_100_)_：一行让严格模式形同虚设的破坏性设计（下）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/21__0_eval_x__100__%E4%B8%80%E8%A1%8C%E8%AE%A9%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E5%BD%A2%E5%90%8C%E8%99%9A%E8%AE%BE%E7%9A%84%E7%A0%B4%E5%9D%8F%E6%80%A7%E8%AE%BE%E8%AE%A1%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/21__0_eval_x__100__%E4%B8%80%E8%A1%8C%E8%AE%A9%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F%E5%BD%A2%E5%90%8C%E8%99%9A%E8%AE%BE%E7%9A%84%E7%A0%B4%E5%9D%8F%E6%80%A7%E8%AE%BE%E8%AE%A1%E4%B8%8B/</guid>
      <description>&lt;p&gt;你好，我是周爱民。欢迎回到我的专栏。书接上回，这一讲我们仍然讲动态执行。&lt;/p&gt;&#xA;&lt;p&gt;之前我说到过，setTimeout 和 setInterval 的第一个参数可以使用字符串，那么如果这个参数使用字符串的话，代码将会在哪里执行呢？毕竟当定时器被触发的时候，程序的执行流程“很可能”已经离开了当前的上下文环境，而切换到未知的地方去了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>22__new_Function(&#39;x_=_100&#39;)();：函数的类化是对动态与静态系统的再次统一</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/22__new_functionx__100%E5%87%BD%E6%95%B0%E7%9A%84%E7%B1%BB%E5%8C%96%E6%98%AF%E5%AF%B9%E5%8A%A8%E6%80%81%E4%B8%8E%E9%9D%99%E6%80%81%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%8D%E6%AC%A1%E7%BB%9F%E4%B8%80/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/22__new_functionx__100%E5%87%BD%E6%95%B0%E7%9A%84%E7%B1%BB%E5%8C%96%E6%98%AF%E5%AF%B9%E5%8A%A8%E6%80%81%E4%B8%8E%E9%9D%99%E6%80%81%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%8D%E6%AC%A1%E7%BB%9F%E4%B8%80/</guid>
      <description>&lt;p&gt;你好，我是周爱民，欢迎回到我的专栏。&lt;/p&gt;&#xA;&lt;p&gt;今天是专栏最后一讲，我接下来要跟你聊的，仍然是 JavaScript 的动态语言特性，主要是动态函数的实现原理。&lt;/p&gt;&#xA;&lt;p&gt;标题中的代码比较简单，是常用、常见的。这里稍微需要强调一下的是“最后一对括号的使用”，由于运算符优先级的设计，它是在 new 运算之后才被调用的。也就是说，标题中的代码等义于：&lt;/p&gt;</description>
    </item>
    <item>
      <title>99-JavaScript核心原理解析</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/99-javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/99-javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</guid>
      <description></description>
    </item>
    <item>
      <title>加餐__捡豆吃豆的学问（上）：这门课讲的是什么？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/%E5%8A%A0%E9%A4%90__%E6%8D%A1%E8%B1%86%E5%90%83%E8%B1%86%E7%9A%84%E5%AD%A6%E9%97%AE%E4%B8%8A%E8%BF%99%E9%97%A8%E8%AF%BE%E8%AE%B2%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/%E5%8A%A0%E9%A4%90__%E6%8D%A1%E8%B1%86%E5%90%83%E8%B1%86%E7%9A%84%E5%AD%A6%E9%97%AE%E4%B8%8A%E8%BF%99%E9%97%A8%E8%AF%BE%E8%AE%B2%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;你好，我是周爱民，今天又到了我的《JavaScript 核心原理解析》。&lt;/p&gt;&#xA;&lt;p&gt;不过与以往不同，今天不上正经课，讲点课外的话。前两天极客时间的编辑老师找我，开了一个会，认认真真地讨论了一下这门课程，认为当务之急，是给同学们开个小灶，要好好讲一下“怎么学这门课程”。因为这才短短的讲了 1/3，许多同学就已经跟不上了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>加餐__捡豆吃豆的学问（下）：这门课该怎么学？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/%E5%8A%A0%E9%A4%90__%E6%8D%A1%E8%B1%86%E5%90%83%E8%B1%86%E7%9A%84%E5%AD%A6%E9%97%AE%E4%B8%8B%E8%BF%99%E9%97%A8%E8%AF%BE%E8%AF%A5%E6%80%8E%E4%B9%88%E5%AD%A6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/%E5%8A%A0%E9%A4%90__%E6%8D%A1%E8%B1%86%E5%90%83%E8%B1%86%E7%9A%84%E5%AD%A6%E9%97%AE%E4%B8%8B%E8%BF%99%E9%97%A8%E8%AF%BE%E8%AF%A5%E6%80%8E%E4%B9%88%E5%AD%A6/</guid>
      <description>&lt;p&gt;你好，我是周爱民，在上一讲中讨论了这门课程所学的内容“到底是什么”。接下来，我们再来看看“怎么学这门课程”。&lt;/p&gt;&#xA;&lt;h2 id=&#34;教的方法&#34;&gt;教的方法&lt;/h2&gt;&#xA;&lt;p&gt;我先来说说这个课的教法。有没有简单、明晰的授课方法呢？有的，你在极客时间上也好，学校的课程里也好，常见的一个教法套路便是：&lt;/p&gt;</description>
    </item>
    <item>
      <title>加餐__让JavaScript运行起来</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/%E5%8A%A0%E9%A4%90__%E8%AE%A9javascript%E8%BF%90%E8%A1%8C%E8%B5%B7%E6%9D%A5/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/%E5%8A%A0%E9%A4%90__%E8%AE%A9javascript%E8%BF%90%E8%A1%8C%E8%B5%B7%E6%9D%A5/</guid>
      <description>&lt;p&gt;你好，我是周爱民。欢迎回到我的专栏。今天，是传说中的加餐时间，我将与你解说前 11 讲内容的整体体系和结论。&lt;/p&gt;&#xA;&lt;p&gt;我们从一个问题讲起，那就是：JavaScript 到底是怎么运行起来的呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>结束语__愿你能做一个真正“懂”的程序员</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/%E7%BB%93%E6%9D%9F%E8%AF%AD__%E6%84%BF%E4%BD%A0%E8%83%BD%E5%81%9A%E4%B8%80%E4%B8%AA%E7%9C%9F%E6%AD%A3%E6%87%82%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/%E7%BB%93%E6%9D%9F%E8%AF%AD__%E6%84%BF%E4%BD%A0%E8%83%BD%E5%81%9A%E4%B8%80%E4%B8%AA%E7%9C%9F%E6%AD%A3%E6%87%82%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%91%98/</guid>
      <description>&lt;p&gt;我常常讲一个比喻，这个比喻是说有一座塔，塔门口有两尊石狮子。&lt;/p&gt;&#xA;&lt;p&gt;如果有人登塔，那么进塔之前他固然是会看到这个狮子的，往上走，正好到塔后，石狮子就没有了，于是这个人说“就我一楼之所见，没有狮子”；绕到前面，一看，石狮子好好地在那儿，于是这个人又说“于我所见，有狮子”。如此行至二楼，他又会说“没有狮子”，而后又否定说“真真切切是有狮子在的”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开篇词__如何解决语言问题？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/%E5%BC%80%E7%AF%87%E8%AF%8D__%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%AF%AD%E8%A8%80%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/javascript%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/%E5%BC%80%E7%AF%87%E8%AF%8D__%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E8%AF%AD%E8%A8%80%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;你好，我是周爱民，和你一样，我喜欢 JavaScript。&lt;/p&gt;&#xA;&lt;p&gt;我是《JavaScript 语言精髓与编程实践》这本书的作者，这个书名正好也刻画了我追随 JavaScript 的轨迹：在过去的二十年中，我一面研究它的语言精髓，一面做编程实践。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
