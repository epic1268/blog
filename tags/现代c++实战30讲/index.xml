<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>现代C&#43;&#43;实战30讲 on Docs</title>
    <link>https://politcloud.org/tags/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/</link>
    <description>Recent content in 现代C&#43;&#43;实战30讲 on Docs</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 10 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://politcloud.org/tags/%E7%8E%B0%E4%BB%A3c++%E5%AE%9E%E6%88%9830%E8%AE%B2/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01__堆、栈、RAII：C&#43;&#43;里该如何管理资源？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/01__%E5%A0%86%E6%A0%88raiic&#43;&#43;%E9%87%8C%E8%AF%A5%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E8%B5%84%E6%BA%90/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/01__%E5%A0%86%E6%A0%88raiic&#43;&#43;%E9%87%8C%E8%AF%A5%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E8%B5%84%E6%BA%90/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;今天我们就正式开启了 C++ 的学习之旅，作为第一讲，我想先带你把地基打牢。我们来学习一下内存管理的基本概念，大致的学习路径是：先讲堆和栈，然后讨论 C++ 的特色功能 RAII。掌握这些概念，是能够熟练运用 C++ 的基础。&lt;/p&gt;</description>
    </item>
    <item>
      <title>02__自己动手，实现C&#43;&#43;的智能指针</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/02__%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0c&#43;&#43;%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/02__%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0c&#43;&#43;%E7%9A%84%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;上一讲，我们描述了一个某种程度上可以当成智能指针用的类 &lt;code&gt;shape_wrapper&lt;/code&gt;。使用那个智能指针，可以简化资源的管理，从根本上消除资源（包括内存）泄漏的可能性。这一讲我们就来进一步讲解，如何将 &lt;code&gt;shape_wrapper&lt;/code&gt; 改造成一个完整的智能指针。你会看到，智能指针本质上并不神秘，其实就是 RAII 资源管理功能的自然展现而已。&lt;/p&gt;</description>
    </item>
    <item>
      <title>03__右值和移动究竟解决了什么问题？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/03__%E5%8F%B3%E5%80%BC%E5%92%8C%E7%A7%BB%E5%8A%A8%E7%A9%B6%E7%AB%9F%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/03__%E5%8F%B3%E5%80%BC%E5%92%8C%E7%A7%BB%E5%8A%A8%E7%A9%B6%E7%AB%9F%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;从上一讲智能指针开始，我们已经或多或少接触了移动语义。本讲我们就完整地讨论一下移动语义和相关的概念。移动语义是 C++11 里引入的一个重要概念；理解这个概念，是理解很多现代 C++ 里的优化的基础。&lt;/p&gt;</description>
    </item>
    <item>
      <title>04__容器汇编_I：比较简单的若干容器</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/04__%E5%AE%B9%E5%99%A8%E6%B1%87%E7%BC%96_i%E6%AF%94%E8%BE%83%E7%AE%80%E5%8D%95%E7%9A%84%E8%8B%A5%E5%B9%B2%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/04__%E5%AE%B9%E5%99%A8%E6%B1%87%E7%BC%96_i%E6%AF%94%E8%BE%83%E7%AE%80%E5%8D%95%E7%9A%84%E8%8B%A5%E5%B9%B2%E5%AE%B9%E5%99%A8/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;上几讲我们学习了 C++ 的资源管理和值类别。今天我们换一个话题，来看一下 C++ 里的容器。&lt;/p&gt;&#xA;&lt;p&gt;关于容器，已经存在不少的学习资料了。在 cppreference 上有很完备的参考资料（[1]）。今天我们采取一种非正规的讲解方式，尽量不重复已有的参考资料，而是让你加深对于重要容器的理解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>05__容器汇编_II：需要函数对象的容器</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/05__%E5%AE%B9%E5%99%A8%E6%B1%87%E7%BC%96_ii%E9%9C%80%E8%A6%81%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/05__%E5%AE%B9%E5%99%A8%E6%B1%87%E7%BC%96_ii%E9%9C%80%E8%A6%81%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%AE%B9%E5%99%A8/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;上一讲我们学习了 C++ 的序列容器和两个容器适配器，今天我们继续讲完剩下的标准容器（[1]）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;函数对象及其特化&#34;&gt;函数对象及其特化&lt;/h2&gt;&#xA;&lt;p&gt;在讲容器之前，我们需要首先来讨论一下两个重要的函数对象，&lt;code&gt;less&lt;/code&gt; 和 &lt;code&gt;hash&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>06__异常：用还是不用，这是个问题</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/06__%E5%BC%82%E5%B8%B8%E7%94%A8%E8%BF%98%E6%98%AF%E4%B8%8D%E7%94%A8%E8%BF%99%E6%98%AF%E4%B8%AA%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/06__%E5%BC%82%E5%B8%B8%E7%94%A8%E8%BF%98%E6%98%AF%E4%B8%8D%E7%94%A8%E8%BF%99%E6%98%AF%E4%B8%AA%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;到现在为止，我们已经有好多次都提到异常了。今天，我们就来彻底地聊一聊异常。&lt;/p&gt;&#xA;&lt;p&gt;首先，开宗明义，如果你不知道到底该不该用异常的话，那答案就是该用。如果你需要避免使用异常，原因必须是你有明确的需要避免使用异常的理由。&lt;/p&gt;</description>
    </item>
    <item>
      <title>07__迭代器和好用的新for循环</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/07__%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E5%A5%BD%E7%94%A8%E7%9A%84%E6%96%B0for%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/07__%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E5%A5%BD%E7%94%A8%E7%9A%84%E6%96%B0for%E5%BE%AA%E7%8E%AF/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;我们已经讲过了容器。在使用容器的过程中，你也应该对迭代器（iterator）或多或少有了些了解。今天，我们就来系统地讲一下迭代器。&lt;/p&gt;</description>
    </item>
    <item>
      <title>08__易用性改进_I：自动类型推断和初始化</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/08__%E6%98%93%E7%94%A8%E6%80%A7%E6%94%B9%E8%BF%9B_i%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/08__%E6%98%93%E7%94%A8%E6%80%A7%E6%94%B9%E8%BF%9B_i%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E5%92%8C%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;在之前的几讲里，我们已经多多少少接触到了一些 C++11 以来增加的新特性。下面的两讲，我会重点讲一下现代 C++（C++11/14/17）带来的易用性改进。&lt;/p&gt;</description>
    </item>
    <item>
      <title>09__易用性改进_II：字面量、静态断言和成员函数说明符</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/09__%E6%98%93%E7%94%A8%E6%80%A7%E6%94%B9%E8%BF%9B_ii%E5%AD%97%E9%9D%A2%E9%87%8F%E9%9D%99%E6%80%81%E6%96%AD%E8%A8%80%E5%92%8C%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E8%AF%B4%E6%98%8E%E7%AC%A6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/09__%E6%98%93%E7%94%A8%E6%80%A7%E6%94%B9%E8%BF%9B_ii%E5%AD%97%E9%9D%A2%E9%87%8F%E9%9D%99%E6%80%81%E6%96%AD%E8%A8%80%E5%92%8C%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0%E8%AF%B4%E6%98%8E%E7%AC%A6/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;本讲我们继续易用性的话题，看看现代 C++ 带来的其他易用性改进。&lt;/p&gt;&#xA;&lt;h2 id=&#34;自定义字面量&#34;&gt;自定义字面量&lt;/h2&gt;&#xA;&lt;p&gt;字面量（literal）是指在源代码中写出的固定常量，它们在 C++98 里只能是原生类型，如：&lt;/p&gt;</description>
    </item>
    <item>
      <title>10__到底应不应该返回对象？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/10__%E5%88%B0%E5%BA%95%E5%BA%94%E4%B8%8D%E5%BA%94%E8%AF%A5%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/10__%E5%88%B0%E5%BA%95%E5%BA%94%E4%B8%8D%E5%BA%94%E8%AF%A5%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;前几讲里我们已经约略地提到了返回对象的问题，本讲里我们进一步展开这个话题，把返回对象这个问题讲深讲透。&lt;/p&gt;&#xA;&lt;h2 id=&#34;f20&#34;&gt;F.20&lt;/h2&gt;&#xA;&lt;p&gt;《C++ 核心指南》的 F.20 这一条款是这么说的 [1]：&lt;/p&gt;</description>
    </item>
    <item>
      <title>102-现代C&#43;&#43;实战30讲</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/102-%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/102-%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/</guid>
      <description></description>
    </item>
    <item>
      <title>11__Unicode：进入多文字支持的世界</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/11__unicode%E8%BF%9B%E5%85%A5%E5%A4%9A%E6%96%87%E5%AD%97%E6%94%AF%E6%8C%81%E7%9A%84%E4%B8%96%E7%95%8C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/11__unicode%E8%BF%9B%E5%85%A5%E5%A4%9A%E6%96%87%E5%AD%97%E6%94%AF%E6%8C%81%E7%9A%84%E4%B8%96%E7%95%8C/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;这一讲我们来讲一个新话题，Unicode。我们会从编码的历史谈起，讨论编程中对中文和多语言的支持，然后重点看一下 C++ 中应该如何处理这些问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>12__编译期多态：泛型编程和模板入门</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/12__%E7%BC%96%E8%AF%91%E6%9C%9F%E5%A4%9A%E6%80%81%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E5%92%8C%E6%A8%A1%E6%9D%BF%E5%85%A5%E9%97%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/12__%E7%BC%96%E8%AF%91%E6%9C%9F%E5%A4%9A%E6%80%81%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B%E5%92%8C%E6%A8%A1%E6%9D%BF%E5%85%A5%E9%97%A8/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;相信你对多态这个面向对象的特性应该是很熟悉了。我们今天来讲一个非常 C++ 的话题，编译期多态及其相关的 C++ 概念。&lt;/p&gt;&#xA;&lt;h2 id=&#34;面向对象和多态&#34;&gt;面向对象和多态&lt;/h2&gt;&#xA;&lt;p&gt;在面向对象的开发里，最基本的一个特性就是“多态” [1]——用相同的代码得到不同结果。以我们在 [第 1 讲] 提到过的 &lt;code&gt;shape&lt;/code&gt; 类为例，它可能会定义一些通用的功能，然后在子类里进行实现或覆盖：&lt;/p&gt;</description>
    </item>
    <item>
      <title>13__编译期能做些什么？一个完整的计算世界</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/13__%E7%BC%96%E8%AF%91%E6%9C%9F%E8%83%BD%E5%81%9A%E4%BA%9B%E4%BB%80%E4%B9%88%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AE%A1%E7%AE%97%E4%B8%96%E7%95%8C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/13__%E7%BC%96%E8%AF%91%E6%9C%9F%E8%83%BD%E5%81%9A%E4%BA%9B%E4%BB%80%E4%B9%88%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%AE%A1%E7%AE%97%E4%B8%96%E7%95%8C/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;上一讲我们简单介绍了模板的基本用法及其在泛型编程中的应用。这一讲我们来看一下模板的另外一种重要用途——编译期计算，也称作“模板元编程”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>14__SFINAE：不是错误的替换失败是怎么回事_</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/14__sfinae%E4%B8%8D%E6%98%AF%E9%94%99%E8%AF%AF%E7%9A%84%E6%9B%BF%E6%8D%A2%E5%A4%B1%E8%B4%A5%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B_/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/14__sfinae%E4%B8%8D%E6%98%AF%E9%94%99%E8%AF%AF%E7%9A%84%E6%9B%BF%E6%8D%A2%E5%A4%B1%E8%B4%A5%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B_/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;我们已经连续讲了两讲模板和编译期编程了。今天我们还是继续这个话题，讲的内容是模板里的一个特殊概念——替换失败非错（substituion failure is not an error），英文简称为 SFINAE。&lt;/p&gt;</description>
    </item>
    <item>
      <title>15__constexpr：一个常态的世界</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/15__constexpr%E4%B8%80%E4%B8%AA%E5%B8%B8%E6%80%81%E7%9A%84%E4%B8%96%E7%95%8C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/15__constexpr%E4%B8%80%E4%B8%AA%E5%B8%B8%E6%80%81%E7%9A%84%E4%B8%96%E7%95%8C/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;我们已经连续讲了几讲比较累人的编译期编程了。今天我们还是继续这个话题，但是，相信今天学完之后，你会感觉比之前几讲要轻松很多。C++ 语言里的很多改进，让我们做编译期编程也变得越来越简单了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>16__函数对象和lambda：进入函数式编程</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/16__%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E5%92%8Clambda%E8%BF%9B%E5%85%A5%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/16__%E5%87%BD%E6%95%B0%E5%AF%B9%E8%B1%A1%E5%92%8Clambda%E8%BF%9B%E5%85%A5%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;本讲我们将介绍函数对象，尤其是匿名函数对象——lambda 表达式。今天的内容说难不难，但可能跟你的日常思维方式有较大的区别，建议你一定要试验一下文中的代码（使用 xeus-cling 的同学要注意：xeus-cling 似乎不太喜欢有 lambda 的代码😓；遇到有问题时，还是只能回到普通的编译执行方式了）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>17__函数式编程：一种越来越流行的编程范式</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/17__%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B8%80%E7%A7%8D%E8%B6%8A%E6%9D%A5%E8%B6%8A%E6%B5%81%E8%A1%8C%E7%9A%84%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/17__%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E4%B8%80%E7%A7%8D%E8%B6%8A%E6%9D%A5%E8%B6%8A%E6%B5%81%E8%A1%8C%E7%9A%84%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;上一讲我们初步介绍了函数对象和 lambda 表达式，今天我们来讲讲它们的主要用途——函数式编程。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一个小例子&#34;&gt;一个小例子&lt;/h2&gt;&#xA;&lt;p&gt;按惯例，我们还是从一个例子开始。想一下，如果给定一组文件名，要求数一下文件里的总文本行数，你会怎么做？&lt;/p&gt;</description>
    </item>
    <item>
      <title>18__应用可变模板和tuple的编译期技巧</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/18__%E5%BA%94%E7%94%A8%E5%8F%AF%E5%8F%98%E6%A8%A1%E6%9D%BF%E5%92%8Ctuple%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/18__%E5%BA%94%E7%94%A8%E5%8F%AF%E5%8F%98%E6%A8%A1%E6%9D%BF%E5%92%8Ctuple%E7%9A%84%E7%BC%96%E8%AF%91%E6%9C%9F%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;今天我们讲一个特殊的专题，如何使用可变模板和 tuple 来完成一些常见的功能，尤其是编译期计算。&lt;/p&gt;&#xA;&lt;h2 id=&#34;可变模板&#34;&gt;可变模板&lt;/h2&gt;&#xA;&lt;p&gt;可变模板 [1] 是 C++11 引入的一项新功能，使我们可以在模板参数里表达不定个数和类型的参数。从实际的角度，它有两个明显的用途：&lt;/p&gt;</description>
    </item>
    <item>
      <title>19__thread和future：领略异步中的未来</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/19__thread%E5%92%8Cfuture%E9%A2%86%E7%95%A5%E5%BC%82%E6%AD%A5%E4%B8%AD%E7%9A%84%E6%9C%AA%E6%9D%A5/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/19__thread%E5%92%8Cfuture%E9%A2%86%E7%95%A5%E5%BC%82%E6%AD%A5%E4%B8%AD%E7%9A%84%E6%9C%AA%E6%9D%A5/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;编译期的烧脑我们先告个段落，今天我们开始讲一个全新的话题——并发（concurrency）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;为什么要使用并发编程&#34;&gt;为什么要使用并发编程？&lt;/h2&gt;&#xA;&lt;p&gt;在本世纪初之前，大部分开发人员不常需要关心并发编程；用到的时候，也多半只是在单处理器上执行一些后台任务而已。只有少数为昂贵的工作站或服务器进行开发的程序员，才会需要为并发性能而烦恼。原因无他，程序员们享受着摩尔定律带来的免费性能提升，而高速的 Intel 单 CPU 是性价比最高的系统架构，可到了 2003 年左右，大家骤然发现，“免费午餐”已经结束了 [1]。主频的提升停滞了：在 2001 年，Intel 已经有了主频 2.0 GHz 的 CPU，而 18 年后，我现在正在使用的电脑，主频也仍然只是 2.5 GHz，虽然从单核变成了四核。服务器、台式机、笔记本、移动设备的处理器都转向了多核，计算要求则从单线程变成了多线程甚至异构——不仅要使用 CPU，还得使用 GPU。&lt;/p&gt;</description>
    </item>
    <item>
      <title>20__内存模型和atomic：理解并发的复杂性</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/20__%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%92%8Catomic%E7%90%86%E8%A7%A3%E5%B9%B6%E5%8F%91%E7%9A%84%E5%A4%8D%E6%9D%82%E6%80%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/20__%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E5%92%8Catomic%E7%90%86%E8%A7%A3%E5%B9%B6%E5%8F%91%E7%9A%84%E5%A4%8D%E6%9D%82%E6%80%A7/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;上一讲我们讨论了一些并发编程的基本概念，今天我们来讨论一个略有点绕的问题，C++ 里的内存模型和原子量。&lt;/p&gt;&#xA;&lt;h2 id=&#34;c98-的执行顺序问题&#34;&gt;C++98 的执行顺序问题&lt;/h2&gt;&#xA;&lt;p&gt;C++98 的年代里，开发者们已经了解了线程的概念，但 C++ 的标准里则完全没有提到线程。从实践上，估计大家觉得不提线程，C++ 也一样能实现多线程的应用程序吧。不过，很多聪明人都忽略了，下面的事实可能会产生不符合直觉预期的结果：&lt;/p&gt;</description>
    </item>
    <item>
      <title>21__工具漫谈：编译、格式化、代码检查、排错各显身手</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/21__%E5%B7%A5%E5%85%B7%E6%BC%AB%E8%B0%88%E7%BC%96%E8%AF%91%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E6%8E%92%E9%94%99%E5%90%84%E6%98%BE%E8%BA%AB%E6%89%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/21__%E5%B7%A5%E5%85%B7%E6%BC%AB%E8%B0%88%E7%BC%96%E8%AF%91%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5%E6%8E%92%E9%94%99%E5%90%84%E6%98%BE%E8%BA%AB%E6%89%8B/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;现代 C++ 语言，我们讲到这里就告一段落了。今天我们正式开启了实战篇，先讲一个轻松些的话题——工具。&lt;/p&gt;&#xA;&lt;h2 id=&#34;编译器&#34;&gt;编译器&lt;/h2&gt;&#xA;&lt;p&gt;当然，轻松不等于不重要。毕竟，工欲善其事，必先利其器。我们做 C++ 开发，最基本的工具就是编译器，对其有些了解显然也是必要的。我们就先来看看我在专栏开头就提到的三种编译器，MSVC [1]、GCC [2] 和 Clang [3]。&lt;/p&gt;</description>
    </item>
    <item>
      <title>22__处理数据类型变化和错误：optional、variant、expected和Herbception</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/22__%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%98%E5%8C%96%E5%92%8C%E9%94%99%E8%AF%AFoptionalvariantexpected%E5%92%8Cherbception/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/22__%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%98%E5%8C%96%E5%92%8C%E9%94%99%E8%AF%AFoptionalvariantexpected%E5%92%8Cherbception/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;我们之前已经讨论了异常是推荐的 C++ 错误处理方式。不过，C++ 里有另外一些结构也很适合进行错误处理，今天我们就来讨论一下。&lt;/p&gt;&#xA;&lt;h2 id=&#34;optional&#34;&gt;optional&lt;/h2&gt;&#xA;&lt;p&gt;在面向对象（引用语义）的语言里，我们有时候会使用空值 null 表示没有找到需要的对象。也有人推荐使用一个特殊的空对象，来避免空值带来的一些问题 [1]。可不管是空值，还是空对象，对于一个返回普通对象（值语义）的 C++ 函数都是不适用的——空值和空对象只能用在返回引用 / 指针的场合，一般情况下需要堆内存分配，在 C++ 里会引致额外的开销。&lt;/p&gt;</description>
    </item>
    <item>
      <title>23__数字计算：介绍线性代数和数值计算库</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/23__%E6%95%B0%E5%AD%97%E8%AE%A1%E7%AE%97%E4%BB%8B%E7%BB%8D%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%92%8C%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E5%BA%93/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/23__%E6%95%B0%E5%AD%97%E8%AE%A1%E7%AE%97%E4%BB%8B%E7%BB%8D%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%92%8C%E6%95%B0%E5%80%BC%E8%AE%A1%E7%AE%97%E5%BA%93/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;科学计算在今天已经完全可以使用 C++ 了。我不是从事科学计算这一领域的工作的，不过，在工作中也多多少少接触到了一些计算相关的库。今天，我就给你介绍几个有用的计算库。&lt;/p&gt;</description>
    </item>
    <item>
      <title>24__Boost：你需要的“瑞士军刀”</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/24__boost%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9A%84%E7%91%9E%E5%A3%AB%E5%86%9B%E5%88%80/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/24__boost%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9A%84%E7%91%9E%E5%A3%AB%E5%86%9B%E5%88%80/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;我们已经零零碎碎提到过几次 Boost 了。作为 C++ 世界里标准库之外最知名的开放源码程序库，我们值得专门用一讲来讨论一下 Boost。&lt;/p&gt;&#xA;&lt;h2 id=&#34;boost-概览&#34;&gt;Boost 概览&lt;/h2&gt;&#xA;&lt;p&gt;Boost 的网站把 Boost 描述成为经过同行评审的、可移植的 C++ 源码库（peer-reviewed portable C++ source libraries）[1]。换句话说，它跟很多个人开源库不一样的地方在于，它的代码是经过评审的。事实上，Boost 项目的背后有很多 C++ 专家，比如发起人之一的 Dave Abarahams 是 C++ 标准委员会的成员，也是《C++ 模板元编程》一书 [2] 的作者。这也就使得 Boost 有了很不一样的特殊地位：它既是 C++ 标准库的灵感来源之一，也是 C++ 标准库的试验田。下面这些 C++ 标准库就源自 Boost：&lt;/p&gt;</description>
    </item>
    <item>
      <title>25__两个单元测试库：C&#43;&#43;里如何进行单元测试_</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/25__%E4%B8%A4%E4%B8%AA%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%BA%93c&#43;&#43;%E9%87%8C%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95_/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/25__%E4%B8%A4%E4%B8%AA%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%BA%93c&#43;&#43;%E9%87%8C%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95_/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;单元测试已经越来越成为程序员工作密不可分的一部分了。在 C++ 里，我们当然也是可以很方便地进行单元测试的。今天，我就来介绍两个单元测试库：一个是 Boost.Test [1]，一个是 Catch2 [2]。&lt;/p&gt;</description>
    </item>
    <item>
      <title>26__Easylogging&#43;&#43;和spdlog：两个好用的日志库</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/26__easylogging&#43;&#43;%E5%92%8Cspdlog%E4%B8%A4%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E6%97%A5%E5%BF%97%E5%BA%93/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/26__easylogging&#43;&#43;%E5%92%8Cspdlog%E4%B8%A4%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E6%97%A5%E5%BF%97%E5%BA%93/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;上一讲正文我介绍了两个可以在 C++ 中进行单元测试的库。今天，类似的，我介绍两个实用的日志库，分别是 Easylogging++ [1] 和 spdlog [2]。&lt;/p&gt;&#xA;&lt;h2 id=&#34;easylogging&#34;&gt;Easylogging++&lt;/h2&gt;&#xA;&lt;p&gt;事实上，我本来想只介绍 Easylogging++ 的。但在检查其 GitHub 页面时，我发现了一个问题：它在 2019 年基本没有更新，且目前上报的问题也没有人处理。这是个潜在问题，除非你觉得这个库好到愿意自己动手修问题（话说回来，这个库还是不错的，我在这个项目贡献了 8 个被合并的 pull request）。不管怎样，原先说了要介绍这个库，所以我也还是介绍一下。&lt;/p&gt;</description>
    </item>
    <item>
      <title>27__C&#43;&#43;_REST_SDK：使用现代C&#43;&#43;开发网络应用</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/27__c&#43;&#43;_rest_sdk%E4%BD%BF%E7%94%A8%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%BC%80%E5%8F%91%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/27__c&#43;&#43;_rest_sdk%E4%BD%BF%E7%94%A8%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%BC%80%E5%8F%91%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;在实战篇，我们最后要讲解的一个库是 C++ REST SDK（也写作 cpprestsdk）[1]，一个支持 HTTP 协议 [2]、主要用于 RESTful [3] 接口开发的 C++ 库。&lt;/p&gt;</description>
    </item>
    <item>
      <title>28__Concepts：如何对模板进行约束_</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/28__concepts%E5%A6%82%E4%BD%95%E5%AF%B9%E6%A8%A1%E6%9D%BF%E8%BF%9B%E8%A1%8C%E7%BA%A6%E6%9D%9F_/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/28__concepts%E5%A6%82%E4%BD%95%E5%AF%B9%E6%A8%A1%E6%9D%BF%E8%BF%9B%E8%A1%8C%E7%BA%A6%E6%9D%9F_/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;从这一讲开始，我们进入了未来篇，展望一下即将在 C++20 出现的新功能。我们第一个要讨论的，是 concepts（概念）——一个难产了很多年才终于进入 C++ 的新功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>29__Ranges：无迭代器的迭代和更方便的组合</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/29__ranges%E6%97%A0%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%92%8C%E6%9B%B4%E6%96%B9%E4%BE%BF%E7%9A%84%E7%BB%84%E5%90%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/29__ranges%E6%97%A0%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E8%BF%AD%E4%BB%A3%E5%92%8C%E6%9B%B4%E6%96%B9%E4%BE%BF%E7%9A%84%E7%BB%84%E5%90%88/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;今天，我们继续上一讲开始的话题，讨论 ranges（范围）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ranges-简介&#34;&gt;Ranges 简介&lt;/h2&gt;&#xA;&lt;p&gt;像下面这样的代码：&lt;/p&gt;&#xA;&lt;p&gt;#include &lt;algorithm&gt;&lt;br&gt;&#xA;#include &lt;iostream&gt;&lt;br&gt;&#xA;#include &lt;iterator&gt;&lt;/p&gt;&#xA;&lt;p&gt;int main()&lt;br&gt;&#xA;{&lt;br&gt;&#xA;using namespace std;&lt;br&gt;&#xA;int a[] = {1, 7, 3, 6,&lt;br&gt;&#xA;5, 2, 4, 8};&lt;br&gt;&#xA;copy(begin(a), end(a),&lt;br&gt;&#xA;ostream_iterator&lt;int&gt;(&lt;br&gt;&#xA;std::cout, &amp;quot; &amp;ldquo;));&lt;br&gt;&#xA;std::cout &amp;laquo; std::endl;&lt;br&gt;&#xA;sort(begin(a), end(a));&lt;br&gt;&#xA;copy(begin(a), end(a),&lt;br&gt;&#xA;ostream_iterator&lt;int&gt;(&lt;br&gt;&#xA;std::cout, &amp;quot; &amp;ldquo;));&lt;br&gt;&#xA;std::cout &amp;laquo; std::endl;&lt;br&gt;&#xA;}&lt;/p&gt;</description>
    </item>
    <item>
      <title>30__Coroutines：协作式的交叉调度执行</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/30__coroutines%E5%8D%8F%E4%BD%9C%E5%BC%8F%E7%9A%84%E4%BA%A4%E5%8F%89%E8%B0%83%E5%BA%A6%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/30__coroutines%E5%8D%8F%E4%BD%9C%E5%BC%8F%E7%9A%84%E4%BA%A4%E5%8F%89%E8%B0%83%E5%BA%A6%E6%89%A7%E8%A1%8C/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;今天是我们未来篇的最后一讲，也是这个专栏正文内容的最后一篇了。我们讨论 C++20 里的又一个非常重要的新功能——协程 Coroutines。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是协程&#34;&gt;什么是协程？&lt;/h2&gt;&#xA;&lt;p&gt;协程是一个很早就被提出的编程概念。根据高德纳的描述，协程的概念在 1958 年就被提出了。不过，它在主流编程语言中得到的支持不那么好，因而你很可能对它并不熟悉吧。&lt;/p&gt;</description>
    </item>
    <item>
      <title>加餐__部分课后思考题答案合集</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/%E5%8A%A0%E9%A4%90__%E9%83%A8%E5%88%86%E8%AF%BE%E5%90%8E%E6%80%9D%E8%80%83%E9%A2%98%E7%AD%94%E6%A1%88%E5%90%88%E9%9B%86/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/%E5%8A%A0%E9%A4%90__%E9%83%A8%E5%88%86%E8%AF%BE%E5%90%8E%E6%80%9D%E8%80%83%E9%A2%98%E7%AD%94%E6%A1%88%E5%90%88%E9%9B%86/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。这一讲我为你整理了本专栏部分课后思考题的答案，给你作为参考。&lt;/p&gt;&#xA;&lt;h2 id=&#34;第-2-讲&#34;&gt;第 2 讲&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;你觉得智能指针应该满足什么样的线程安全性？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;答：（不是真正的回答，只是描述一下标准中的智能指针的线程安全性。）&lt;/p&gt;</description>
    </item>
    <item>
      <title>结束语__终点已达，行程还要继续</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/%E7%BB%93%E6%9D%9F%E8%AF%AD__%E7%BB%88%E7%82%B9%E5%B7%B2%E8%BE%BE%E8%A1%8C%E7%A8%8B%E8%BF%98%E8%A6%81%E7%BB%A7%E7%BB%AD/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/%E7%BB%93%E6%9D%9F%E8%AF%AD__%E7%BB%88%E7%82%B9%E5%B7%B2%E8%BE%BE%E8%A1%8C%E7%A8%8B%E8%BF%98%E8%A6%81%E7%BB%A7%E7%BB%AD/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;从去年八月底极客时间第一次找我到现在，一眨眼居然差不多半年了，时间过得也真是飞快。终于结束了这段旅程，感到轻松，感到欣然，也感到有丝丝遗憾。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开篇词__C&#43;&#43;这么难，为什么我们还要用C&#43;&#43;？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/%E5%BC%80%E7%AF%87%E8%AF%8D__c&#43;&#43;%E8%BF%99%E4%B9%88%E9%9A%BE%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E8%BF%98%E8%A6%81%E7%94%A8c&#43;&#43;/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/%E5%BC%80%E7%AF%87%E8%AF%8D__c&#43;&#43;%E8%BF%99%E4%B9%88%E9%9A%BE%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E8%BF%98%E8%A6%81%E7%94%A8c&#43;&#43;/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;C++ 可算是一种声名在外的编程语言了。这个名声有好有坏，从好的方面讲，C++ 性能非常好，哪个编程语言性能好的话，总忍不住要跟 C++ 来单挑一下；从坏的方面讲，它是臭名昭著的复杂、难学、难用。当然，这样一来，熟练的 C++ 程序员也就自然而然获得了“水平很高”的名声，所以这也不完全是件坏事。&lt;/p&gt;</description>
    </item>
    <item>
      <title>课前必读__有关术语发音及环境要求</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/%E8%AF%BE%E5%89%8D%E5%BF%85%E8%AF%BB__%E6%9C%89%E5%85%B3%E6%9C%AF%E8%AF%AD%E5%8F%91%E9%9F%B3%E5%8F%8A%E7%8E%AF%E5%A2%83%E8%A6%81%E6%B1%82/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/%E8%AF%BE%E5%89%8D%E5%BF%85%E8%AF%BB__%E6%9C%89%E5%85%B3%E6%9C%AF%E8%AF%AD%E5%8F%91%E9%9F%B3%E5%8F%8A%E7%8E%AF%E5%A2%83%E8%A6%81%E6%B1%82/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;这一讲是课前必读，主要说明术语发音和环境要求的问题，希望能帮助你更好地学习和实践本专栏的内容。&lt;/p&gt;&#xA;&lt;h2 id=&#34;术语发音列表&#34;&gt;术语发音列表&lt;/h2&gt;&#xA;&lt;p&gt;C++ 里有些术语不是标准的英文单词。在本专栏中使用下面的发音表：&lt;/p&gt;</description>
    </item>
    <item>
      <title>新春福利__C&#43;&#43;好书荐读</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/%E6%96%B0%E6%98%A5%E7%A6%8F%E5%88%A9__c&#43;&#43;%E5%A5%BD%E4%B9%A6%E8%8D%90%E8%AF%BB/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/%E6%96%B0%E6%98%A5%E7%A6%8F%E5%88%A9__c&#43;&#43;%E5%A5%BD%E4%B9%A6%E8%8D%90%E8%AF%BB/</guid>
      <description>&lt;h2 id=&#34;写在前面&#34;&gt;写在前面&lt;/h2&gt;&#xA;&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;今天我会介绍一些我觉得好并且值得推荐的书，但我不会提供任何购买或下载链接。前者没有必要，大家应该都知道怎么搜索；后者我个人认为违反道义。这些书没有哪本是程序员买不起的。如果书作者没有提供免费下载，而市面上又买不到某本书的话，那自己偷偷找个下载渠道也情有可原——但也请你不要分享出来、告诉我或者其他人。即使你认为以后别人复制你的作品是完全没有问题的（事实上我很怀疑这点，除非你是个硬核的自由软件贡献者），也不等于你有权利复制别人的作品。&lt;/p&gt;</description>
    </item>
    <item>
      <title>新春寄语__35年码龄程序员：人生漫长，走点弯路在所难免</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/%E6%96%B0%E6%98%A5%E5%AF%84%E8%AF%AD__35%E5%B9%B4%E7%A0%81%E9%BE%84%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BA%BA%E7%94%9F%E6%BC%AB%E9%95%BF%E8%B5%B0%E7%82%B9%E5%BC%AF%E8%B7%AF%E5%9C%A8%E6%89%80%E9%9A%BE%E5%85%8D/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E7%8E%B0%E4%BB%A3c&#43;&#43;%E5%AE%9E%E6%88%9830%E8%AE%B2/%E6%96%B0%E6%98%A5%E5%AF%84%E8%AF%AD__35%E5%B9%B4%E7%A0%81%E9%BE%84%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BA%BA%E7%94%9F%E6%BC%AB%E9%95%BF%E8%B5%B0%E7%82%B9%E5%BC%AF%E8%B7%AF%E5%9C%A8%E6%89%80%E9%9A%BE%E5%85%8D/</guid>
      <description>&lt;p&gt;你好，我是吴咏炜。&lt;/p&gt;&#xA;&lt;p&gt;当你读到这一讲的时候，新年已经要来临了。今天，我们就轻松点，不讲硬核的话题了。我们就一起闲聊一下如何学习编程。&lt;/p&gt;&#xA;&lt;h2 id=&#34;我的编程生涯&#34;&gt;我的编程生涯&lt;/h2&gt;&#xA;&lt;p&gt;我学习编程在我的那一代人里算是比较早的。那时候已经有了“学电脑要从娃娃抓起”的说法，所以初一时老师就给我们介绍了什么是电脑：我第一次见到的是一台 Z80 芯片的 Laser 200，连接在一台单色显示器上，有着集成的键盘，ROM 里装载着 BASIC 语言解释器，有 4 KB 内存（你没有看错单位），没有磁盘、鼠标这些我们熟悉的外设，但可以连磁带机，还可以做比计算器更复杂的计算工作！&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
