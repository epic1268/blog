<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>图解GoogleV8 on Docs</title>
    <link>https://politcloud.org/tags/%E5%9B%BE%E8%A7%A3googlev8/</link>
    <description>Recent content in 图解GoogleV8 on Docs</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 10 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://politcloud.org/tags/%E5%9B%BE%E8%A7%A3googlev8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01__V8是如何执行一段JavaScript代码的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/01__v8%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AE%B5javascript%E4%BB%A3%E7%A0%81%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/01__v8%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AE%B5javascript%E4%BB%A3%E7%A0%81%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;今天是我们整个课程的第一讲，我会从一个高层的宏观视角来解释什么是 V8，以及 V8 又是怎么执行一段 JavaScript 代码的。在这个过程中，我会引入一些核心概念，诸如 JIT、作用域、词法环境、执行上下文等，理解了这些概念，能够帮助你更好地理解 V8 是如何工作的，同时也能帮助你写出更加高效的 JavaScript 代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>02__函数即对象：一篇文章彻底搞懂JavaScript的函数特点</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/02__%E5%87%BD%E6%95%B0%E5%8D%B3%E5%AF%B9%E8%B1%A1%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82javascript%E7%9A%84%E5%87%BD%E6%95%B0%E7%89%B9%E7%82%B9/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/02__%E5%87%BD%E6%95%B0%E5%8D%B3%E5%AF%B9%E8%B1%A1%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82javascript%E7%9A%84%E5%87%BD%E6%95%B0%E7%89%B9%E7%82%B9/</guid>
      <description>&lt;p&gt;你好，我是李兵。这是我们专栏的第二讲，我们来看下“函数是一等公民”背后的含义。&lt;/p&gt;&#xA;&lt;p&gt;如果你熟悉了一门其他流行语言，再来使用 JavaScript，那么 JavaScript 中的函数可能会给你造成一些误解，比如在 JavaScript 中，你可以将一个函数赋值给一个变量，还可以将函数作为一个参数传递给另外一个函数，甚至可以使得一个函数返回另外一个函数，这在一些主流语言中都很难实现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>03｜快属性和慢属性：V8采用了哪些策略提升了对象属性的访问速度？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/03%E5%BF%AB%E5%B1%9E%E6%80%A7%E5%92%8C%E6%85%A2%E5%B1%9E%E6%80%A7v8%E9%87%87%E7%94%A8%E4%BA%86%E5%93%AA%E4%BA%9B%E7%AD%96%E7%95%A5%E6%8F%90%E5%8D%87%E4%BA%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/03%E5%BF%AB%E5%B1%9E%E6%80%A7%E5%92%8C%E6%85%A2%E5%B1%9E%E6%80%A7v8%E9%87%87%E7%94%A8%E4%BA%86%E5%93%AA%E4%BA%9B%E7%AD%96%E7%95%A5%E6%8F%90%E5%8D%87%E4%BA%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;在前面的课程中，我们介绍了 JavaScript 中的对象是由一组组属性和值的集合，从 JavaScript 语言的角度来看，JavaScript 对象像一个字典，字符串作为键名，任意对象可以作为键值，可以通过键名读写键值。&lt;/p&gt;</description>
    </item>
    <item>
      <title>04__函数表达式：涉及大量概念，函数表达式到底该怎么学？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/04__%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B6%89%E5%8F%8A%E5%A4%A7%E9%87%8F%E6%A6%82%E5%BF%B5%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0%E5%BA%95%E8%AF%A5%E6%80%8E%E4%B9%88%E5%AD%A6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/04__%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B6%89%E5%8F%8A%E5%A4%A7%E9%87%8F%E6%A6%82%E5%BF%B5%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%B0%E5%BA%95%E8%AF%A5%E6%80%8E%E4%B9%88%E5%AD%A6/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;前面几节我们聊了 V8 中的对象和函数，并介绍了函数为什么会被称为是一等公民，了解这些之后，我们就可以来学习函数表达式了。&lt;/p&gt;&#xA;&lt;p&gt;函数表达式在 JavaScript 中非常基础也非常重要，使用函数表达式可以用来实现代码隐藏，还可以实现变量隔离，所以函数表达式被广泛地应用在各个项目中，了解函数表达式的底层工作机制，可以帮助我们更加深刻地理解项目。&lt;/p&gt;</description>
    </item>
    <item>
      <title>05｜原型链_V8是如何实现对象继承的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/05%E5%8E%9F%E5%9E%8B%E9%93%BE_v8%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/05%E5%8E%9F%E5%9E%8B%E9%93%BE_v8%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E7%BB%A7%E6%89%BF%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;在前面两节中，我们分析了什么是 JavaScript 中的对象，以及 V8 内部是怎么存储对象的，本节我们继续深入学习对象，一起来聊聊 V8 是如何实现 JavaScript 中对象继承的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>06｜作用域链：V8是如何查找变量的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/06%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BEv8%E6%98%AF%E5%A6%82%E4%BD%95%E6%9F%A5%E6%89%BE%E5%8F%98%E9%87%8F%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/06%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BEv8%E6%98%AF%E5%A6%82%E4%BD%95%E6%9F%A5%E6%89%BE%E5%8F%98%E9%87%8F%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;在前面我们介绍了 JavaScript 的继承是基于原型链的，原型链将一个个原型对象串起来，从而实现对象属性的查找，今天我们要聊一个和原型链类似的话题，那就是作用域链。&lt;/p&gt;</description>
    </item>
    <item>
      <title>07｜类型转换：V8是怎么实现1&#43;“2”的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/07%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2v8%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B01&#43;2%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/07%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2v8%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B01&#43;2%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;前面我们花了很多篇幅聊了 JavaScript 中最基础却很容易被忽略的“对象”，以及 V8 是怎么处理“对象”的，今天我们继续来聊另一个非常基础，同时也是很容易被大家忽略的问题，那就是 JavaScript 中的“类型系统”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>08｜答疑：如何构建和使用V8的调试工具d8？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/08%E7%AD%94%E7%96%91%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8v8%E7%9A%84%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7d8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/08%E7%AD%94%E7%96%91%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E5%92%8C%E4%BD%BF%E7%94%A8v8%E7%9A%84%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7d8/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;今天是我们第一单元的答疑环节，课后有很多同学留言问我关于 d8 的问题，所以今天我们就来专门讲讲，如何构建和使用 V8 的调试工具 d8。&lt;/p&gt;&#xA;&lt;p&gt;d8 是一个非常有用的调试工具，你可以把它看成是 debug for V8 的缩写。我们可以使用 d8 来查看 V8 在执行 JavaScript 过程中的各种中间数据，比如作用域、AST、字节码、优化的二进制代码、垃圾回收的状态，还可以使用 d8 提供的私有 API 查看一些内部信息。&lt;/p&gt;</description>
    </item>
    <item>
      <title>09__运行时环境：运行JavaScript代码的基石</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/09__%E8%BF%90%E8%A1%8C%E6%97%B6%E7%8E%AF%E5%A2%83%E8%BF%90%E8%A1%8Cjavascript%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9F%BA%E7%9F%B3/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/09__%E8%BF%90%E8%A1%8C%E6%97%B6%E7%8E%AF%E5%A2%83%E8%BF%90%E8%A1%8Cjavascript%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9F%BA%E7%9F%B3/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;通过前面几节课的学习，我们理解了 JavaScript 是一门基于对象的语言，它能实现非常多的特性，诸如函数是一等公民、闭包、函数式编程、原型继承等，搞懂了这些特性，我们就可以来打开 V8 这个黑盒，深入了解它的编译流水线了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>10__机器代码：二进制机器码究竟是如何被CPU执行的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/10__%E6%9C%BA%E5%99%A8%E4%BB%A3%E7%A0%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%9C%BA%E5%99%A8%E7%A0%81%E7%A9%B6%E7%AB%9F%E6%98%AF%E5%A6%82%E4%BD%95%E8%A2%ABcpu%E6%89%A7%E8%A1%8C%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/10__%E6%9C%BA%E5%99%A8%E4%BB%A3%E7%A0%81%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%9C%BA%E5%99%A8%E7%A0%81%E7%A9%B6%E7%AB%9F%E6%98%AF%E5%A6%82%E4%BD%95%E8%A2%ABcpu%E6%89%A7%E8%A1%8C%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;在上一节我们分析了 V8 的运行时环境，准备好了运行时环境，V8 就可以执行 JavaScript 代码了。在执行代码时，V8 需要先将 JavaScript 编译成字节码，然后再解释执行字节码，或者将需要优化的字节码编译成二进制，并直接执行二进制代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>11__堆和栈：函数调用是如何影响到内存布局的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/11__%E5%A0%86%E5%92%8C%E6%A0%88%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%BD%B1%E5%93%8D%E5%88%B0%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/11__%E5%A0%86%E5%92%8C%E6%A0%88%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%BD%B1%E5%93%8D%E5%88%B0%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;相信你在使用 JavaScript 的过程中，经常会遇到栈溢出的错误，比如执行下面这样一段代码：&lt;/p&gt;&#xA;&lt;p&gt;function foo() {&lt;br&gt;&#xA;foo() // 是否存在堆栈溢出错误？&lt;br&gt;&#xA;}&lt;br&gt;&#xA;foo()&lt;/p&gt;&#xA;&lt;p&gt;V8 就会报告&lt;strong&gt;栈溢出&lt;/strong&gt;的错误，为了解决栈溢出的问题，我们可以在 foo 函数内部使用 setTimeout 来触发 foo 函数的调用，改造之后的程序就可以正确执行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>12__延迟解析：V8是如何实现闭包的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/12__%E5%BB%B6%E8%BF%9F%E8%A7%A3%E6%9E%90v8%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%97%AD%E5%8C%85%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/12__%E5%BB%B6%E8%BF%9F%E8%A7%A3%E6%9E%90v8%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%97%AD%E5%8C%85%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;在第一节我们介绍过 V8 执行 JavaScript 代码，需要经过&lt;strong&gt;编译&lt;/strong&gt;和&lt;strong&gt;执行&lt;/strong&gt;两个阶段，其中&lt;strong&gt;编译过程&lt;/strong&gt;是指 V8 将 JavaScript 代码转换为字节码或者二进制机器代码的阶段，而执行阶段则是指解释器解释执行字节码，或者是 CPU 直接执行二进制机器代码的阶段。总的流程你可以参看下图：&lt;/p&gt;</description>
    </item>
    <item>
      <title>121-图解_Google_V8</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/121-%E5%9B%BE%E8%A7%A3_google_v8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/121-%E5%9B%BE%E8%A7%A3_google_v8/</guid>
      <description></description>
    </item>
    <item>
      <title>13__字节码（一）：V8为什么又重新引入字节码？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/13__%E5%AD%97%E8%8A%82%E7%A0%81%E4%B8%80v8%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%88%E9%87%8D%E6%96%B0%E5%BC%95%E5%85%A5%E5%AD%97%E8%8A%82%E7%A0%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/13__%E5%AD%97%E8%8A%82%E7%A0%81%E4%B8%80v8%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%88%E9%87%8D%E6%96%B0%E5%BC%95%E5%85%A5%E5%AD%97%E8%8A%82%E7%A0%81/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;在第一节课我们就介绍了 V8 的编译流水线，我们知道 V8 在执行一段 JavaScript 代码之前，需要将其编译为字节码，然后再解释执行字节码或者将字节码编译为二进制代码然后再执行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>14｜字节码（二）：解释器是如何解释执行字节码的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/14%E5%AD%97%E8%8A%82%E7%A0%81%E4%BA%8C%E8%A7%A3%E9%87%8A%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/14%E5%AD%97%E8%8A%82%E7%A0%81%E4%BA%8C%E8%A7%A3%E9%87%8A%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C%E5%AD%97%E8%8A%82%E7%A0%81%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;在上节我们介绍了 V8 为什么要引入字节码，这节课我们来聊聊解释器是如何解释执行字节码的。学习字节码如何被执行，可以让我们理解解释器的工作机制，同时还能帮助我们搞懂 JavaScript 运行时的内存结构，特别是闭包的结构和非闭包数据的区别。&lt;/p&gt;</description>
    </item>
    <item>
      <title>15__隐藏类：如何在内存中快速查找对象属性？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/15__%E9%9A%90%E8%97%8F%E7%B1%BB%E5%A6%82%E4%BD%95%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/15__%E9%9A%90%E8%97%8F%E7%B1%BB%E5%A6%82%E4%BD%95%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;我们知道 JavaScript 是一门动态语言，其执行效率要低于静态语言，V8 为了提升 JavaScript 的执行速度，借鉴了很多静态语言的特性，比如实现了 JIT 机制，为了提升对象的属性访问速度而引入了隐藏类，为了加速运算而引入了内联缓存。&lt;/p&gt;</description>
    </item>
    <item>
      <title>16__答疑：_V8是怎么通过内联缓存来提升函数执行效率的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/16__%E7%AD%94%E7%96%91_v8%E6%98%AF%E6%80%8E%E4%B9%88%E9%80%9A%E8%BF%87%E5%86%85%E8%81%94%E7%BC%93%E5%AD%98%E6%9D%A5%E6%8F%90%E5%8D%87%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E6%95%88%E7%8E%87%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/16__%E7%AD%94%E7%96%91_v8%E6%98%AF%E6%80%8E%E4%B9%88%E9%80%9A%E8%BF%87%E5%86%85%E8%81%94%E7%BC%93%E5%AD%98%E6%9D%A5%E6%8F%90%E5%8D%87%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E6%95%88%E7%8E%87%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;上节我们留了个思考题，提到了一段代码是这样的：&lt;/p&gt;&#xA;&lt;p&gt;function loadX(o) {&lt;br&gt;&#xA;return o.x&lt;br&gt;&#xA;}&lt;br&gt;&#xA;var o = { x: 1,y:3}&lt;br&gt;&#xA;var o1 = { x: 3 ,y:6}&lt;br&gt;&#xA;for (var i = 0; i &amp;lt; 90000; i++) {&lt;br&gt;&#xA;loadX(o)&lt;br&gt;&#xA;loadX(o1)&lt;br&gt;&#xA;}&lt;/p&gt;&#xA;&lt;p&gt;我们定义了一个 loadX 函数，它有一个参数 o，该函数只是返回了 o.x。&lt;/p&gt;</description>
    </item>
    <item>
      <title>17__消息队列：V8是怎么实现回调函数的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/17__%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97v8%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/17__%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97v8%E6%98%AF%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;我们在使用 JavaScript 时，经常要用到大量的回调函数，比如在浏览器中可以使用 setTimeout 来设置定时器，使用 XMLHTTPRequest 来异步下载资源文件，在 Node 中可以使用 readFile 来读取文件，这些操作都有一个共同的特点，那就是需要给调用 API 传入回调函数，然后浏览器或者 Node 会将执行处理的结果通过回调函数来触发。&lt;/p&gt;</description>
    </item>
    <item>
      <title>18__异步编程（一）：V8是如何实现微任务的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/18__%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E4%B8%80v8%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BB%BB%E5%8A%A1%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/18__%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E4%B8%80v8%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BE%AE%E4%BB%BB%E5%8A%A1%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;上节我们介绍了通用的 UI 线程架构，每个 UI 线程都拥有一个消息队列，所有的待执行的事件都会被添加进消息队列中，UI 线程会按照一定规则，循环地取出消息队列中的事件，并执行事件。而 JavaScript 最初也是运行在 UI 线程中的。换句话说，JavaScript 语言就是基于这套通用的 UI 线程架构而设计的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>19｜异步编程（二）：V8是如何实现async_await的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/19%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E4%BA%8Cv8%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0async_await%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/19%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E4%BA%8Cv8%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0async_await%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;上一节我们介绍了 JavaScript 是基于单线程设计的，最终造成了 JavaScript 中出现大量回调的场景。当 JavaScript 中有大量的异步操作时，会降低代码的可读性，其中最容易造成的就是回调地狱的问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>20__垃圾回收（一）：V8的两个垃圾回收器是如何工作的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/20__%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%80v8%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/20__%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%80v8%E7%9A%84%E4%B8%A4%E4%B8%AA%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;我们都知道，JavaScript 是一门自动垃圾回收的语言，也就是说，我们不需要去手动回收垃圾数据，这一切都交给 V8 的垃圾回收器来完成。V8 为了更高效地回收垃圾，引入了两个垃圾回收器，它们分别针对着不同的场景。&lt;/p&gt;</description>
    </item>
    <item>
      <title>21__垃圾回收（二）：V8是如何优化垃圾回收器执行效率的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/21__%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%BA%8Cv8%E6%98%AF%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E6%89%A7%E8%A1%8C%E6%95%88%E7%8E%87%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/21__%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%BA%8Cv8%E6%98%AF%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8%E6%89%A7%E8%A1%8C%E6%95%88%E7%8E%87%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;上节我们介绍了 V8 使用副垃圾回收器和主垃圾回收器来处理垃圾回收，这节课我们看看 V8 是如何优化垃圾回收器的执行效率的。&lt;/p&gt;&#xA;&lt;p&gt;由于 JavaScript 是运行在主线程之上的，因此，一旦执行垃圾回收算法，都需要将正在执行的 JavaScript 脚本暂停下来，待垃圾回收完毕后再恢复脚本执行。我们把这种行为叫做&lt;strong&gt;全停顿（Stop-The-World）&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>22｜答疑：几种常见内存问题的解决策略</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/22%E7%AD%94%E7%96%91%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E7%AD%96%E7%95%A5/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/22%E7%AD%94%E7%96%91%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E7%AD%96%E7%95%A5/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;这是我们“事件循环和垃圾回收”这个模块的最后一讲。在这个模块中，我们讲了消息循环系统和垃圾回收机制，这两块内容涉及到了比较底层的知识，但是这些知识对实际的项目有着非常重要的指导作用，很多同学也比较关注这两部分内容。&lt;/p&gt;</description>
    </item>
    <item>
      <title>结束语__我的前端学习踩坑史</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/%E7%BB%93%E6%9D%9F%E8%AF%AD__%E6%88%91%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B8%A9%E5%9D%91%E5%8F%B2/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/%E7%BB%93%E6%9D%9F%E8%AF%AD__%E6%88%91%E7%9A%84%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E8%B8%A9%E5%9D%91%E5%8F%B2/</guid>
      <description>&lt;p&gt;你好，我是李兵。&lt;/p&gt;&#xA;&lt;p&gt;这是我们这个系列课程的最后一讲，今天我们不谈技术，我想跟你聊聊这么多年我学习前端踩过的一些坑和学习心得。&lt;/p&gt;&#xA;&lt;p&gt;其实我早些年主要是做 C/C++ 开发的，到了 2009 年，接触到了浏览器研发，这个时候我对前端并不是太熟悉，但是在开发浏览器的过程中，需要了解大量的前端知识。我当时的学习策略是，只有当遇到了与前端有关的问题时，才会去学习相应的知识来解决。这样做本意是想要节省时间，结果却反而让我花费了更多不必要的时间。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开篇词__如何学习谷歌高性能_JavaScript_引擎V8？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/%E5%BC%80%E7%AF%87%E8%AF%8D__%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E8%B0%B7%E6%AD%8C%E9%AB%98%E6%80%A7%E8%83%BD_javascript_%E5%BC%95%E6%93%8Ev8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%9B%BE%E8%A7%A3googlev8/%E5%BC%80%E7%AF%87%E8%AF%8D__%E5%A6%82%E4%BD%95%E5%AD%A6%E4%B9%A0%E8%B0%B7%E6%AD%8C%E9%AB%98%E6%80%A7%E8%83%BD_javascript_%E5%BC%95%E6%93%8Ev8/</guid>
      <description>&lt;p&gt;你好，我是李兵，《浏览器工作原理与实践》专栏的作者。在浏览器专栏中，我们对浏览器的工作原理进行了详细的介绍，其中也提到了 V8 是如何执行 JavaScript 代码的。很多朋友对这部分的学习意犹未尽，因此我又回到了极客时间，与你深入聊聊 V8。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
