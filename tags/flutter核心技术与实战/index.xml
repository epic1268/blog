<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flutter核心技术与实战 on Docs</title>
    <link>https://politcloud.org/tags/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/</link>
    <description>Recent content in Flutter核心技术与实战 on Docs</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 10 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://politcloud.org/tags/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>02__预习篇_·_Dart语言概览</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/02__%E9%A2%84%E4%B9%A0%E7%AF%87__dart%E8%AF%AD%E8%A8%80%E6%A6%82%E8%A7%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/02__%E9%A2%84%E4%B9%A0%E7%AF%87__dart%E8%AF%AD%E8%A8%80%E6%A6%82%E8%A7%88/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;我们知道，Flutter 开发框架采用的开发语言是 Dart，所以要用好这个框架，我们必须要搞清楚 Dart 语言。&lt;/p&gt;&#xA;&lt;p&gt;关于新技术的学习，一直以来我都非常认同一个观点：千万不要直接陷入细节里，你应该先鸟瞰其全貌，这样才能从高维度理解问题。所以，为了帮助你更高效地掌握 Dart，以最快的速度具备开发一款 Flutter 应用的能力，今天这篇文章，我会先从 Flutter 开发的角度，和你介绍 Dart 语言出现的历史背景、特性以及未来。&lt;/p&gt;</description>
    </item>
    <item>
      <title>03__深入理解跨平台方案的历史发展逻辑</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/03__%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%96%B9%E6%A1%88%E7%9A%84%E5%8E%86%E5%8F%B2%E5%8F%91%E5%B1%95%E9%80%BB%E8%BE%91/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/03__%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%96%B9%E6%A1%88%E7%9A%84%E5%8E%86%E5%8F%B2%E5%8F%91%E5%B1%95%E9%80%BB%E8%BE%91/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;今天，我会从跨平台开发方案的诞生背景、原理和发展历史的角度，和你聊聊这些常见的开发方案，以及针对不同的场景我们应该如何选择对应的方案。&lt;/p&gt;</description>
    </item>
    <item>
      <title>04__Flutter区别于其他方案的关键技术是什么？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/04__flutter%E5%8C%BA%E5%88%AB%E4%BA%8E%E5%85%B6%E4%BB%96%E6%96%B9%E6%A1%88%E7%9A%84%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/04__flutter%E5%8C%BA%E5%88%AB%E4%BA%8E%E5%85%B6%E4%BB%96%E6%96%B9%E6%A1%88%E7%9A%84%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;Flutter 是什么？它出现的动机是什么，解决了哪些痛点？相比其他跨平台技术，Flutter 的优势在哪里？……相信很多人在第一眼看到 Flutter 时，都会有类似的疑问。&lt;/p&gt;</description>
    </item>
    <item>
      <title>05__从标准模板入手，体会Flutter代码是如何运行在原生系统上的</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/05__%E4%BB%8E%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%85%A5%E6%89%8B%E4%BD%93%E4%BC%9Aflutter%E4%BB%A3%E7%A0%81%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E5%9C%A8%E5%8E%9F%E7%94%9F%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/05__%E4%BB%8E%E6%A0%87%E5%87%86%E6%A8%A1%E6%9D%BF%E5%85%A5%E6%89%8B%E4%BD%93%E4%BC%9Aflutter%E4%BB%A3%E7%A0%81%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C%E5%9C%A8%E5%8E%9F%E7%94%9F%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在专栏的第一篇预习文章中，我和你一起搭建了 Flutter 的开发环境，并且通过自带的 hello_world 示例，和你演示了 Flutter 项目是如何运行在 Android 和 iOS 模拟器以及真机上的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>06__基础语法与类型变量：Dart是如何表示信息的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/06__%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B8%8E%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8Fdart%E6%98%AF%E5%A6%82%E4%BD%95%E8%A1%A8%E7%A4%BA%E4%BF%A1%E6%81%AF%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/06__%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E4%B8%8E%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8Fdart%E6%98%AF%E5%A6%82%E4%BD%95%E8%A1%A8%E7%A4%BA%E4%BF%A1%E6%81%AF%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在专栏的第 2 篇预习文章“&lt;a href=&#34;./104071.md&#34;&gt;Dart 语言概览&lt;/a&gt;”中，我们简单地认识了 Dart 这门优秀的程序语言。那么，Dart 与其他语言究竟有什么不同呢？在已有其他编程语言经验的基础上，我又如何快速上手呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>07__函数、类与运算符：Dart是如何处理信息的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/07__%E5%87%BD%E6%95%B0%E7%B1%BB%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6dart%E6%98%AF%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E4%BF%A1%E6%81%AF%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/07__%E5%87%BD%E6%95%B0%E7%B1%BB%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6dart%E6%98%AF%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E4%BF%A1%E6%81%AF%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我通过一个基本 hello word 的示例，带你体验了 Dart 的基础语法与类型变量，并与其他编程语言的特性进行对比，希望可以帮助你快速建立起对 Dart 的初步印象。&lt;/p&gt;</description>
    </item>
    <item>
      <title>08__综合案例：掌握Dart核心特性</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/08__%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%E6%8E%8C%E6%8F%A1dart%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/08__%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%E6%8E%8C%E6%8F%A1dart%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在前两篇文章中，我首先与你一起学习了 Dart 程序的基本结构和语法，认识了 Dart 语言世界的基本构成要素，也就是类型系统，以及它们是怎么表示信息的。然后，我带你学习了 Dart 面向对象设计的基本思路，知道了函数、类与运算符这些其他编程语言中常见的概念，在 Dart 中的差异及典型用法，理解了 Dart 是怎么处理信息的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>09__Widget，构建Flutter界面的基石</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/09__widget%E6%9E%84%E5%BB%BAflutter%E7%95%8C%E9%9D%A2%E7%9A%84%E5%9F%BA%E7%9F%B3/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/09__widget%E6%9E%84%E5%BB%BAflutter%E7%95%8C%E9%9D%A2%E7%9A%84%E5%9F%BA%E7%9F%B3/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在前面的 Flutter 开发起步和 Dart 基础模块中，我和你一起学习了 Flutter 框架的整体架构与基本原理，分析了 Flutter 的项目结构和运行机制，并从 Flutter 开发角度介绍了 Dart 语言的基本设计思路，也通过和其他高级语言的类比深入认识了 Dart 的语法特性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>10__Widget中的State到底是什么？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/10__widget%E4%B8%AD%E7%9A%84state%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/10__widget%E4%B8%AD%E7%9A%84state%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;通过上一篇文章，我们已经深入理解了 Widget 是 Flutter 构建界面的基石，也认识了 Widget、Element、RenderObject 是如何互相配合，实现图形渲染工作的。Flutter 在底层做了大量的渲染优化工作，使得我们只需要通过组合、嵌套不同类型的 Widget，就可以构建出任意功能、任意复杂度的界面。&lt;/p&gt;</description>
    </item>
    <item>
      <title>11__提到生命周期，我们是在说什么？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/11__%E6%8F%90%E5%88%B0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%88%91%E4%BB%AC%E6%98%AF%E5%9C%A8%E8%AF%B4%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/11__%E6%8F%90%E5%88%B0%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%88%91%E4%BB%AC%E6%98%AF%E5%9C%A8%E8%AF%B4%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;你好，我是陈航。今天，我要和你分享的主题是 Flutter 中的生命周期是什么。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我们从常见的 StatefulWidget 的“万金油”误区出发，一起回顾了 Widget 的 UI 更新机制。&lt;/p&gt;&#xA;&lt;p&gt;通过父 Widget 初始化时传入的静态配置，StatelessWidget 就能完全控制其静态展示。而 StatefulWidget，还需要借助于 State 对象，在特定的阶段来处理用户的交互或其内部数据的变化，并体现在 UI 上。这些特定的阶段，就涵盖了一个组件从加载到卸载的全过程，即生命周期。与 iOS 的 ViewController、Android 的 Activity 一样，Flutter 中的 Widget 也存在生命周期，并且通过 State 来体现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>12__经典控件（一）：文本、图片和按钮在Flutter中怎么用？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/12__%E7%BB%8F%E5%85%B8%E6%8E%A7%E4%BB%B6%E4%B8%80%E6%96%87%E6%9C%AC%E5%9B%BE%E7%89%87%E5%92%8C%E6%8C%89%E9%92%AE%E5%9C%A8flutter%E4%B8%AD%E6%80%8E%E4%B9%88%E7%94%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/12__%E7%BB%8F%E5%85%B8%E6%8E%A7%E4%BB%B6%E4%B8%80%E6%96%87%E6%9C%AC%E5%9B%BE%E7%89%87%E5%92%8C%E6%8C%89%E9%92%AE%E5%9C%A8flutter%E4%B8%AD%E6%80%8E%E4%B9%88%E7%94%A8/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我与你介绍了 Widget 生命周期的实际承载者 State，并详细介绍了初始化、状态更新与控件销毁，这 3 个不同阶段所涉及的关键方法调用顺序。深入理解视图从加载到构建再到销毁的过程，可以帮助你理解如何根据视图的状态在合适的时机做恰当的事情。&lt;/p&gt;</description>
    </item>
    <item>
      <title>13__经典控件（二）：UITableView_ListView在Flutter中是什么？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/13__%E7%BB%8F%E5%85%B8%E6%8E%A7%E4%BB%B6%E4%BA%8Cuitableview_listview%E5%9C%A8flutter%E4%B8%AD%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/13__%E7%BB%8F%E5%85%B8%E6%8E%A7%E4%BB%B6%E4%BA%8Cuitableview_listview%E5%9C%A8flutter%E4%B8%AD%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我和你一起学习了文本、图片和按钮这 3 大经典组件在 Flutter 中的使用方法，以及如何在实际开发中根据不同的场景，去自定义展示样式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>14__经典布局：如何定义子控件在父容器中排版位置？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/14__%E7%BB%8F%E5%85%B8%E5%B8%83%E5%B1%80%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E5%AD%90%E6%8E%A7%E4%BB%B6%E5%9C%A8%E7%88%B6%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%8E%92%E7%89%88%E4%BD%8D%E7%BD%AE/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/14__%E7%BB%8F%E5%85%B8%E5%B8%83%E5%B1%80%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E5%AD%90%E6%8E%A7%E4%BB%B6%E5%9C%A8%E7%88%B6%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%8E%92%E7%89%88%E4%BD%8D%E7%BD%AE/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在前面两篇文章中，我们一起学习了构建视图的基本元素：文本、图片和按钮，用于展示一组连续视图元素的 ListView，以及处理多重嵌套的可滚动视图的 CustomScrollView。&lt;/p&gt;</description>
    </item>
    <item>
      <title>15__组合与自绘，我该选用何种方式自定义Widget？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/15__%E7%BB%84%E5%90%88%E4%B8%8E%E8%87%AA%E7%BB%98%E6%88%91%E8%AF%A5%E9%80%89%E7%94%A8%E4%BD%95%E7%A7%8D%E6%96%B9%E5%BC%8F%E8%87%AA%E5%AE%9A%E4%B9%89widget/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/15__%E7%BB%84%E5%90%88%E4%B8%8E%E8%87%AA%E7%BB%98%E6%88%91%E8%AF%A5%E9%80%89%E7%94%A8%E4%BD%95%E7%A7%8D%E6%96%B9%E5%BC%8F%E8%87%AA%E5%AE%9A%E4%B9%89widget/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一次分享中，我们认识了 Flutter 中最常用也最经典的布局 Widget，即单子容器 Container、多子容器 Row/Column，以及层叠容器 Stack 与 Positioned，也学习了这些不同容器之间的摆放子 Widget 的布局规则，我们可以通过它们，来实现子控件的对齐、嵌套、层叠等，它们也是构建一个界面精美的 App 所必须的布局概念。&lt;/p&gt;</description>
    </item>
    <item>
      <title>16__从夜间模式说起，如何定制不同风格的App主题？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/16__%E4%BB%8E%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E8%AF%B4%E8%B5%B7%E5%A6%82%E4%BD%95%E5%AE%9A%E5%88%B6%E4%B8%8D%E5%90%8C%E9%A3%8E%E6%A0%BC%E7%9A%84app%E4%B8%BB%E9%A2%98/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/16__%E4%BB%8E%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E8%AF%B4%E8%B5%B7%E5%A6%82%E4%BD%95%E5%AE%9A%E5%88%B6%E4%B8%8D%E5%90%8C%E9%A3%8E%E6%A0%BC%E7%9A%84app%E4%B8%BB%E9%A2%98/</guid>
      <description>&lt;p&gt;你好，我是陈航。今天，我和你分享的主题是，从夜间模式说起，如何定制不同风格的 App 主题。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我与你介绍了组装与自绘这两种自定义 Widget 的方式。对于组装，我们按照从上到下、从左到右的布局顺序去分解目标视图，将基本的 Widget 封装到 Column、Row 中，从而合成更高级别的 Widget；而对于自绘，我们则通过承载绘制逻辑的载体 CustomPainter，在其 paint 方法中使用画笔 Paint 与画布 Canvas，绘制不同风格、不同类型的图形，从而实现基于自绘的自定义组件。&lt;/p&gt;</description>
    </item>
    <item>
      <title>17__依赖管理（一）：图片、配置和字体在Flutter中怎么用？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/17__%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E4%B8%80%E5%9B%BE%E7%89%87%E9%85%8D%E7%BD%AE%E5%92%8C%E5%AD%97%E4%BD%93%E5%9C%A8flutter%E4%B8%AD%E6%80%8E%E4%B9%88%E7%94%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/17__%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E4%B8%80%E5%9B%BE%E7%89%87%E9%85%8D%E7%BD%AE%E5%92%8C%E5%AD%97%E4%BD%93%E5%9C%A8flutter%E4%B8%AD%E6%80%8E%E4%B9%88%E7%94%A8/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我与你介绍了 Flutter 的主题设置，也就是将视觉资源与视觉配置进行集中管理的机制。&lt;/p&gt;&#xA;&lt;p&gt;Flutter 提供了遵循 Material Design 规范的 ThemeData，可以对样式进行定制化：既可以初始化 App 时实现全局整体视觉风格统一，也可以在使用单子 Widget 容器 Theme 实现局部主题的覆盖，还可以在自定义组件时取出主题对应的属性值，实现视觉风格的复用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>18__依赖管理（二）：第三方组件库在Flutter中要如何管理？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/18__%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E4%BA%8C%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%E5%BA%93%E5%9C%A8flutter%E4%B8%AD%E8%A6%81%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/18__%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E4%BA%8C%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%E5%BA%93%E5%9C%A8flutter%E4%B8%AD%E8%A6%81%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我与你介绍了 Flutter 工程的资源管理机制。在 Flutter 中，资源采用先声明后使用的机制，在 pubspec.yaml 显式地声明资源路径后，才可以使用。&lt;/p&gt;&#xA;&lt;p&gt;对于图片，Flutter 基于像素密度，设立不同分辨率的目录分开管理，但只需要在 pubspec.yaml 声明一次；而字体则基于样式支持，除了正常字体，还可以支持粗体、斜体等样式。最后，由于 Flutter 需要原生运行环境，因此对于在其启动之前所需的启动图和图标这两类特殊资源，我们还需要分别去原生工程中进行相应的设置。&lt;/p&gt;</description>
    </item>
    <item>
      <title>19__用户交互事件该如何响应？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/19__%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92%E4%BA%8B%E4%BB%B6%E8%AF%A5%E5%A6%82%E4%BD%95%E5%93%8D%E5%BA%94/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/19__%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92%E4%BA%8B%E4%BB%B6%E8%AF%A5%E5%A6%82%E4%BD%95%E5%93%8D%E5%BA%94/</guid>
      <description>&lt;p&gt;你好，我是陈航。今天，我和你分享的主题是，如何响应用户交互事件。&lt;/p&gt;&#xA;&lt;p&gt;在前面两篇文章中，我和你一起学习了 Flutter 依赖的包管理机制。在 Flutter 中，包是包含了外部依赖的功能抽象。对于资源和工程代码依赖，我们采用包配置文件 pubspec.yaml 进行统一管理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>20__关于跨组件传递数据，你只需要记住这三招</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/20__%E5%85%B3%E4%BA%8E%E8%B7%A8%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE%E4%BD%A0%E5%8F%AA%E9%9C%80%E8%A6%81%E8%AE%B0%E4%BD%8F%E8%BF%99%E4%B8%89%E6%8B%9B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/20__%E5%85%B3%E4%BA%8E%E8%B7%A8%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE%E4%BD%A0%E5%8F%AA%E9%9C%80%E8%A6%81%E8%AE%B0%E4%BD%8F%E8%BF%99%E4%B8%89%E6%8B%9B/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我带你一起学习了在 Flutter 中如何响应用户交互事件（手势）。手势处理在 Flutter 中分为两种：原始的指针事件处理和高级的手势识别。&lt;/p&gt;</description>
    </item>
    <item>
      <title>21__路由与导航，Flutter是这样实现页面切换的</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/21__%E8%B7%AF%E7%94%B1%E4%B8%8E%E5%AF%BC%E8%88%AAflutter%E6%98%AF%E8%BF%99%E6%A0%B7%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E5%88%87%E6%8D%A2%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/21__%E8%B7%AF%E7%94%B1%E4%B8%8E%E5%AF%BC%E8%88%AAflutter%E6%98%AF%E8%BF%99%E6%A0%B7%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E5%88%87%E6%8D%A2%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我带你一起学习了如何在 Flutter 中实现跨组件数据传递。其中，InheritedWidget 适用于子 Widget 跨层共享父 Widget 数据的场景，如果子 Widget 还需要修改父 Widget 数据，则需要和 State 一起配套使用。而 Notification，则适用于父 Widget 监听子 Widget 事件的场景。对于没有父子关系的通信双方，我们还可以使用 EventBus 实现基于订阅 / 发布模式的机制实现数据交互。&lt;/p&gt;</description>
    </item>
    <item>
      <title>22__如何构造炫酷的动画效果？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/22__%E5%A6%82%E4%BD%95%E6%9E%84%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/22__%E5%A6%82%E4%BD%95%E6%9E%84%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我带你一起学习了 Flutter 中实现页面路由的两种方式：基本路由与命名路由，即手动创建页面进行切换，和通过前置路由注册后提供标识符进行跳转。除此之外，Flutter 还在这两种路由方式的基础上，支持页面打开和页面关闭传递参数，可以更精确地控制路由切换。&lt;/p&gt;</description>
    </item>
    <item>
      <title>23__单线程模型怎么保证UI运行流畅？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/23__%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81ui%E8%BF%90%E8%A1%8C%E6%B5%81%E7%95%85/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/23__%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E6%80%8E%E4%B9%88%E4%BF%9D%E8%AF%81ui%E8%BF%90%E8%A1%8C%E6%B5%81%E7%95%85/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我带你一起学习了如何在 Flutter 中实现动画。对于组件动画，Flutter 将动画的状态与渲染进行了分离，因此我们需要使用动画曲线生成器 Animation、动画状态控制器 AnimationController 与动画进度监听器一起配合完成动画更新；而对于跨页面动画，Flutter 提供了 Hero 组件，可以实现共享元素变换的页面切换效果。&lt;/p&gt;</description>
    </item>
    <item>
      <title>24__HTTP网络编程与JSON解析</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/24__http%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%8Ejson%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/24__http%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B8%8Ejson%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我带你一起学习了 Dart 中异步与并发的机制及实现原理。与其他语言类似，Dart 的异步是通过事件循环与队列实现的，我们可以使用 Future 来封装异步任务。而另一方面，尽管 Dart 是基于单线程模型的，但也提供了 Isolate 这样的“多线程”能力，这使得我们可以充分利用系统资源，在并发 Isolate 中搞定 CPU 密集型的任务，并通过消息机制通知主 Isolate 运行结果。&lt;/p&gt;</description>
    </item>
    <item>
      <title>25__本地存储与数据库的使用和优化</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/25__%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E4%BC%98%E5%8C%96/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/25__%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我带你一起学习了 Flutter 的网络编程，即如何建立与 Web 服务器的通信连接，以实现数据交换，以及如何解析结构化后的通信信息。&lt;/p&gt;&#xA;&lt;p&gt;其中，建立通信连接在 Flutter 中有三种基本方案，包括 HttpClient、http 与 dio。考虑到 HttpClient 与 http 并不支持复杂的网络请求行为，因此我重点介绍了如何使用 dio 实现资源访问、接口数据请求与提交、上传及下载文件、网络拦截等高级操作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>26__如何在Dart层兼容Android_iOS平台特定实现？（一）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/26__%E5%A6%82%E4%BD%95%E5%9C%A8dart%E5%B1%82%E5%85%BC%E5%AE%B9android_ios%E5%B9%B3%E5%8F%B0%E7%89%B9%E5%AE%9A%E5%AE%9E%E7%8E%B0%E4%B8%80/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/26__%E5%A6%82%E4%BD%95%E5%9C%A8dart%E5%B1%82%E5%85%BC%E5%AE%B9android_ios%E5%B9%B3%E5%8F%B0%E7%89%B9%E5%AE%9A%E5%AE%9E%E7%8E%B0%E4%B8%80/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我与你介绍了在 Flutter 中实现数据持久化的三种方式，即文件、SharedPreferences 与数据库。&lt;/p&gt;&#xA;&lt;p&gt;其中，文件适用于字符串或者二进制流的数据持久化，我们可以根据访问频次，决定将它存在临时目录或是文档目录。而 SharedPreferences 则适用于存储小型键值对信息，可以应对一些轻量配置缓存的场景。数据库则适用于频繁变化的、结构化的对象存取，可以轻松应对数据的增删改查。&lt;/p&gt;</description>
    </item>
    <item>
      <title>27__如何在Dart层兼容Android_iOS平台特定实现？（二）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/27__%E5%A6%82%E4%BD%95%E5%9C%A8dart%E5%B1%82%E5%85%BC%E5%AE%B9android_ios%E5%B9%B3%E5%8F%B0%E7%89%B9%E5%AE%9A%E5%AE%9E%E7%8E%B0%E4%BA%8C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/27__%E5%A6%82%E4%BD%95%E5%9C%A8dart%E5%B1%82%E5%85%BC%E5%AE%B9android_ios%E5%B9%B3%E5%8F%B0%E7%89%B9%E5%AE%9A%E5%AE%9E%E7%8E%B0%E4%BA%8C/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我与你介绍了方法通道，这种在 Flutter 中实现调用原生 Android、iOS 代码的轻量级解决方案。使用方法通道，我们可以把原生代码所拥有的能力，以接口形式提供给 Dart。&lt;/p&gt;</description>
    </item>
    <item>
      <title>28__如何在原生应用中混编Flutter工程？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/28__%E5%A6%82%E4%BD%95%E5%9C%A8%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E4%B8%AD%E6%B7%B7%E7%BC%96flutter%E5%B7%A5%E7%A8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/28__%E5%A6%82%E4%BD%95%E5%9C%A8%E5%8E%9F%E7%94%9F%E5%BA%94%E7%94%A8%E4%B8%AD%E6%B7%B7%E7%BC%96flutter%E5%B7%A5%E7%A8%8B/</guid>
      <description>&lt;p&gt;你好，我是陈航。今天，我来和你聊聊如何在原生应用中接入 Flutter。&lt;/p&gt;&#xA;&lt;p&gt;在前面两篇文章中，我与你分享了如何在 Dart 层引入 Android/iOS 平台特定的能力，来提升 App 的功能体验。&lt;/p&gt;&#xA;&lt;p&gt;使用 Flutter 从头开始写一个 App，是一件轻松惬意的事情。但，对于成熟产品来说，完全摒弃原有 App 的历史沉淀，而全面转向 Flutter 并不现实。用 Flutter 去统一 iOS/Android 技术栈，把它作为已有原生 App 的扩展能力，通过逐步试验有序推进从而提升终端开发效率，可能才是现阶段 Flutter 最具吸引力的地方。&lt;/p&gt;</description>
    </item>
    <item>
      <title>29__混合开发，该用何种方案管理导航栈？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/29__%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E8%AF%A5%E7%94%A8%E4%BD%95%E7%A7%8D%E6%96%B9%E6%A1%88%E7%AE%A1%E7%90%86%E5%AF%BC%E8%88%AA%E6%A0%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/29__%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E8%AF%A5%E7%94%A8%E4%BD%95%E7%A7%8D%E6%96%B9%E6%A1%88%E7%AE%A1%E7%90%86%E5%AF%BC%E8%88%AA%E6%A0%88/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;为了把 Flutter 引入到原生工程，我们需要把 Flutter 工程改造为原生工程的一个组件依赖，并以组件化的方式管理不同平台的 Flutter 构建产物，即 Android 平台使用 aar、iOS 平台使用 pod 进行依赖管理。这样，我们就可以在 Android 工程中通过 FlutterView，iOS 工程中通过 FlutterViewController，为 Flutter 搭建应用入口，实现 Flutter 与原生的混合开发方式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>30__为什么需要做状态管理，怎么做？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/30__%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%81%9A%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E6%80%8E%E4%B9%88%E5%81%9A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/30__%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%81%9A%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E6%80%8E%E4%B9%88%E5%81%9A/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我与你分享了如何在原生混编 Flutter 工程中管理混合导航栈，应对跨渲染引擎的页面跳转，即解决原生页面如何切换到 Flutter 页面，以及 Flutter 页面如何切换到原生页面的问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>31__如何实现原生推送能力？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/31__%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%94%9F%E6%8E%A8%E9%80%81%E8%83%BD%E5%8A%9B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/31__%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%94%9F%E6%8E%A8%E9%80%81%E8%83%BD%E5%8A%9B/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我与你分享了如何使用 Provider 去维护 Flutter 组件共用的数据状态。在 Flutter 中状态即数据，通过数据资源封装、注入和读写这三步，我们不仅可以实现跨组件之间的数据共享，还能精确控制 UI 刷新粒度，避免无关组件的刷新。&lt;/p&gt;</description>
    </item>
    <item>
      <title>32__适配国际化，除了多语言我们还需要注意什么_</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/32__%E9%80%82%E9%85%8D%E5%9B%BD%E9%99%85%E5%8C%96%E9%99%A4%E4%BA%86%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%88%91%E4%BB%AC%E8%BF%98%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88_/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/32__%E9%80%82%E9%85%8D%E5%9B%BD%E9%99%85%E5%8C%96%E9%99%A4%E4%BA%86%E5%A4%9A%E8%AF%AD%E8%A8%80%E6%88%91%E4%BB%AC%E8%BF%98%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E4%B9%88_/</guid>
      <description>&lt;p&gt;你好，我是陈航。今天，我们来聊聊 Flutter 应用的国际化。&lt;/p&gt;&#xA;&lt;p&gt;借助于 App Store 与 Google Play，我们能够把应用发布到全世界的任何一个应用商店里。应用的（潜在）使用者可能来自于不同国家、说着不同的语言。如果我们想为全世界的使用者提供统一而标准的体验，那么首先就需要让 App 能够支持多种语言。而这一过程，一般被称为“国际化”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>33__如何适配不同分辨率的手机屏幕？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/33__%E5%A6%82%E4%BD%95%E9%80%82%E9%85%8D%E4%B8%8D%E5%90%8C%E5%88%86%E8%BE%A8%E7%8E%87%E7%9A%84%E6%89%8B%E6%9C%BA%E5%B1%8F%E5%B9%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/33__%E5%A6%82%E4%BD%95%E9%80%82%E9%85%8D%E4%B8%8D%E5%90%8C%E5%88%86%E8%BE%A8%E7%8E%87%E7%9A%84%E6%89%8B%E6%9C%BA%E5%B1%8F%E5%B9%95/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我与你分享了在 Flutter 中实现国际化的基本原理。与原生 Android 和 iOS 只需为国际化资源提供不同的目录，就可以在运行时自动根据语言和地区进行适配不同，Flutter 的国际化是完全在代码中实现的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>34__如何理解Flutter的编译模式？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/34__%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3flutter%E7%9A%84%E7%BC%96%E8%AF%91%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/34__%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3flutter%E7%9A%84%E7%BC%96%E8%AF%91%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;你好，我是陈航。今天，我们来聊聊 Flutter 的编译模式吧。&lt;/p&gt;&#xA;&lt;p&gt;在开发移动应用程序时，一个 App 的完整生命周期包括开发、测试和上线 3 个阶段。在每个阶段，开发者的关注点都不一样。&lt;/p&gt;</description>
    </item>
    <item>
      <title>35__Hot_Reload是怎么做到的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/35__hot_reload%E6%98%AF%E6%80%8E%E4%B9%88%E5%81%9A%E5%88%B0%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/35__hot_reload%E6%98%AF%E6%80%8E%E4%B9%88%E5%81%9A%E5%88%B0%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我与你分享了 Flutter 的 Debug 与 Release 编译模式，以及如何通过断言与编译常数来精准识别当前代码所运行的编译模式，从而写出只在 Debug 或 Release 模式下生效的代码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>36__如何通过工具链优化开发调试效率？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/36__%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E5%B7%A5%E5%85%B7%E9%93%BE%E4%BC%98%E5%8C%96%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E6%95%88%E7%8E%87/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/36__%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E5%B7%A5%E5%85%B7%E9%93%BE%E4%BC%98%E5%8C%96%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E6%95%88%E7%8E%87/</guid>
      <description>&lt;p&gt;你好，我是陈航。今天我们来聊聊如何调试 Flutter App。&lt;/p&gt;&#xA;&lt;p&gt;软件开发通常是一个不断迭代、螺旋式上升的过程。在迭代的过程中，我们不可避免地会经常与 Bug 打交道，特别是在多人协作的项目中，我们不仅要修复自己的 Bug，有时还需要帮别人解决 Bug。&lt;/p&gt;</description>
    </item>
    <item>
      <title>37__如何检测并优化Flutter_App的整体性能表现？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/37__%E5%A6%82%E4%BD%95%E6%A3%80%E6%B5%8B%E5%B9%B6%E4%BC%98%E5%8C%96flutter_app%E7%9A%84%E6%95%B4%E4%BD%93%E6%80%A7%E8%83%BD%E8%A1%A8%E7%8E%B0/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/37__%E5%A6%82%E4%BD%95%E6%A3%80%E6%B5%8B%E5%B9%B6%E4%BC%98%E5%8C%96flutter_app%E7%9A%84%E6%95%B4%E4%BD%93%E6%80%A7%E8%83%BD%E8%A1%A8%E7%8E%B0/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我与你分享了调试 Flutter 代码的 3 种基本方式，即输出日志、断点调试与布局调试。&lt;/p&gt;&#xA;&lt;p&gt;通过可定制打印行为的 debugPrint 函数，我们可以实现生产环境与开发环境不同的日志输出行为，从而保证在开发期打印的调试信息不会被发布至线上；借助于 IDE（Android Studio）所提供的断点调试选项，我们可以不断调整代码执行步长和代码暂停条件，收敛问题发生范围，直至找到问题根源；而如果我们想找出代码中的布局渲染类 Bug，则可以通过 Debug Painting 和 Flutter Inspector 提供的辅助线和视图可视化信息，来更为精准地定位视觉问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>38__如何通过自动化测试提高交付质量？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/38__%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%8F%90%E9%AB%98%E4%BA%A4%E4%BB%98%E8%B4%A8%E9%87%8F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/38__%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E6%8F%90%E9%AB%98%E4%BA%A4%E4%BB%98%E8%B4%A8%E9%87%8F/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我与你分享了如何分析并优化 Flutter 应用的性能问题。通过在真机上以分析模式运行应用，我们可以借助于性能图层的帮助，找到引起性能瓶颈的两类问题，即 GPU 渲染问题和 CPU 执行耗时问题。然后，我们就可以使用 Flutter 提供的渲染开关和 CPU 帧图（火焰图），来检查应用中是否存在过度渲染或是代码执行耗时长的情况，从而去定位并着手解决应用的性能问题了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>39__线上出现问题，该如何做好异常捕获与信息采集？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/39__%E7%BA%BF%E4%B8%8A%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E8%AF%A5%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7%E4%B8%8E%E4%BF%A1%E6%81%AF%E9%87%87%E9%9B%86/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/39__%E7%BA%BF%E4%B8%8A%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E8%AF%A5%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7%E4%B8%8E%E4%BF%A1%E6%81%AF%E9%87%87%E9%9B%86/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我与你分享了如何为一个 Flutter 工程编写自动化测试用例。设计一个测试用例的基本步骤可以分为 3 步，即定义、执行和验证，而 Flutter 提供的单元测试和 UI 测试框架则可以帮助我们简化这些步骤。&lt;/p&gt;</description>
    </item>
    <item>
      <title>40__衡量Flutter_App线上质量，我们需要关注这三个指标</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/40__%E8%A1%A1%E9%87%8Fflutter_app%E7%BA%BF%E4%B8%8A%E8%B4%A8%E9%87%8F%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E5%85%B3%E6%B3%A8%E8%BF%99%E4%B8%89%E4%B8%AA%E6%8C%87%E6%A0%87/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/40__%E8%A1%A1%E9%87%8Fflutter_app%E7%BA%BF%E4%B8%8A%E8%B4%A8%E9%87%8F%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E5%85%B3%E6%B3%A8%E8%BF%99%E4%B8%89%E4%B8%AA%E6%8C%87%E6%A0%87/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我与你分享了如何捕获 Flutter 应用的未处理异常。所谓异常，指的是 Dart 代码在运行时意外发生的错误事件。对于单一异常来说，我们可以使用 try-catch，或是 catchError 去处理；而如果我们想对异常进行集中的拦截治理，则需要使用 Zone，并结合 FlutterError 进行统一管理。异常一旦被抓取，我们就可以利用第三方数据上报服务（比如 Bugly），上报其上下文信息了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>41__组件化和平台化，该如何组织合理稳定的Flutter工程结构？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/41__%E7%BB%84%E4%BB%B6%E5%8C%96%E5%92%8C%E5%B9%B3%E5%8F%B0%E5%8C%96%E8%AF%A5%E5%A6%82%E4%BD%95%E7%BB%84%E7%BB%87%E5%90%88%E7%90%86%E7%A8%B3%E5%AE%9A%E7%9A%84flutter%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/41__%E7%BB%84%E4%BB%B6%E5%8C%96%E5%92%8C%E5%B9%B3%E5%8F%B0%E5%8C%96%E8%AF%A5%E5%A6%82%E4%BD%95%E7%BB%84%E7%BB%87%E5%90%88%E7%90%86%E7%A8%B3%E5%AE%9A%E7%9A%84flutter%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84/</guid>
      <description>&lt;p&gt;你好，我是陈航。今天，我们来聊一聊 Flutter 应用的工程架构这个话题。&lt;/p&gt;&#xA;&lt;p&gt;在软件开发中，我们不仅要在代码实现中遵守常见的设计模式，更需要在架构设计中遵从基本的设计原则。而在这其中，DRY（即 Don’t Repeat Yourself）原则可以算是最重要的一个。&lt;/p&gt;</description>
    </item>
    <item>
      <title>42__如何构建高效的Flutter_App打包发布环境？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/42__%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E9%AB%98%E6%95%88%E7%9A%84flutter_app%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/42__%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E9%AB%98%E6%95%88%E7%9A%84flutter_app%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83%E7%8E%AF%E5%A2%83/</guid>
      <description>&lt;p&gt;你好，我是陈航。今天，我们来聊一聊 Flutter 应用的交付这个话题。&lt;/p&gt;&#xA;&lt;p&gt;软件项目的交付是一个复杂的过程，任何原因都有可能导致交付过程失败。中小型研发团队经常遇到的一个现象是，App 在开发测试时没有任何异常，但一到最后的打包构建交付时就问题频出。所以，每到新版本发布时，大家不仅要等候打包结果，还经常需要加班修复临时出现的问题。如果没有很好地线上应急策略，即使打包成功，交付完成后还是非常紧张。&lt;/p&gt;</description>
    </item>
    <item>
      <title>43__如何构建自己的Flutter混合开发框架（一）？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/43__%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84flutter%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E4%B8%80/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/43__%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84flutter%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E4%B8%80/</guid>
      <description>&lt;p&gt;你好，我是陈航。在本次课程的最后一个主题里，我来和你聊聊如何设计自己的 Flutter 混合开发框架。&lt;/p&gt;&#xA;&lt;p&gt;所谓混合开发，是指在 App 的整体架构继续使用原生技术栈的基础上，将 Flutter 运行环境嵌入到原生 App 工程中：由原生开发人员为 Flutter 运行提供宿主容器及基础能力支撑，而 Flutter 开发人员则负责应用层业务及 App 内大部分渲染工作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>44__如何构建自己的Flutter混合开发框架（二）？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/44__%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84flutter%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E4%BA%8C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/44__%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84flutter%E6%B7%B7%E5%90%88%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E4%BA%8C/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;在上一篇文章中，我从工程架构与工作模式两个层面，与你介绍了设计 Flutter 混合框架需要关注的基本设计原则，即确定分工边界。&lt;/p&gt;&#xA;&lt;p&gt;在工程架构维度，由于 Flutter 模块作为原生工程的一个业务依赖，其运行环境是由原生工程提供的，因此我们需要将它们各自抽象为对应技术栈的依赖管理方式，以分层依赖的方式确定二者的边界。&lt;/p&gt;</description>
    </item>
    <item>
      <title>74-Flutter核心技术与实战</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/74-flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/74-flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/</guid>
      <description></description>
    </item>
    <item>
      <title>结束语__勿畏难，勿轻略</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/%E7%BB%93%E6%9D%9F%E8%AF%AD__%E5%8B%BF%E7%95%8F%E9%9A%BE%E5%8B%BF%E8%BD%BB%E7%95%A5/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/%E7%BB%93%E6%9D%9F%E8%AF%AD__%E5%8B%BF%E7%95%8F%E9%9A%BE%E5%8B%BF%E8%BD%BB%E7%95%A5/</guid>
      <description>&lt;p&gt;你好，我是陈航。&lt;/p&gt;&#xA;&lt;p&gt;三个多月的时间转瞬即逝，转眼间《Flutter 核心技术与实战》已经走到了尾声。在这里，&lt;strong&gt;我要感谢你对我和这个专栏的鼓励和支持，也要向你表示祝贺&lt;/strong&gt;：你已经完整地学习了专栏的全部课程，实现了从入门到进阶 Flutter 技术的目标，你的坚持一定有所收获。现在专栏课程已经结束了，但还不能松懈，我们的 Flutter 学习旅程并未结束，从进阶到精通还有很长的一段路需要走，希望你能保持持续学习的习惯。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开篇词__为什么每一位大前端从业者都应该学习Flutter？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/%E5%BC%80%E7%AF%87%E8%AF%8D__%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%8F%E4%B8%80%E4%BD%8D%E5%A4%A7%E5%89%8D%E7%AB%AF%E4%BB%8E%E4%B8%9A%E8%80%85%E9%83%BD%E5%BA%94%E8%AF%A5%E5%AD%A6%E4%B9%A0flutter/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/flutter%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/%E5%BC%80%E7%AF%87%E8%AF%8D__%E4%B8%BA%E4%BB%80%E4%B9%88%E6%AF%8F%E4%B8%80%E4%BD%8D%E5%A4%A7%E5%89%8D%E7%AB%AF%E4%BB%8E%E4%B8%9A%E8%80%85%E9%83%BD%E5%BA%94%E8%AF%A5%E5%AD%A6%E4%B9%A0flutter/</guid>
      <description>&lt;p&gt;你好，我是陈航，目前在美团外卖担任商家业务大前端团队技术负责人。在接下来三个月的时间里，我将和你一起学习 Flutter。&lt;/p&gt;&#xA;&lt;p&gt;当下是移动互联网的时代，也是大前端技术紧密整合的时代。而移动系统与终端设备的碎片化，让我们一直头痛于在不同平台上开发和维护同一个产品的成本问题：使用原生方式来开发 App，不仅要求分别针对 iOS 和 Android 平台，使用不同的语言实现同样的产品功能，还要对不同的终端设备和不同的操作系统进行功能适配，并承担由此带来的测试维护升级工作。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
