<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>前端高手进阶 on Docs</title>
    <link>https://politcloud.org/tags/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/</link>
    <description>Recent content in 前端高手进阶 on Docs</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 10 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://politcloud.org/tags/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>彩蛋：如何获得心仪的Offer？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E5%BD%A9%E8%9B%8B%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E5%BF%83%E4%BB%AA%E7%9A%84offer/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E5%BD%A9%E8%9B%8B%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E5%BF%83%E4%BB%AA%E7%9A%84offer/</guid>
      <description>&lt;p&gt;下面我们直入主题，从简历、渠道、面试、薪资 4 个方面聊聊获得 Offer 相关的重要内容。&lt;/p&gt;&#xA;&lt;p&gt;简历&lt;/p&gt;&#xA;&lt;p&gt;简历最主要的作用是获得面试机会，其次是展示自己的工作能力，给面试官形成良好的第一印象。写好简历应着重注意两个点：格式和内容。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第01讲：你真的熟悉HTML标签吗？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC01%E8%AE%B2%E4%BD%A0%E7%9C%9F%E7%9A%84%E7%86%9F%E6%82%89html%E6%A0%87%E7%AD%BE%E5%90%97/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC01%E8%AE%B2%E4%BD%A0%E7%9C%9F%E7%9A%84%E7%86%9F%E6%82%89html%E6%A0%87%E7%AD%BE%E5%90%97/</guid>
      <description>&lt;p&gt;本课时主要讲解那些“看不见”的 HTML 标签。&lt;/p&gt;&#xA;&lt;p&gt;提到 HTML 标签，前端工程师会非常熟悉，因为在开发页面时经常使用。但往往关注更多的是页面渲染效果及交互逻辑，也就是对用户可见可操作的部分，比如表单、菜单栏、列表、图文。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第02讲：如何高效操作DOM元素？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC02%E8%AE%B2%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E6%93%8D%E4%BD%9Cdom%E5%85%83%E7%B4%A0/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC02%E8%AE%B2%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E6%93%8D%E4%BD%9Cdom%E5%85%83%E7%B4%A0/</guid>
      <description>&lt;p&gt;本课时我们主要介绍高效操作 DOM 元素相关的内容。&lt;/p&gt;&#xA;&lt;p&gt;什么是 DOM&lt;/p&gt;&#xA;&lt;p&gt;DOM（Document Object Model，文档对象模型）是 JavaScript 操作 HTML 的接口（这里只讨论属于前端范畴的 HTML DOM），属于前端的入门知识，同样也是核心内容，因为大部分前端功能都需要借助 DOM 来实现，比如：&lt;/p&gt;</description>
    </item>
    <item>
      <title>第03讲：3个使用场景助你用好DOM事件</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC03%E8%AE%B23%E4%B8%AA%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E5%8A%A9%E4%BD%A0%E7%94%A8%E5%A5%BDdom%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC03%E8%AE%B23%E4%B8%AA%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E5%8A%A9%E4%BD%A0%E7%94%A8%E5%A5%BDdom%E4%BA%8B%E4%BB%B6/</guid>
      <description>&lt;p&gt;这一课时我们将一起探究 DOM 事件。&lt;/p&gt;&#xA;&lt;p&gt;DOM 事件数量非常多，即使分类也有十多种，比如键盘事件、鼠标事件、表单事件等，而且不同事件对象属性也有差异，这带来了一定的学习难度。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第04讲：掌握CSS精髓：布局</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC04%E8%AE%B2%E6%8E%8C%E6%8F%A1css%E7%B2%BE%E9%AB%93%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC04%E8%AE%B2%E6%8E%8C%E6%8F%A1css%E7%B2%BE%E9%AB%93%E5%B8%83%E5%B1%80/</guid>
      <description>&lt;p&gt;CSS 虽然初衷是用来美化 HTML 文档的，但实际上随着 float、position 等属性的出现，它已经可以起到调整文档渲染结构的作用了，而随着弹性盒子以及网格布局的推出，CSS 将承担越来越重要的布局功能。渐渐地我们发现 HTML 标签决定了页面的逻辑结构，而 CSS 决定了页面的视觉结构。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第05讲：如何管理你的CSS代码？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC05%E8%AE%B2%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84css%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC05%E8%AE%B2%E5%A6%82%E4%BD%95%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84css%E4%BB%A3%E7%A0%81/</guid>
      <description>&lt;p&gt;上一课时我们从技术细节的角度分析了 CSS 布局的相关内容。这一课时我们提升一下思考维度，从组织管理的角度探讨如何管理好项目中的 CSS 代码。&lt;/p&gt;&#xA;&lt;p&gt;接下来我们先解决 CSS 原生语法未能很好实现的模块化和作用域的问题，然后再对代码结构进行优化，提升代码的复用率。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第06讲：浏览器如何渲染页面？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC06%E8%AE%B2%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC06%E8%AE%B2%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2/</guid>
      <description>&lt;p&gt;这一课时我将结合代码实例为你讲解浏览器渲染页面时的流程和步骤。&lt;/p&gt;&#xA;&lt;p&gt;先来看一个例子，假如我们在浏览器中输入了一个网址，得到了下面的 html 文件，渲染引擎是怎样通过解析代码生成页面的呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>第07讲：关于JavaScript的数据类型，你知多少？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC07%E8%AE%B2%E5%85%B3%E4%BA%8Ejavascript%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BD%A0%E7%9F%A5%E5%A4%9A%E5%B0%91/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC07%E8%AE%B2%E5%85%B3%E4%BA%8Ejavascript%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BD%A0%E7%9F%A5%E5%A4%9A%E5%B0%91/</guid>
      <description>&lt;p&gt;数据类型通常是一门编程语言的基础知识，JavaScript 的数据类型可以分为 7 种：空（Null）、未定义（Undefined）、数字（Number）、字符串（String）、布尔值（Boolean）、符号（Symbol）、对象（Object）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第08讲：为什么说函数是JavaScript的一等公民？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC08%E8%AE%B2%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E5%87%BD%E6%95%B0%E6%98%AFjavascript%E7%9A%84%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC08%E8%AE%B2%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E5%87%BD%E6%95%B0%E6%98%AFjavascript%E7%9A%84%E4%B8%80%E7%AD%89%E5%85%AC%E6%B0%91/</guid>
      <description>&lt;p&gt;数据类型与函数是很多高级语言中最重要的两个概念，前者用来存储数据，后者用来存储代码。JavaScript 中的函数相对于数据类型而言更加复杂，它可以有属性，也可以被赋值给一个变量，还可以作为参数被传递&amp;hellip;&amp;hellip;正是这些强大特性让它成了 JavaScript 的“一等公民”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第09讲：为什么代码没有按照编写顺序执行？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC09%E8%AE%B2%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BB%A3%E7%A0%81%E6%B2%A1%E6%9C%89%E6%8C%89%E7%85%A7%E7%BC%96%E5%86%99%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC09%E8%AE%B2%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BB%A3%E7%A0%81%E6%B2%A1%E6%9C%89%E6%8C%89%E7%85%A7%E7%BC%96%E5%86%99%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C/</guid>
      <description>&lt;p&gt;前端工程师算是最幸运的软件工程师，因为从一开始就可以接触到“异步”这种高级特性，比如 DOM 事件、AJAX 请求及定时器；同时也是最不幸的软件工程师，因为入门 JavaScript 的时候就要习惯异步这种高难度的开发方式，比如上一课时提到的那道经典的笔试题，就是异步造成的输出结果与预期不一致。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第10讲：怎么复用你的代码？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC10%E8%AE%B2%E6%80%8E%E4%B9%88%E5%A4%8D%E7%94%A8%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC10%E8%AE%B2%E6%80%8E%E4%B9%88%E5%A4%8D%E7%94%A8%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81/</guid>
      <description>&lt;p&gt;作为前端工程师的你，或许早已习惯了在编写浏览器组件时使用 import 和 from 来管理代码模块，在编写 Node.js 服务时通过 require 和 module.exports 来复用代码。但 JavaScript 模块化之路充满了坎坷。这一课时就带你由近及远，看看 JavaScript 模块发展史上那些著名的模块规范与实现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第11讲：为什么说JavaScript不适合大型项目？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC11%E8%AE%B2%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4javascript%E4%B8%8D%E9%80%82%E5%90%88%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC11%E8%AE%B2%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4javascript%E4%B8%8D%E9%80%82%E5%90%88%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE/</guid>
      <description>&lt;p&gt;随着前端快速发展，JavaScript 语言的设计缺陷在大型项目中逐渐显露。&lt;/p&gt;&#xA;&lt;p&gt;第 10 课时提到的模块问题就是其中之一，但庆幸的是，ES6 模块在原生层面解决了这个问题，不同环境下的兼容性问题也可以由工具转化代码来解决。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第12讲：浏览器如何执行JavaScript代码？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC12%E8%AE%B2%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8Cjavascript%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC12%E8%AE%B2%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8Cjavascript%E4%BB%A3%E7%A0%81/</guid>
      <description>&lt;p&gt;这一课时从编译过程和内存管理两个方面带你来探索 JavaScript 引擎的工作机制。&lt;/p&gt;&#xA;&lt;p&gt;编译过程&lt;/p&gt;&#xA;&lt;p&gt;在“加餐1：手写 CSS 预处理器”中提过编译器的基本工作流程，大体上包括 3 个步骤：解析（Parsing）、转换（Transformation）及代码生成（Code Generation），JavaScript 引擎与之相比大体上也遵循这个过程，可分为解析、解释和优化 3 个步骤。下面我们就以 V8 引擎为例进行讲解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第13讲：区分浏览器中的进程与线程</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC13%E8%AE%B2%E5%8C%BA%E5%88%86%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC13%E8%AE%B2%E5%8C%BA%E5%88%86%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</guid>
      <description>&lt;p&gt;浏览器作为前端代码运行的环境，也作为前端工程师的底层知识，熟悉它的结构及工作方式，无论是对于开发高性能 Web 应用，还是对于建立完善的前端知识框架，都起着至关重要的作用。这一课时我们就通过学习浏览器中的进程和线程来掌握它的整体架构。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第14讲：HTTP协议和它的“补丁”们</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC14%E8%AE%B2http%E5%8D%8F%E8%AE%AE%E5%92%8C%E5%AE%83%E7%9A%84%E8%A1%A5%E4%B8%81%E4%BB%AC/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC14%E8%AE%B2http%E5%8D%8F%E8%AE%AE%E5%92%8C%E5%AE%83%E7%9A%84%E8%A1%A5%E4%B8%81%E4%BB%AC/</guid>
      <description>&lt;p&gt;HTTP（HyperText Transfer Protocol，超文本传输协议）是浏览器与服务端之间最主要的通信协议，这一课时主要分析 HTTP 及其相关协议的特点。&lt;/p&gt;&#xA;&lt;p&gt;HTTP/0.9&lt;/p&gt;</description>
    </item>
    <item>
      <title>第15讲：如何让浏览器更快地加载网络资源？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC15%E8%AE%B2%E5%A6%82%E4%BD%95%E8%AE%A9%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9B%B4%E5%BF%AB%E5%9C%B0%E5%8A%A0%E8%BD%BD%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC15%E8%AE%B2%E5%A6%82%E4%BD%95%E8%AE%A9%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9B%B4%E5%BF%AB%E5%9C%B0%E5%8A%A0%E8%BD%BD%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90/</guid>
      <description>&lt;p&gt;浏览器加载网络资源的速度&lt;/p&gt;&#xA;&lt;p&gt;想要加快浏览器加载网络资源的速度，可以通过减少响应内容大小，比如使用 gzip 算法压缩响应体内容和 HTTP/2 的压缩头部功能；另一种更通用也更为重要的技术就是使用缓存。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第16讲：浏览器同源策略与跨域方案详解</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC16%E8%AE%B2%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B7%A8%E5%9F%9F%E6%96%B9%E6%A1%88%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC16%E8%AE%B2%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E4%B8%8E%E8%B7%A8%E5%9F%9F%E6%96%B9%E6%A1%88%E8%AF%A6%E8%A7%A3/</guid>
      <description>&lt;p&gt;开发出高性能的 Web 应用固然重要，但安全问题也不容小觑。这一课时我们继续以 HTTP 为线索，展开来讲一讲浏览器安全相关的同源策略。&lt;/p&gt;&#xA;&lt;p&gt;浏览器的同源策略（Same Origin Policy）&lt;/p&gt;</description>
    </item>
    <item>
      <title>第17讲：前后端如何有效沟通？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC17%E8%AE%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%A6%82%E4%BD%95%E6%9C%89%E6%95%88%E6%B2%9F%E9%80%9A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC17%E8%AE%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E5%A6%82%E4%BD%95%E6%9C%89%E6%95%88%E6%B2%9F%E9%80%9A/</guid>
      <description>&lt;p&gt;在第 14 课时中，我们重点介绍了前后端通信的重要协议 HTTP，但在实际通信场景中，光有协议是不够的。假设有下面的 GET 请求，返回结果是用户列表数据。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GET https://lagou.com/a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;对于浏览器而言，可以通过头部字段 Content-Type 轻松判断出来，然后进行对应的逻辑处理。但对于工程师而言是不可读的，不知道 /a 代表什么。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第18讲：你是怎么理解“组件”这个概念的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC18%E8%AE%B2%E4%BD%A0%E6%98%AF%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E7%BB%84%E4%BB%B6%E8%BF%99%E4%B8%AA%E6%A6%82%E5%BF%B5%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC18%E8%AE%B2%E4%BD%A0%E6%98%AF%E6%80%8E%E4%B9%88%E7%90%86%E8%A7%A3%E7%BB%84%E4%BB%B6%E8%BF%99%E4%B8%AA%E6%A6%82%E5%BF%B5%E7%9A%84/</guid>
      <description>&lt;p&gt;不同框架、工具对组件的定义和实现各不相同，但可以用一句话来概括它们对组件的定义： 组件就是基于视图的模块 。&lt;/p&gt;&#xA;&lt;p&gt;组件的核心任务就是将数据渲染到视图并监听用户在视图上的操作。这一课时，我们以主流的 Vue 2.6 和 React 16.13 的源码为例，讲解较为复杂的数据渲染到视图的实现过程。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第19讲：把路由放在前端意味着什么？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC19%E8%AE%B2%E6%8A%8A%E8%B7%AF%E7%94%B1%E6%94%BE%E5%9C%A8%E5%89%8D%E7%AB%AF%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC19%E8%AE%B2%E6%8A%8A%E8%B7%AF%E7%94%B1%E6%94%BE%E5%9C%A8%E5%89%8D%E7%AB%AF%E6%84%8F%E5%91%B3%E7%9D%80%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;当浏览器地址栏中的 URL 发生变化时，会请求对应的网络资源，而负责响应这个网络资源的服务就称为路由。在早期的 Web 开发中，路由都是交由服务端处理，但随着前端技术的快速发展，路由模块逐渐转移交给了前端进行控制，而路由转移到前端，正是前后端分离和单页应用架构 的 基石。这一课时我们来深入理解前端路由的技术细节。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第20讲：详解组件通信之状态管理</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC20%E8%AE%B2%E8%AF%A6%E8%A7%A3%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E4%B9%8B%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC20%E8%AE%B2%E8%AF%A6%E8%A7%A3%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%E4%B9%8B%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</guid>
      <description>&lt;p&gt;在第 18 讲中我们详细分析了组件的 3 个要素：数据模型、渲染和视图。虽然通过组件化的方式能够有效地将 Web 页面进行解耦，但另一个问题也随之出现，组件之间如何进行通信。这一讲我们就来分析组件化 Web 应用中的组件通信问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第21讲：你的代码到底是怎么编译的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC21%E8%AE%B2%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E5%88%B0%E5%BA%95%E6%98%AF%E6%80%8E%E4%B9%88%E7%BC%96%E8%AF%91%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC21%E8%AE%B2%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E5%88%B0%E5%BA%95%E6%98%AF%E6%80%8E%E4%B9%88%E7%BC%96%E8%AF%91%E7%9A%84/</guid>
      <description>&lt;p&gt;Node.js 的出现，越来越多前端自动化工具涌现出来，包括早期的 Grunt、Gulp 以及现在流行的 webpack。随着这些工具的功能愈发强大，其重要性也在不断提升，成熟的框架都已经将这些工具封装成专用的命令行工具，比如 angular-cli 和 vue-cli。这一课时我们将继续承接前面课程的“硬核”风格，通过分析 webpack(5.0.0-beta.23) 的源码来深入理解其原理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第22讲：如何合理搭建前端项目？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC22%E8%AE%B2%E5%A6%82%E4%BD%95%E5%90%88%E7%90%86%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC22%E8%AE%B2%E5%A6%82%E4%BD%95%E5%90%88%E7%90%86%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE/</guid>
      <description>&lt;p&gt;通过上一课时的学习，我们分析了前端构建工具 webpack 的底层原理，在理解原理之后再来探索构建工具的具体应用——如何合理搭建前端项目。当然，前端项目搭建并不只是使用构建工具这么简单，本课时我们将从项目组织、代码规范 2 个方面来进行分析。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第23讲：谈性能优化到底在谈什么？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC23%E8%AE%B2%E8%B0%88%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%88%B0%E5%BA%95%E5%9C%A8%E8%B0%88%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC23%E8%AE%B2%E8%B0%88%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E5%88%B0%E5%BA%95%E5%9C%A8%E8%B0%88%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;性能是前端领域关注度非常高的话题，因为页面性能的好坏会直接影响用户体验。为了不断提升用户体验，前端工程师往往会对页面性能不断改进，而这个改进的过程就叫性能优化。这一讲我们就详细探究性能优化相关的内容。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第24讲：你的代码是怎么成为黑客工具的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC24%E8%AE%B2%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E6%98%AF%E6%80%8E%E4%B9%88%E6%88%90%E4%B8%BA%E9%BB%91%E5%AE%A2%E5%B7%A5%E5%85%B7%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC24%E8%AE%B2%E4%BD%A0%E7%9A%84%E4%BB%A3%E7%A0%81%E6%98%AF%E6%80%8E%E4%B9%88%E6%88%90%E4%B8%BA%E9%BB%91%E5%AE%A2%E5%B7%A5%E5%85%B7%E7%9A%84/</guid>
      <description>&lt;p&gt;随着 Web 应用越来越广泛，各种 Web 安全问题也日益凸显，时常看到网上消息说，某网站用户账号信息遭泄露或盗取。&lt;/p&gt;&#xA;&lt;p&gt;Web 安全问题很容易成为前端工程师的盲点，一方面浏览器的各种安全策略给前端工程师造就了一种安全的假象；另一方面在通常的理解中，黑客更多的是通过系统漏洞和病毒程序来入侵服务端，让人容易形成安全问题只与服务端关系密切的错觉。这一课时我们就来分析前端相关的 3 个安全问题，从而让你开发的 Web 应用更安全。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第25讲：Node.j==全栈？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC25%E8%AE%B2node.j%E5%85%A8%E6%A0%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC25%E8%AE%B2node.j%E5%85%A8%E6%A0%88/</guid>
      <description>&lt;p&gt;提到 Node.js，相信大部分前端工程师都会想到基于它来开发服务端，只需要掌握 JavaScript 一门语言就可以成为全栈工程师，但其实 Node.js 的意义并不仅于此。&lt;/p&gt;&#xA;&lt;p&gt;很多高级语言，执行权限都可以触及操作系统，而运行在浏览器端的 JavaScript 则例外，浏览器为其创建的沙箱环境，把前端工程师封闭在一个编程世界的象牙塔里。不过 Node.js 的出现则弥补了这个缺憾，前端工程师也可以触达计算机世界的底层。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第26讲：常用的数据结构了解多少？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC26%E8%AE%B2%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC26%E8%AE%B2%E5%B8%B8%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BA%86%E8%A7%A3%E5%A4%9A%E5%B0%91/</guid>
      <description>&lt;p&gt;你好，我是你的前端课老师朱德龙，欢迎你和我一起学习第 26 课时的内容：“常用的数据结构了解多少”。&lt;/p&gt;&#xA;&lt;p&gt;数据结构是计算机中组织和存储数据的特定方式，也是对基本数据类型的一种高级抽象，它描述了数据之间的关系，以及操作数据的方法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第27讲：到底该不该了解算法？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC27%E8%AE%B2%E5%88%B0%E5%BA%95%E8%AF%A5%E4%B8%8D%E8%AF%A5%E4%BA%86%E8%A7%A3%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC27%E8%AE%B2%E5%88%B0%E5%BA%95%E8%AF%A5%E4%B8%8D%E8%AF%A5%E4%BA%86%E8%A7%A3%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;p&gt;算法是为了解决某个问题抽象而成的计算方法，我们可以简单地把算法比作一个拥有输入和输出的函数，这个函数总能在有限的时间经过有限的步骤给出特定的解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第28讲：你都了解过哪些编程方式？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC28%E8%AE%B2%E4%BD%A0%E9%83%BD%E4%BA%86%E8%A7%A3%E8%BF%87%E5%93%AA%E4%BA%9B%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC28%E8%AE%B2%E4%BD%A0%E9%83%BD%E4%BA%86%E8%A7%A3%E8%BF%87%E5%93%AA%E4%BA%9B%E7%BC%96%E7%A8%8B%E6%96%B9%E5%BC%8F/</guid>
      <description>&lt;p&gt;程序代码虽然在机器上运行，但终究是由人来编写和维护的，因此代码的可读性、可维护性在软件开发中尤为重要。所以我们在编写代码的时候通常会遵循一些编码规范或风格，比如 Google 提出了最著名的关于主流语言的风格指南，但这些都比较微观和具体，如果宏观且抽象地来看，编码风格可以上升为编程范式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第29讲：框架到底用了哪些设计模式？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC29%E8%AE%B2%E6%A1%86%E6%9E%B6%E5%88%B0%E5%BA%95%E7%94%A8%E4%BA%86%E5%93%AA%E4%BA%9B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC29%E8%AE%B2%E6%A1%86%E6%9E%B6%E5%88%B0%E5%BA%95%E7%94%A8%E4%BA%86%E5%93%AA%E4%BA%9B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
      <description>&lt;p&gt;这一讲我们继续来讲一个重要的抽象知识——设计模式，先来看看维基百科对设计模式的定义：&lt;/p&gt;&#xA;&lt;p&gt;设计模式（Design Pattern）是对软件设计中普遍存在（反复出现）的各种问题所提出的解决方案。设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第30讲：前端热点技术之Serverle</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC30%E8%AE%B2%E5%89%8D%E7%AB%AF%E7%83%AD%E7%82%B9%E6%8A%80%E6%9C%AF%E4%B9%8Bserverle/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC30%E8%AE%B2%E5%89%8D%E7%AB%AF%E7%83%AD%E7%82%B9%E6%8A%80%E6%9C%AF%E4%B9%8Bserverle/</guid>
      <description>&lt;p&gt;严格意义上来说，Serverless 并不属于前端技术，但对于那些想提升自己知识广度，想往全栈工程师方向发展的前端工程师而言，是一个非常高效的工具。而对于那些只想专注于前端领域的工程师而言，了解 Serverless 背后的思想，对提升开发思维也会有一定的帮助。&lt;/p&gt;</description>
    </item>
    <item>
      <title>第31讲：微前端与功能的可重用性</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC31%E8%AE%B2%E5%BE%AE%E5%89%8D%E7%AB%AF%E4%B8%8E%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%AF%E9%87%8D%E7%94%A8%E6%80%A7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%AC%AC31%E8%AE%B2%E5%BE%AE%E5%89%8D%E7%AB%AF%E4%B8%8E%E5%8A%9F%E8%83%BD%E7%9A%84%E5%8F%AF%E9%87%8D%E7%94%A8%E6%80%A7/</guid>
      <description>&lt;p&gt;在这之前，我们来思考一个问题，在日常开发中是怎么复用代码的？&lt;/p&gt;&#xA;&lt;p&gt;复制粘贴。这是初级工程师最容易采用的方式，该方式虽然简单有效，但会给代码维护带来很多问题，比如增加了很多重复的代码，复用代码逻辑发生变动时需要处处修改。因此，这种违反 DRY（Don&amp;rsquo;t Repeat Yourself）原则的方式应该尽量避免。&lt;/p&gt;</description>
    </item>
    <item>
      <title>加餐1：手写CSS预处理</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E5%8A%A0%E9%A4%901%E6%89%8B%E5%86%99css%E9%A2%84%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E5%8A%A0%E9%A4%901%E6%89%8B%E5%86%99css%E9%A2%84%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;功能需求&lt;/p&gt;&#xA;&lt;p&gt;这一课时我们来写一个 CSS 预处理器，它的功能可以理解为精简版的 stylus，主要实现的功能有：&lt;/p&gt;&#xA;&lt;p&gt;用空格和换行符替代花括号、冒号和分号；&lt;/p&gt;&#xA;&lt;p&gt;支持选择器的嵌套组合；&lt;/p&gt;</description>
    </item>
    <item>
      <title>加餐2：手写Promie、ayncawait</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E5%8A%A0%E9%A4%902%E6%89%8B%E5%86%99promieayncawait/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E5%8A%A0%E9%A4%902%E6%89%8B%E5%86%99promieayncawait/</guid>
      <description>&lt;p&gt;Promise、async/await 已经逐渐成为主流的异步处理方式，所以了解其实现原理非常重要。这一课时我们就来讲讲 Promise 和 async/await 的实现。&lt;/p&gt;&#xA;&lt;p&gt;Promise/A+ 规范&lt;/p&gt;&#xA;&lt;p&gt;在编写 Promise 之前，我们必须了解 Promise/A+ 规范。由于内容较长，下面我总结了几点，更详细的内容可以查阅 Promise/A+ 规范。&lt;/p&gt;</description>
    </item>
    <item>
      <title>结束语：谈谈前端工程师的职业规划（如何跳槽、如何晋升）</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%BB%93%E6%9D%9F%E8%AF%AD%E8%B0%88%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E5%A6%82%E4%BD%95%E8%B7%B3%E6%A7%BD%E5%A6%82%E4%BD%95%E6%99%8B%E5%8D%87/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E7%BB%93%E6%9D%9F%E8%AF%AD%E8%B0%88%E8%B0%88%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92%E5%A6%82%E4%BD%95%E8%B7%B3%E6%A7%BD%E5%A6%82%E4%BD%95%E6%99%8B%E5%8D%87/</guid>
      <description>&lt;p&gt;这一课时我们继续抛开技术，聊聊前端工程师职业规划相关的内容。我不打算给你制定一个最优的进阶路线，因为每个工程师所处的环境、工作经历、职业目标都不一样，有的名校高学历，有的大厂背景，有的自学成才……并没有一个万金油的最优进阶路线。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开篇词：带你一起筑建前端工程师的“护城河”</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E5%BC%80%E7%AF%87%E8%AF%8D%E5%B8%A6%E4%BD%A0%E4%B8%80%E8%B5%B7%E7%AD%91%E5%BB%BA%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%8A%A4%E5%9F%8E%E6%B2%B3/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E5%89%8D%E7%AB%AF%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6/%E5%BC%80%E7%AF%87%E8%AF%8D%E5%B8%A6%E4%BD%A0%E4%B8%80%E8%B5%B7%E7%AD%91%E5%BB%BA%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84%E6%8A%A4%E5%9F%8E%E6%B2%B3/</guid>
      <description>&lt;p&gt;你好，我是朱德龙，网名“亚里士朱德”，一直深耕在前端领域。&lt;/p&gt;&#xA;&lt;p&gt;我于 2011 年毕业后进入了中兴旗下子公司成为 JSP 全栈工程师，负责开发 B/S 架构的软件系统，参与过亿级数据量的复杂系统开发；后又加入创业公司作为核心骨干开发网上预约平台，作为资深前端工程师从 0 到 1 搭建并开发过云服务平台的前端项目。现在，我作为一家创业公司的前端负责人，带领团队完成大数据、重型计算、深度学习等业务场景的项目前端开发工作。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
