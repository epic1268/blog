<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>深入浅出计算机组成原理 on Docs</title>
    <link>https://politcloud.org/tags/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</link>
    <description>Recent content in 深入浅出计算机组成原理 on Docs</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 10 Jan 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://politcloud.org/tags/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>01__冯·诺依曼体系结构：计算机组成的金字塔</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/01__%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E7%9A%84%E9%87%91%E5%AD%97%E5%A1%94/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/01__%E5%86%AF%E8%AF%BA%E4%BE%9D%E6%9B%BC%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E7%9A%84%E9%87%91%E5%AD%97%E5%A1%94/</guid>
      <description>&lt;p&gt;学习计算机组成原理，到底是在学些什么呢？这个事儿，一两句话还真说不清楚。不过没关系，我们先从“装电脑”这个看起来没有什么技术含量的事情说起，来弄清楚计算机到底是由什么组成的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>02__给你一张知识地图，计算机组成原理应该这么学</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/02__%E7%BB%99%E4%BD%A0%E4%B8%80%E5%BC%A0%E7%9F%A5%E8%AF%86%E5%9C%B0%E5%9B%BE%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%BA%94%E8%AF%A5%E8%BF%99%E4%B9%88%E5%AD%A6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/02__%E7%BB%99%E4%BD%A0%E4%B8%80%E5%BC%A0%E7%9F%A5%E8%AF%86%E5%9C%B0%E5%9B%BE%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%BA%94%E8%AF%A5%E8%BF%99%E4%B9%88%E5%AD%A6/</guid>
      <description>&lt;p&gt;了解了现代计算机的基本硬件组成和背后最基本的冯·诺依曼体系结构，我们就可以正式进入计算机组成原理的学习了。在学习一个一个零散的知识点之前，我整理了一份学习地图，好让你对将要学习的内容有一个总纲层面的了解。&lt;/p&gt;</description>
    </item>
    <item>
      <title>03__通过你的CPU主频，我们来谈谈“性能”究竟是什么？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/03__%E9%80%9A%E8%BF%87%E4%BD%A0%E7%9A%84cpu%E4%B8%BB%E9%A2%91%E6%88%91%E4%BB%AC%E6%9D%A5%E8%B0%88%E8%B0%88%E6%80%A7%E8%83%BD%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/03__%E9%80%9A%E8%BF%87%E4%BD%A0%E7%9A%84cpu%E4%B8%BB%E9%A2%91%E6%88%91%E4%BB%AC%E6%9D%A5%E8%B0%88%E8%B0%88%E6%80%A7%E8%83%BD%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;“性能”这个词，不管是在日常生活还是写程序的时候，都经常被提到。比方说，买新电脑的时候，我们会说“原来的电脑性能跟不上了”；写程序的时候，我们会说，“这个程序性能需要优化一下”。那么，你有没有想过，我们常常挂在嘴边的“性能”到底指的是什么呢？我们能不能给性能下一个明确的定义，然后来进行准确的比较呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>04__穿越功耗墙，我们该从哪些方面提升“性能”？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/04__%E7%A9%BF%E8%B6%8A%E5%8A%9F%E8%80%97%E5%A2%99%E6%88%91%E4%BB%AC%E8%AF%A5%E4%BB%8E%E5%93%AA%E4%BA%9B%E6%96%B9%E9%9D%A2%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/04__%E7%A9%BF%E8%B6%8A%E5%8A%9F%E8%80%97%E5%A2%99%E6%88%91%E4%BB%AC%E8%AF%A5%E4%BB%8E%E5%93%AA%E4%BA%9B%E6%96%B9%E9%9D%A2%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD/</guid>
      <description>&lt;p&gt;上一讲，在讲 CPU 的性能时，我们提到了这样一个公式：&lt;/p&gt;&#xA;&lt;p&gt;程序的 CPU 执行时间 = 指令数×CPI×Clock Cycle Time&lt;/p&gt;&#xA;&lt;p&gt;这么来看，如果要提升计算机的性能，我们可以从指令数、CPI 以及 CPU 主频这三个地方入手。要搞定指令数或者 CPI，乍一看都不太容易。于是，研发 CPU 的硬件工程师们，从 80 年代开始，就挑上了 CPU 这个“软柿子”。在 CPU 上多放一点晶体管，不断提升 CPU 的时钟频率，这样就能让 CPU 变得更快，程序的执行时间就会缩短。&lt;/p&gt;</description>
    </item>
    <item>
      <title>05__计算机指令：让我们试试用纸带编程</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/05__%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8C%87%E4%BB%A4%E8%AE%A9%E6%88%91%E4%BB%AC%E8%AF%95%E8%AF%95%E7%94%A8%E7%BA%B8%E5%B8%A6%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/05__%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8C%87%E4%BB%A4%E8%AE%A9%E6%88%91%E4%BB%AC%E8%AF%95%E8%AF%95%E7%94%A8%E7%BA%B8%E5%B8%A6%E7%BC%96%E7%A8%8B/</guid>
      <description>&lt;p&gt;你在学写程序的时候，有没有想过，古老年代的计算机程序是怎么写出来的？&lt;/p&gt;&#xA;&lt;p&gt;上大学的时候，我们系里教 C 语言程序设计的老师说，他们当年学写程序的时候，不像现在这样，都是用一种古老的物理设备，叫作“打孔卡（Punched Card）”。用这种设备写程序，可没法像今天这样，掏出键盘就能打字，而是要先在脑海里或者在纸上写出程序，然后在纸带或者卡片上打洞。这样，要写的程序、要处理的数据，就变成一条条纸带或者一张张卡片，之后再交给当时的计算机去处理。&lt;/p&gt;</description>
    </item>
    <item>
      <title>06__指令跳转：原来if...else就是goto</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/06__%E6%8C%87%E4%BB%A4%E8%B7%B3%E8%BD%AC%E5%8E%9F%E6%9D%A5if...else%E5%B0%B1%E6%98%AFgoto/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/06__%E6%8C%87%E4%BB%A4%E8%B7%B3%E8%BD%AC%E5%8E%9F%E6%9D%A5if...else%E5%B0%B1%E6%98%AFgoto/</guid>
      <description>&lt;p&gt;上一讲，我们讲解了一行代码是怎么变成计算机指令的。你平时写的程序中，肯定不只有 int a = 1 这样最最简单的代码或者指令。我们总是要用到 if…else 这样的条件判断语句、while 和 for 这样的循环语句，还有函数或者过程调用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>07__函数调用：为什么会发生stack_overflow？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/07__%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%8F%91%E7%94%9Fstack_overflow/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/07__%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%8F%91%E7%94%9Fstack_overflow/</guid>
      <description>&lt;p&gt;在开发软件的过程中我们经常会遇到错误，如果你用 Google 搜过出错信息，那你多少应该都访问过&lt;a href=&#34;./stackoverflow.com.md&#34;&gt;Stack Overflow&lt;/a&gt;这个网站。作为全球最大的程序员问答网站，Stack Overflow 的名字来自于一个常见的报错，就是栈溢出（stack overflow）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>08__ELF和静态链接：为什么程序无法同时在Linux和Windows下运行？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/08__elf%E5%92%8C%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A8%8B%E5%BA%8F%E6%97%A0%E6%B3%95%E5%90%8C%E6%97%B6%E5%9C%A8linux%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/08__elf%E5%92%8C%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A8%8B%E5%BA%8F%E6%97%A0%E6%B3%95%E5%90%8C%E6%97%B6%E5%9C%A8linux%E5%92%8Cwindows%E4%B8%8B%E8%BF%90%E8%A1%8C/</guid>
      <description>&lt;p&gt;过去的三节，你和我一起通过一些简单的代码，看到了我们写的程序，是怎么变成一条条计算机指令的；if…else 这样的条件跳转是怎么样执行的；for/while 这样的循环是怎么执行的；函数间的相互调用是怎么发生的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>09__程序装载：“640K内存”真的不够用么？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/09__%E7%A8%8B%E5%BA%8F%E8%A3%85%E8%BD%BD640k%E5%86%85%E5%AD%98%E7%9C%9F%E7%9A%84%E4%B8%8D%E5%A4%9F%E7%94%A8%E4%B9%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/09__%E7%A8%8B%E5%BA%8F%E8%A3%85%E8%BD%BD640k%E5%86%85%E5%AD%98%E7%9C%9F%E7%9A%84%E4%B8%8D%E5%A4%9F%E7%94%A8%E4%B9%88/</guid>
      <description>&lt;p&gt;计算机这个行业的历史上有过很多成功的预言，最著名的自然是“摩尔定律”。当然免不了的也有很多“失败”的预测，其中一个最著名的就是，比尔·盖茨在上世纪 80 年代说的“640K ought to be enough for anyone”，也就是“640K 内存对哪个人来说都够用了”。&lt;/p&gt;</description>
    </item>
    <item>
      <title>10__动态链接：程序内部的“共享单车”</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/10__%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%86%85%E9%83%A8%E7%9A%84%E5%85%B1%E4%BA%AB%E5%8D%95%E8%BD%A6/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/10__%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E7%A8%8B%E5%BA%8F%E5%86%85%E9%83%A8%E7%9A%84%E5%85%B1%E4%BA%AB%E5%8D%95%E8%BD%A6/</guid>
      <description>&lt;p&gt;我们之前讲过，程序的链接，是把对应的不同文件内的代码段，合并到一起，成为最后的可执行文件。这个链接的方式，让我们在写代码的时候做到了“复用”。同样的功能代码只要写一次，然后提供给很多不同的程序进行链接就行了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>11__二进制编码：“手持两把锟斤拷，口中疾呼烫烫烫”？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/11__%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81%E6%89%8B%E6%8C%81%E4%B8%A4%E6%8A%8A%E9%94%9F%E6%96%A4%E6%8B%B7%E5%8F%A3%E4%B8%AD%E7%96%BE%E5%91%BC%E7%83%AB%E7%83%AB%E7%83%AB/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/11__%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%BC%96%E7%A0%81%E6%89%8B%E6%8C%81%E4%B8%A4%E6%8A%8A%E9%94%9F%E6%96%A4%E6%8B%B7%E5%8F%A3%E4%B8%AD%E7%96%BE%E5%91%BC%E7%83%AB%E7%83%AB%E7%83%AB/</guid>
      <description>&lt;p&gt;上算法和数据结构课的时候，老师们都会和你说，程序 = 算法 + 数据结构。如果对应到组成原理或者说硬件层面，算法就是我们前面讲的各种计算机指令，数据结构就对应我们接下来要讲的二进制数据。&lt;/p&gt;</description>
    </item>
    <item>
      <title>12__理解电路：从电报机到门电路，我们如何做到“千里传信”？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/12__%E7%90%86%E8%A7%A3%E7%94%B5%E8%B7%AF%E4%BB%8E%E7%94%B5%E6%8A%A5%E6%9C%BA%E5%88%B0%E9%97%A8%E7%94%B5%E8%B7%AF%E6%88%91%E4%BB%AC%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E5%8D%83%E9%87%8C%E4%BC%A0%E4%BF%A1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/12__%E7%90%86%E8%A7%A3%E7%94%B5%E8%B7%AF%E4%BB%8E%E7%94%B5%E6%8A%A5%E6%9C%BA%E5%88%B0%E9%97%A8%E7%94%B5%E8%B7%AF%E6%88%91%E4%BB%AC%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E5%8D%83%E9%87%8C%E4%BC%A0%E4%BF%A1/</guid>
      <description>&lt;p&gt;我们前面讲过机器指令，你应该知道，所有最终执行的程序其实都是使用“0”和“1”这样的二进制代码来表示的。上一讲里，我也向你展示了，对应的整数和字符串，其实也是用“0”和“1”这样的二进制代码来表示的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>13__加法器：如何像搭乐高一样搭电路（上）？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/13__%E5%8A%A0%E6%B3%95%E5%99%A8%E5%A6%82%E4%BD%95%E5%83%8F%E6%90%AD%E4%B9%90%E9%AB%98%E4%B8%80%E6%A0%B7%E6%90%AD%E7%94%B5%E8%B7%AF%E4%B8%8A/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/13__%E5%8A%A0%E6%B3%95%E5%99%A8%E5%A6%82%E4%BD%95%E5%83%8F%E6%90%AD%E4%B9%90%E9%AB%98%E4%B8%80%E6%A0%B7%E6%90%AD%E7%94%B5%E8%B7%AF%E4%B8%8A/</guid>
      <description>&lt;p&gt;上一讲，我们看到了如何通过电路，在计算机硬件层面设计最基本的单元，门电路。我给你看的门电路非常简单，只能做简单的“与（AND）”“或（OR）”“NOT（非）”和“异或（XOR）”，这样最基本的单比特逻辑运算。下面这些门电路的标识，你需要非常熟悉，后续的电路都是由这些门电路组合起来的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>14__乘法器：如何像搭乐高一样搭电路（下）？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/14__%E4%B9%98%E6%B3%95%E5%99%A8%E5%A6%82%E4%BD%95%E5%83%8F%E6%90%AD%E4%B9%90%E9%AB%98%E4%B8%80%E6%A0%B7%E6%90%AD%E7%94%B5%E8%B7%AF%E4%B8%8B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/14__%E4%B9%98%E6%B3%95%E5%99%A8%E5%A6%82%E4%BD%95%E5%83%8F%E6%90%AD%E4%B9%90%E9%AB%98%E4%B8%80%E6%A0%B7%E6%90%AD%E7%94%B5%E8%B7%AF%E4%B8%8B/</guid>
      <description>&lt;p&gt;和学习小学数学一样，学完了加法之后，我们自然而然就要来学习乘法。既然是退回到小学，我们就把问题搞得简单一点，先来看两个 4 位数的乘法。这里的 4 位数，当然还是一个二进制数。我们是人类而不是电路，自然还是用列竖式的方式来进行计算。&lt;/p&gt;</description>
    </item>
    <item>
      <title>15__浮点数和定点数（上）：怎么用有限的Bit表示尽可能多的信息？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/15__%E6%B5%AE%E7%82%B9%E6%95%B0%E5%92%8C%E5%AE%9A%E7%82%B9%E6%95%B0%E4%B8%8A%E6%80%8E%E4%B9%88%E7%94%A8%E6%9C%89%E9%99%90%E7%9A%84bit%E8%A1%A8%E7%A4%BA%E5%B0%BD%E5%8F%AF%E8%83%BD%E5%A4%9A%E7%9A%84%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/15__%E6%B5%AE%E7%82%B9%E6%95%B0%E5%92%8C%E5%AE%9A%E7%82%B9%E6%95%B0%E4%B8%8A%E6%80%8E%E4%B9%88%E7%94%A8%E6%9C%89%E9%99%90%E7%9A%84bit%E8%A1%A8%E7%A4%BA%E5%B0%BD%E5%8F%AF%E8%83%BD%E5%A4%9A%E7%9A%84%E4%BF%A1%E6%81%AF/</guid>
      <description>&lt;p&gt;在我们日常的程序开发中，不只会用到整数。更多情况下，我们用到的都是实数。比如，我们开发一个电商 App，商品的价格常常会是 9 块 9；再比如，现在流行的深度学习算法，对应的机器学习里的模型里的各个权重也都是 1.23 这样的数。可以说，在实际的应用过程中，这些有零有整的实数，是和整数同样常用的数据类型，我们也需要考虑到。&lt;/p&gt;</description>
    </item>
    <item>
      <title>16__浮点数和定点数（下）：深入理解浮点数到底有什么用？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/16__%E6%B5%AE%E7%82%B9%E6%95%B0%E5%92%8C%E5%AE%9A%E7%82%B9%E6%95%B0%E4%B8%8B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B5%AE%E7%82%B9%E6%95%B0%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/16__%E6%B5%AE%E7%82%B9%E6%95%B0%E5%92%8C%E5%AE%9A%E7%82%B9%E6%95%B0%E4%B8%8B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B5%AE%E7%82%B9%E6%95%B0%E5%88%B0%E5%BA%95%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8/</guid>
      <description>&lt;p&gt;上一讲，我们讲了用“浮点数”这样的数据形式，来表示一个不能确定大小的数据范围。浮点数可以大到 3.40×10383.40×1038&lt;/p&gt;</description>
    </item>
    <item>
      <title>17__建立数据通路（上）：指令&#43;运算=CPU</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/17__%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF%E4%B8%8A%E6%8C%87%E4%BB%A4&#43;%E8%BF%90%E7%AE%97cpu/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/17__%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF%E4%B8%8A%E6%8C%87%E4%BB%A4&#43;%E8%BF%90%E7%AE%97cpu/</guid>
      <description>&lt;p&gt;前面几讲里，我从两个不同的部分为你讲解了 CPU 的功能。&lt;/p&gt;&#xA;&lt;p&gt;在“&lt;strong&gt;指令&lt;/strong&gt;”部分，我为你讲解了计算机的“指令”是怎么运行的，也就是我们撰写的代码，是怎么变成一条条的机器能够理解的指令的，以及是按照什么样的顺序运行的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>18__建立数据通路（中）：指令&#43;运算=CPU</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/18__%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF%E4%B8%AD%E6%8C%87%E4%BB%A4&#43;%E8%BF%90%E7%AE%97cpu/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/18__%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF%E4%B8%AD%E6%8C%87%E4%BB%A4&#43;%E8%BF%90%E7%AE%97cpu/</guid>
      <description>&lt;p&gt;上一讲，我们看到，要能够实现一个完整的 CPU 功能，除了加法器这样的电路之外，我们还需要实现其他功能的电路。其中有一些电路，和我们实现过的加法器一样，只需要给定输入，就能得到固定的输出。这样的电路，我们称之为&lt;strong&gt;组合逻辑电路&lt;/strong&gt;（Combinational Logic Circuit）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>19__建立数据通路（下）：指令&#43;运算=CPU</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/19__%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF%E4%B8%8B%E6%8C%87%E4%BB%A4&#43;%E8%BF%90%E7%AE%97cpu/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/19__%E5%BB%BA%E7%AB%8B%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF%E4%B8%8B%E6%8C%87%E4%BB%A4&#43;%E8%BF%90%E7%AE%97cpu/</guid>
      <description>&lt;p&gt;上一讲，我们讲解了时钟信号是怎么实现的，以及怎么利用这个时钟信号，来控制数据的读写，可以使得我们能把需要的数据“存储”下来。那么，这一讲，我们要让计算机“自动”跑起来。&lt;/p&gt;</description>
    </item>
    <item>
      <title>20__面向流水线的指令设计（上）：一心多用的现代CPU</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/20__%E9%9D%A2%E5%90%91%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E6%8C%87%E4%BB%A4%E8%AE%BE%E8%AE%A1%E4%B8%8A%E4%B8%80%E5%BF%83%E5%A4%9A%E7%94%A8%E7%9A%84%E7%8E%B0%E4%BB%A3cpu/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/20__%E9%9D%A2%E5%90%91%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E6%8C%87%E4%BB%A4%E8%AE%BE%E8%AE%A1%E4%B8%8A%E4%B8%80%E5%BF%83%E5%A4%9A%E7%94%A8%E7%9A%84%E7%8E%B0%E4%BB%A3cpu/</guid>
      <description>&lt;p&gt;前面我们用了三讲，用一个个的电路组合，制作出了一个完整功能的 CPU。这里面一下子给你引入了三个“周期”的概念，分别是指令周期、机器周期（或者 CPU 周期）以及时钟周期。&lt;/p&gt;</description>
    </item>
    <item>
      <title>21__面向流水线的指令设计（下）：奔腾4是怎么失败的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/21__%E9%9D%A2%E5%90%91%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E6%8C%87%E4%BB%A4%E8%AE%BE%E8%AE%A1%E4%B8%8B%E5%A5%94%E8%85%BE4%E6%98%AF%E6%80%8E%E4%B9%88%E5%A4%B1%E8%B4%A5%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/21__%E9%9D%A2%E5%90%91%E6%B5%81%E6%B0%B4%E7%BA%BF%E7%9A%84%E6%8C%87%E4%BB%A4%E8%AE%BE%E8%AE%A1%E4%B8%8B%E5%A5%94%E8%85%BE4%E6%98%AF%E6%80%8E%E4%B9%88%E5%A4%B1%E8%B4%A5%E7%9A%84/</guid>
      <description>&lt;p&gt;上一讲，我给你初步介绍了 CPU 的流水线技术。乍看起来，流水线技术是一个提升性能的灵丹妙药。它通过把一条指令的操作切分成更细的多个步骤，可以避免 CPU“浪费”。每一个细分的流水线步骤都很简单，所以我们的单个时钟周期的时间就可以设得更短。这也变相地让 CPU 的主频提升得很快。&lt;/p&gt;</description>
    </item>
    <item>
      <title>22__冒险和预测（一）：hazard是“危”也是“机”</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/22__%E5%86%92%E9%99%A9%E5%92%8C%E9%A2%84%E6%B5%8B%E4%B8%80hazard%E6%98%AF%E5%8D%B1%E4%B9%9F%E6%98%AF%E6%9C%BA/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/22__%E5%86%92%E9%99%A9%E5%92%8C%E9%A2%84%E6%B5%8B%E4%B8%80hazard%E6%98%AF%E5%8D%B1%E4%B9%9F%E6%98%AF%E6%9C%BA/</guid>
      <description>&lt;p&gt;过去两讲，我为你讲解了流水线设计 CPU 所需要的基本概念。接下来，我们一起来看看，要想通过流水线设计来提升 CPU 的吞吐率，我们需要冒哪些风险。&lt;/p&gt;&#xA;&lt;p&gt;任何一本讲解 CPU 的流水线设计的教科书，都会提到流水线设计需要解决的三大冒险，分别是&lt;strong&gt;结构冒险&lt;/strong&gt;（Structural Hazard）、&lt;strong&gt;数据冒险&lt;/strong&gt;（Data Hazard）以及&lt;strong&gt;控制冒险&lt;/strong&gt;（Control Hazard）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>23__冒险和预测（二）：流水线里的接力赛</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/23__%E5%86%92%E9%99%A9%E5%92%8C%E9%A2%84%E6%B5%8B%E4%BA%8C%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%87%8C%E7%9A%84%E6%8E%A5%E5%8A%9B%E8%B5%9B/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/23__%E5%86%92%E9%99%A9%E5%92%8C%E9%A2%84%E6%B5%8B%E4%BA%8C%E6%B5%81%E6%B0%B4%E7%BA%BF%E9%87%8C%E7%9A%84%E6%8E%A5%E5%8A%9B%E8%B5%9B/</guid>
      <description>&lt;p&gt;上一讲，我为你讲解了结构冒险和数据冒险，以及应对这两种冒险的两个解决方案。一种方案是增加资源，通过添加指令缓存和数据缓存，让我们对于指令和数据的访问可以同时进行。这个办法帮助 CPU 解决了取指令和访问数据之间的资源冲突。另一种方案是直接进行等待。通过插入 NOP 这样的无效指令，等待之前的指令完成。这样我们就能解决不同指令之间的数据依赖问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>24__冒险和预测（三）：CPU里的“线程池”</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/24__%E5%86%92%E9%99%A9%E5%92%8C%E9%A2%84%E6%B5%8B%E4%B8%89cpu%E9%87%8C%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/24__%E5%86%92%E9%99%A9%E5%92%8C%E9%A2%84%E6%B5%8B%E4%B8%89cpu%E9%87%8C%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>&lt;p&gt;过去两讲，我为你讲解了通过增加资源、停顿等待以及主动转发数据的方式，来解决结构冒险和数据冒险问题。对于结构冒险，由于限制来自于同一时钟周期不同的指令，要访问相同的硬件资源，解决方案是增加资源。对于数据冒险，由于限制来自于数据之间的各种依赖，我们可以提前把数据转发到下一个指令。&lt;/p&gt;</description>
    </item>
    <item>
      <title>25__冒险和预测（四）：今天下雨了，明天还会下雨么？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/25__%E5%86%92%E9%99%A9%E5%92%8C%E9%A2%84%E6%B5%8B%E5%9B%9B%E4%BB%8A%E5%A4%A9%E4%B8%8B%E9%9B%A8%E4%BA%86%E6%98%8E%E5%A4%A9%E8%BF%98%E4%BC%9A%E4%B8%8B%E9%9B%A8%E4%B9%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/25__%E5%86%92%E9%99%A9%E5%92%8C%E9%A2%84%E6%B5%8B%E5%9B%9B%E4%BB%8A%E5%A4%A9%E4%B8%8B%E9%9B%A8%E4%BA%86%E6%98%8E%E5%A4%A9%E8%BF%98%E4%BC%9A%E4%B8%8B%E9%9B%A8%E4%B9%88/</guid>
      <description>&lt;p&gt;过去三讲，我主要为你介绍了结构冒险和数据冒险，以及增加资源、流水线停顿、操作数前推、乱序执行，这些解决各种“冒险”的技术方案。&lt;/p&gt;&#xA;&lt;p&gt;在结构冒险和数据冒险中，你会发现，所有的流水线停顿操作都要从&lt;strong&gt;指令执行阶段&lt;/strong&gt;开始。流水线的前两个阶段，也就是取指令（IF）和指令译码（ID）的阶段，是不需要停顿的。CPU 会在流水线里面直接去取下一条指令，然后进行译码。&lt;/p&gt;</description>
    </item>
    <item>
      <title>26__Superscalar和VLIW：如何让CPU的吞吐率超过1？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/26__superscalar%E5%92%8Cvliw%E5%A6%82%E4%BD%95%E8%AE%A9cpu%E7%9A%84%E5%90%9E%E5%90%90%E7%8E%87%E8%B6%85%E8%BF%871/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/26__superscalar%E5%92%8Cvliw%E5%A6%82%E4%BD%95%E8%AE%A9cpu%E7%9A%84%E5%90%9E%E5%90%90%E7%8E%87%E8%B6%85%E8%BF%871/</guid>
      <description>&lt;p&gt;到今天为止，专栏已经过半了。过去的 20 多讲里，我给你讲的内容，很多都是围绕着怎么提升 CPU 的性能这个问题展开的。&lt;/p&gt;&#xA;&lt;p&gt;我们先回顾一下&lt;a href=&#34;./93246.md&#34;&gt;第 4 讲&lt;/a&gt;，不知道你是否还记得这个公式：&lt;/p&gt;</description>
    </item>
    <item>
      <title>27__SIMD：如何加速矩阵乘法？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/27__simd%E5%A6%82%E4%BD%95%E5%8A%A0%E9%80%9F%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/27__simd%E5%A6%82%E4%BD%95%E5%8A%A0%E9%80%9F%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/</guid>
      <description>&lt;p&gt;上一讲里呢，我进一步为你讲解了 CPU 里的“黑科技”，分别是超标量（Superscalar）技术和超长指令字（VLIW）技术。&lt;/p&gt;&#xA;&lt;p&gt;超标量（Superscalar）技术能够让取指令以及指令译码也并行进行；在编译的过程，超长指令字（VLIW）技术可以搞定指令先后的依赖关系，使得一次可以取一个指令包。&lt;/p&gt;</description>
    </item>
    <item>
      <title>28__异常和中断：程序出错了怎么办？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/28__%E5%BC%82%E5%B8%B8%E5%92%8C%E4%B8%AD%E6%96%AD%E7%A8%8B%E5%BA%8F%E5%87%BA%E9%94%99%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/28__%E5%BC%82%E5%B8%B8%E5%92%8C%E4%B8%AD%E6%96%AD%E7%A8%8B%E5%BA%8F%E5%87%BA%E9%94%99%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/</guid>
      <description>&lt;p&gt;过去这么多讲，我们的程序都是自动运行且正常运行的。自动运行的意思是说，我们的程序和指令都是一条条顺序执行，你不需要通过键盘或者网络给这个程序任何输入。正常运行是说，我们的程序都是能够正常执行下去的，没有遇到计算溢出之类的程序错误。&lt;/p&gt;</description>
    </item>
    <item>
      <title>29__CISC和RISC：为什么手机芯片都是ARM？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/29__cisc%E5%92%8Crisc%E4%B8%BA%E4%BB%80%E4%B9%88%E6%89%8B%E6%9C%BA%E8%8A%AF%E7%89%87%E9%83%BD%E6%98%AFarm/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/29__cisc%E5%92%8Crisc%E4%B8%BA%E4%BB%80%E4%B9%88%E6%89%8B%E6%9C%BA%E8%8A%AF%E7%89%87%E9%83%BD%E6%98%AFarm/</guid>
      <description>&lt;p&gt;我在&lt;a href=&#34;./93359.md&#34;&gt;第 5 讲&lt;/a&gt;讲计算机指令的时候，给你看过 MIPS 体系结构计算机的机器指令格式。MIPS 的指令都是固定的 32 位长度，如果要用一个打孔卡来表示，并不复杂。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/epic1268/images/master/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/81d2f5219a692d7d88497c70be913595.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;MIPS 机器码的长度都是固定的 32 位&lt;/p&gt;</description>
    </item>
    <item>
      <title>30__GPU（上）：为什么玩游戏需要使用GPU？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/30__gpu%E4%B8%8A%E4%B8%BA%E4%BB%80%E4%B9%88%E7%8E%A9%E6%B8%B8%E6%88%8F%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8gpu/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/30__gpu%E4%B8%8A%E4%B8%BA%E4%BB%80%E4%B9%88%E7%8E%A9%E6%B8%B8%E6%88%8F%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8gpu/</guid>
      <description>&lt;p&gt;讲完了 CPU，我带你一起来看一看计算机里的另外一个处理器，也就是被称之为 GPU 的图形处理器。过去几年里，因为深度学习的大发展，GPU 一下子火起来了，似乎 GPU 成了一个专为深度学习而设计的处理器。那 GPU 的架构究竟是怎么回事儿呢？它最早是用来做什么而被设计出来的呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>31__GPU（下）：为什么深度学习需要使用GPU？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/31__gpu%E4%B8%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8gpu/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/31__gpu%E4%B8%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%9C%80%E8%A6%81%E4%BD%BF%E7%94%A8gpu/</guid>
      <description>&lt;p&gt;上一讲，我带你一起看了三维图形在计算机里的渲染过程。这个渲染过程，分成了顶点处理、图元处理、栅格化、片段处理，以及最后的像素操作。这一连串的过程，也被称之为图形流水线或者渲染管线。&lt;/p&gt;</description>
    </item>
    <item>
      <title>31-深入浅出计算机组成原理</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/31-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/31-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</guid>
      <description></description>
    </item>
    <item>
      <title>32__FPGA、ASIC和TPU（上）：计算机体系结构的黄金时代</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/32__fpgaasic%E5%92%8Ctpu%E4%B8%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E9%BB%84%E9%87%91%E6%97%B6%E4%BB%A3/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/32__fpgaasic%E5%92%8Ctpu%E4%B8%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E7%9A%84%E9%BB%84%E9%87%91%E6%97%B6%E4%BB%A3/</guid>
      <description>&lt;p&gt;过去很长一段时间里，大家在讲到高科技、互联网、信息技术的时候，谈的其实都是“软件”。从 1995 年微软发布 Windows 95 开始，高科技似乎就等同于软件业和互联网。著名的风险投资基金 Andreessen Horowitz 的合伙人 Marc Andreessen，在 2011 年发表了&lt;a href=&#34;./why-software-is-eating-the-world.md&#34;&gt;一篇博客&lt;/a&gt;，声称“Software is Eating the World”。Marc Andreessen，不仅是投资人，更是 Netscape 的创始人之一。他当时的搭档就是我们在前两讲提过的 SGI 创始人 Jim Clark。&lt;/p&gt;</description>
    </item>
    <item>
      <title>33__解读TPU：设计和拆解一块ASIC芯片</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/33__%E8%A7%A3%E8%AF%BBtpu%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8B%86%E8%A7%A3%E4%B8%80%E5%9D%97asic%E8%8A%AF%E7%89%87/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/33__%E8%A7%A3%E8%AF%BBtpu%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%8B%86%E8%A7%A3%E4%B8%80%E5%9D%97asic%E8%8A%AF%E7%89%87/</guid>
      <description>&lt;p&gt;过去几年，最知名、最具有实用价值的 ASIC 就是 TPU 了。各种解读 TPU 论文内容的文章网上也很多。不过，这些文章更多地是从机器学习或者 AI 的角度，来讲解 TPU。&lt;/p&gt;&#xA;&lt;p&gt;上一讲，我为你讲解了 FPGA 和 ASIC，讲解了 FPGA 如何实现通过“软件”来控制“硬件”，以及我们可以进一步把 FPGA 设计出来的电路变成一块 ASIC 芯片。&lt;/p&gt;</description>
    </item>
    <item>
      <title>34__理解虚拟机：你在云上拿到的计算机是什么样的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/34__%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BD%A0%E5%9C%A8%E4%BA%91%E4%B8%8A%E6%8B%BF%E5%88%B0%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/34__%E7%90%86%E8%A7%A3%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%BD%A0%E5%9C%A8%E4%BA%91%E4%B8%8A%E6%8B%BF%E5%88%B0%E7%9A%84%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84/</guid>
      <description>&lt;p&gt;上世纪 60 年代，计算机还是异常昂贵的设备，实际的计算机使用需求要面临两个挑战。第一，计算机特别昂贵，我们要尽可能地让计算机忙起来，一直不断地去处理一些计算任务。第二，很多工程师想要用上计算机，但是没有能力自己花钱买一台，所以呢，我们要让很多人可以共用一台计算机。&lt;/p&gt;</description>
    </item>
    <item>
      <title>35__存储器层次结构全景：数据存储的大金字塔长什么样？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/35__%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E5%85%A8%E6%99%AF%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%9A%84%E5%A4%A7%E9%87%91%E5%AD%97%E5%A1%94%E9%95%BF%E4%BB%80%E4%B9%88%E6%A0%B7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/35__%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E5%85%A8%E6%99%AF%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%9A%84%E5%A4%A7%E9%87%91%E5%AD%97%E5%A1%94%E9%95%BF%E4%BB%80%E4%B9%88%E6%A0%B7/</guid>
      <description>&lt;p&gt;今天开始，我们要进入到计算机另一个重要的组成部分，存储器。&lt;/p&gt;&#xA;&lt;p&gt;如果你自己组装过 PC 机，你肯定知道，想要 CPU，我们只要买一个就好了，但是存储器，却有不同的设备要买。比方说，我们要买内存，还要买硬盘。买硬盘的时候，不少人会买一块 SSD 硬盘作为系统盘，还会买上一块大容量的 HDD 机械硬盘作为数据盘。内存和硬盘都是我们的存储设备。而且，像硬盘这样的持久化存储设备，同时也是一个 I/O 设备。&lt;/p&gt;</description>
    </item>
    <item>
      <title>36__局部性原理：数据库性能跟不上，加个缓存就好了？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/36__%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%A7%E8%83%BD%E8%B7%9F%E4%B8%8D%E4%B8%8A%E5%8A%A0%E4%B8%AA%E7%BC%93%E5%AD%98%E5%B0%B1%E5%A5%BD%E4%BA%86/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/36__%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%A7%E8%83%BD%E8%B7%9F%E4%B8%8D%E4%B8%8A%E5%8A%A0%E4%B8%AA%E7%BC%93%E5%AD%98%E5%B0%B1%E5%A5%BD%E4%BA%86/</guid>
      <description>&lt;p&gt;平时进行服务端软件开发的时候，我们通常会把数据存储在数据库里。而服务端系统遇到的第一个性能瓶颈，往往就发生在访问数据库的时候。这个时候，大部分工程师和架构师会拿出一种叫作“缓存”的武器，通过使用 Redis 或者 Memcache 这样的开源软件，在数据库前面提供一层缓存的数据，来缓解数据库面临的压力，提升服务端的程序性能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>37__理解CPU_Cache（上）：“4毫秒”究竟值多少钱？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/37__%E7%90%86%E8%A7%A3cpu_cache%E4%B8%8A4%E6%AF%AB%E7%A7%92%E7%A9%B6%E7%AB%9F%E5%80%BC%E5%A4%9A%E5%B0%91%E9%92%B1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/37__%E7%90%86%E8%A7%A3cpu_cache%E4%B8%8A4%E6%AF%AB%E7%A7%92%E7%A9%B6%E7%AB%9F%E5%80%BC%E5%A4%9A%E5%B0%91%E9%92%B1/</guid>
      <description>&lt;p&gt;在这一节内容开始之前，我们先来看一个 3 行的小程序。你可以猜一猜，这个程序里的循环 1 和循环 2，运行所花费的时间会差多少？你可以先思考几分钟，然后再看我下面的解释。&lt;/p&gt;</description>
    </item>
    <item>
      <title>38__高速缓存（下）：你确定你的数据更新了么？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/38__%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E4%B8%8B%E4%BD%A0%E7%A1%AE%E5%AE%9A%E4%BD%A0%E7%9A%84%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E4%BA%86%E4%B9%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/38__%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E4%B8%8B%E4%BD%A0%E7%A1%AE%E5%AE%9A%E4%BD%A0%E7%9A%84%E6%95%B0%E6%8D%AE%E6%9B%B4%E6%96%B0%E4%BA%86%E4%B9%88/</guid>
      <description>&lt;p&gt;在我工作的十几年里，写了很多 Java 的程序。同时，我也面试过大量的 Java 工程师。对于一些表示自己深入了解和擅长多线程的同学，我经常会问这样一个面试题：“&lt;strong&gt;volatile 这个关键字有什么作用？&lt;/strong&gt;”如果你或者你的朋友写过 Java 程序，不妨来一起试着回答一下这个问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>39__MESI协议：如何让多核CPU的高速缓存保持一致？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/39__mesi%E5%8D%8F%E8%AE%AE%E5%A6%82%E4%BD%95%E8%AE%A9%E5%A4%9A%E6%A0%B8cpu%E7%9A%84%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/39__mesi%E5%8D%8F%E8%AE%AE%E5%A6%82%E4%BD%95%E8%AE%A9%E5%A4%9A%E6%A0%B8cpu%E7%9A%84%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4/</guid>
      <description>&lt;p&gt;你平时用的电脑，应该都是多核的 CPU。多核 CPU 有很多好处，其中最重要的一个就是，它使得我们在不能提升 CPU 的主频之后，找到了另一种提升 CPU 吞吐率的办法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>40__理解内存（上）：虚拟内存和内存保护是什么？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/40__%E7%90%86%E8%A7%A3%E5%86%85%E5%AD%98%E4%B8%8A%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E5%92%8C%E5%86%85%E5%AD%98%E4%BF%9D%E6%8A%A4%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/40__%E7%90%86%E8%A7%A3%E5%86%85%E5%AD%98%E4%B8%8A%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E5%92%8C%E5%86%85%E5%AD%98%E4%BF%9D%E6%8A%A4%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>&lt;p&gt;我们在专栏一开始说过，计算机有五大组成部分，分别是：运算器、控制器、存储器、输入设备和输出设备。如果说计算机最重要的组件，是承担了运算器和控制器作用的 CPU，那内存就是我们第二重要的组件了。内存是五大组成部分里面的存储器，我们的指令和数据，都需要先加载到内存里面，才会被 CPU 拿去执行。&lt;/p&gt;</description>
    </item>
    <item>
      <title>41__理解内存（下）：解析TLB和内存保护</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/41__%E7%90%86%E8%A7%A3%E5%86%85%E5%AD%98%E4%B8%8B%E8%A7%A3%E6%9E%90tlb%E5%92%8C%E5%86%85%E5%AD%98%E4%BF%9D%E6%8A%A4/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/41__%E7%90%86%E8%A7%A3%E5%86%85%E5%AD%98%E4%B8%8B%E8%A7%A3%E6%9E%90tlb%E5%92%8C%E5%86%85%E5%AD%98%E4%BF%9D%E6%8A%A4/</guid>
      <description>&lt;p&gt;机器指令里面的内存地址都是虚拟内存地址。程序里面的每一个进程，都有一个属于自己的虚拟内存地址空间。我们可以通过地址转换来获得最终的实际物理地址。我们每一个指令都存放在内存里面，每一条数据都存放在内存里面。因此，“地址转换”是一个非常高频的动作，“地址转换”的性能就变得至关重要了。这就是我们今天要讲的&lt;strong&gt;第一个问题&lt;/strong&gt;，也就是&lt;strong&gt;性能问题&lt;/strong&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>42__总线：计算机内部的高速公路</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/42__%E6%80%BB%E7%BA%BF%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E9%83%A8%E7%9A%84%E9%AB%98%E9%80%9F%E5%85%AC%E8%B7%AF/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/42__%E6%80%BB%E7%BA%BF%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E9%83%A8%E7%9A%84%E9%AB%98%E9%80%9F%E5%85%AC%E8%B7%AF/</guid>
      <description>&lt;p&gt;专栏讲到现在，如果我再问你，计算机五大组成部分是什么，应该没有人不知道了吧？我们这一节要讲的内容，依然要围绕这五大部分，控制器、运算器、存储器、输入设备和输出设备。&lt;/p&gt;</description>
    </item>
    <item>
      <title>43__输入输出设备：我们并不是只能用灯泡显示“0”和“1”</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/43__%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87%E6%88%91%E4%BB%AC%E5%B9%B6%E4%B8%8D%E6%98%AF%E5%8F%AA%E8%83%BD%E7%94%A8%E7%81%AF%E6%B3%A1%E6%98%BE%E7%A4%BA0%E5%92%8C1/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/43__%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E8%AE%BE%E5%A4%87%E6%88%91%E4%BB%AC%E5%B9%B6%E4%B8%8D%E6%98%AF%E5%8F%AA%E8%83%BD%E7%94%A8%E7%81%AF%E6%B3%A1%E6%98%BE%E7%A4%BA0%E5%92%8C1/</guid>
      <description>&lt;p&gt;我们在前面的章节搭建了最简单的电路，在这里面，计算机的输入设备就是一个一个开关，输出设备呢，是一个一个灯泡。的确，早期发展的时候，计算机的核心是做“计算”。我们从“计算机”这个名字上也能看出这一点。不管是中文名字“计算机”，还是英文名字“Computer”，核心都是在”计算“这两个字上。不过，到了今天，这些“计算”的工作，更多的是一个幕后工作。&lt;/p&gt;</description>
    </item>
    <item>
      <title>44__理解IO_WAIT：I_O性能到底是怎么回事儿？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/44__%E7%90%86%E8%A7%A3io_waiti_o%E6%80%A7%E8%83%BD%E5%88%B0%E5%BA%95%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B%E5%84%BF/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/44__%E7%90%86%E8%A7%A3io_waiti_o%E6%80%A7%E8%83%BD%E5%88%B0%E5%BA%95%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B%E5%84%BF/</guid>
      <description>&lt;p&gt;在专栏一开始的时候，我和你说过，在计算机组成原理这门课里面，很多设计的核心思路，都来源于性能。在前面讲解 CPU 的时候，相信你已经有了切身的感受了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>45__机械硬盘：Google早期用过的“黑科技”</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/45__%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98google%E6%97%A9%E6%9C%9F%E7%94%A8%E8%BF%87%E7%9A%84%E9%BB%91%E7%A7%91%E6%8A%80/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/45__%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98google%E6%97%A9%E6%9C%9F%E7%94%A8%E8%BF%87%E7%9A%84%E9%BB%91%E7%A7%91%E6%8A%80/</guid>
      <description>&lt;p&gt;在 1991 年，我刚接触计算机的时候，很多计算机还没有硬盘。整个操作系统都安装在 5 寸或者 3.5 寸的软盘里。不过，很快大部分计算机都开始用上了直接安装在主板上的机械硬盘。到了今天，更早的软盘早已经被淘汰了。在个人电脑和服务器里，更晚出现的光盘也已经很少用了。&lt;/p&gt;</description>
    </item>
    <item>
      <title>46__SSD硬盘（上）：如何完成性能优化的KPI？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/46__ssd%E7%A1%AC%E7%9B%98%E4%B8%8A%E5%A6%82%E4%BD%95%E5%AE%8C%E6%88%90%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84kpi/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/46__ssd%E7%A1%AC%E7%9B%98%E4%B8%8A%E5%A6%82%E4%BD%95%E5%AE%8C%E6%88%90%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84kpi/</guid>
      <description>&lt;p&gt;随着 3D 垂直封装技术和 QLC 技术的出现，今年的“618”，SSD 硬盘的价格进一步大跳水，趁着这个机会，我把自己电脑上的仓库盘，从 HDD 换成了 SSD 硬盘。我的个人电脑彻底摆脱了机械硬盘。&lt;/p&gt;</description>
    </item>
    <item>
      <title>47__SSD硬盘（下）：如何完成性能优化的KPI？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/47__ssd%E7%A1%AC%E7%9B%98%E4%B8%8B%E5%A6%82%E4%BD%95%E5%AE%8C%E6%88%90%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84kpi/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/47__ssd%E7%A1%AC%E7%9B%98%E4%B8%8B%E5%A6%82%E4%BD%95%E5%AE%8C%E6%88%90%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84kpi/</guid>
      <description>&lt;p&gt;如果你平时用的是 Windows 电脑，你会发现，用了 SSD 的系统盘，就不能用磁盘碎片整理功能。这是因为，一旦主动去运行磁盘碎片整理功能，就会发生一次块的擦除，对应块的寿命就少了一点点。这个 SSD 的擦除寿命的问题，不仅会影响像磁盘碎片整理这样的功能，其实也很影响我们的日常使用。&lt;/p&gt;</description>
    </item>
    <item>
      <title>48__DMA：为什么Kafka这么快？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/48__dma%E4%B8%BA%E4%BB%80%E4%B9%88kafka%E8%BF%99%E4%B9%88%E5%BF%AB/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/48__dma%E4%B8%BA%E4%BB%80%E4%B9%88kafka%E8%BF%99%E4%B9%88%E5%BF%AB/</guid>
      <description>&lt;p&gt;过去几年里，整个计算机产业届，都在尝试不停地提升 I/O 设备的速度。把 HDD 硬盘换成 SSD 硬盘，我们仍然觉得不够快；用 PCI Express 接口的 SSD 硬盘替代 SATA 接口的 SSD 硬盘，我们还是觉得不够快，所以，现在就有了傲腾（Optane）这样的技术。&lt;/p&gt;</description>
    </item>
    <item>
      <title>49__数据完整性（上）：硬件坏了怎么办？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/49__%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7%E4%B8%8A%E7%A1%AC%E4%BB%B6%E5%9D%8F%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/49__%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7%E4%B8%8A%E7%A1%AC%E4%BB%B6%E5%9D%8F%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/</guid>
      <description>&lt;p&gt;2012 年的时候，我第一次在工作中，遇到一个因为硬件的不可靠性引发的 Bug。正是因为这个 Bug，让我开始逐步花很多的时间，去复习回顾整个计算机系统里面的底层知识。&lt;/p&gt;</description>
    </item>
    <item>
      <title>50__数据完整性（下）：如何还原犯罪现场？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/50__%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7%E4%B8%8B%E5%A6%82%E4%BD%95%E8%BF%98%E5%8E%9F%E7%8A%AF%E7%BD%AA%E7%8E%B0%E5%9C%BA/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/50__%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7%E4%B8%8B%E5%A6%82%E4%BD%95%E8%BF%98%E5%8E%9F%E7%8A%AF%E7%BD%AA%E7%8E%B0%E5%9C%BA/</guid>
      <description>&lt;p&gt;讲完校验码之后，你现在应该知道，无论是奇偶校验码，还是 CRC 这样的循环校验码，都只能告诉我们一个事情，就是你的数据出错了。所以，校验码也被称为检错码（Error Detecting Code）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>51__分布式计算：如果所有人的大脑都联网会怎样？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/51__%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%A6%82%E6%9E%9C%E6%89%80%E6%9C%89%E4%BA%BA%E7%9A%84%E5%A4%A7%E8%84%91%E9%83%BD%E8%81%94%E7%BD%91%E4%BC%9A%E6%80%8E%E6%A0%B7/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/51__%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%A6%82%E6%9E%9C%E6%89%80%E6%9C%89%E4%BA%BA%E7%9A%84%E5%A4%A7%E8%84%91%E9%83%BD%E8%81%94%E7%BD%91%E4%BC%9A%E6%80%8E%E6%A0%B7/</guid>
      <description>&lt;p&gt;今天是原理篇的最后一篇。过去 50 讲，我们一起看了抽象概念上的计算机指令，看了这些指令怎么拆解成一个个简单的电路，以及 CPU 是怎么通过一个一个的电路组成的。我们还一起看了高速缓存、内存、SSD 硬盘和机械硬盘，以及这些组件又是怎么通过总线和 CPU 连在一起相互通信的。&lt;/p&gt;</description>
    </item>
    <item>
      <title>52__设计大型DMP系统（上）：MongoDB并不是什么灵丹妙药</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/52__%E8%AE%BE%E8%AE%A1%E5%A4%A7%E5%9E%8Bdmp%E7%B3%BB%E7%BB%9F%E4%B8%8Amongodb%E5%B9%B6%E4%B8%8D%E6%98%AF%E4%BB%80%E4%B9%88%E7%81%B5%E4%B8%B9%E5%A6%99%E8%8D%AF/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/52__%E8%AE%BE%E8%AE%A1%E5%A4%A7%E5%9E%8Bdmp%E7%B3%BB%E7%BB%9F%E4%B8%8Amongodb%E5%B9%B6%E4%B8%8D%E6%98%AF%E4%BB%80%E4%B9%88%E7%81%B5%E4%B8%B9%E5%A6%99%E8%8D%AF/</guid>
      <description>&lt;p&gt;如果你一讲一讲跟到现在，那首先要恭喜你，马上就看到胜利的曙光了。过去的 50 多讲里，我把计算机组成原理中的各个知识点，一点一点和你拆解了。对于其中的很多知识点，我也给了相应的代码示例和实际的应用案例。&lt;/p&gt;</description>
    </item>
    <item>
      <title>53__设计大型DMP系统（下）：SSD拯救了所有的DBA</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/53__%E8%AE%BE%E8%AE%A1%E5%A4%A7%E5%9E%8Bdmp%E7%B3%BB%E7%BB%9F%E4%B8%8Bssd%E6%8B%AF%E6%95%91%E4%BA%86%E6%89%80%E6%9C%89%E7%9A%84dba/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/53__%E8%AE%BE%E8%AE%A1%E5%A4%A7%E5%9E%8Bdmp%E7%B3%BB%E7%BB%9F%E4%B8%8Bssd%E6%8B%AF%E6%95%91%E4%BA%86%E6%89%80%E6%9C%89%E7%9A%84dba/</guid>
      <description>&lt;p&gt;上一讲里，根据 DMP 系统的各个应用场景，我们从抽象的原理层面，选择了 AeroSpike 作为 KV 数据库，Kafka 作为数据管道，Hadoop/Hive 来作为数据仓库。&lt;/p&gt;</description>
    </item>
    <item>
      <title>54__理解Disruptor（上）：带你体会CPU高速缓存的风驰电掣</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/54__%E7%90%86%E8%A7%A3disruptor%E4%B8%8A%E5%B8%A6%E4%BD%A0%E4%BD%93%E4%BC%9Acpu%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E7%9A%84%E9%A3%8E%E9%A9%B0%E7%94%B5%E6%8E%A3/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/54__%E7%90%86%E8%A7%A3disruptor%E4%B8%8A%E5%B8%A6%E4%BD%A0%E4%BD%93%E4%BC%9Acpu%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98%E7%9A%84%E9%A3%8E%E9%A9%B0%E7%94%B5%E6%8E%A3/</guid>
      <description>&lt;p&gt;坚持到底就是胜利，终于我们一起来到了专栏的最后一个主题。让我一起带你来看一看，CPU 到底能有多快。在接下来的两讲里，我会带你一起来看一个开源项目 Disruptor。看看我们怎么利用 CPU 和高速缓存的硬件特性，来设计一个对于性能有极限追求的系统。&lt;/p&gt;</description>
    </item>
    <item>
      <title>55__理解Disruptor（下）：不需要换挡和踩刹车的CPU，有多快？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/55__%E7%90%86%E8%A7%A3disruptor%E4%B8%8B%E4%B8%8D%E9%9C%80%E8%A6%81%E6%8D%A2%E6%8C%A1%E5%92%8C%E8%B8%A9%E5%88%B9%E8%BD%A6%E7%9A%84cpu%E6%9C%89%E5%A4%9A%E5%BF%AB/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/55__%E7%90%86%E8%A7%A3disruptor%E4%B8%8B%E4%B8%8D%E9%9C%80%E8%A6%81%E6%8D%A2%E6%8C%A1%E5%92%8C%E8%B8%A9%E5%88%B9%E8%BD%A6%E7%9A%84cpu%E6%9C%89%E5%A4%9A%E5%BF%AB/</guid>
      <description>&lt;p&gt;上一讲，我们学习了一个精妙的想法，Disruptor 通过缓存行填充，来利用好 CPU 的高速缓存。不知道你做完课后思考题之后，有没有体会到高速缓存在实践中带来的速度提升呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>FAQ第二期__世界上第一个编程语言是怎么来的？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/faq%E7%AC%AC%E4%BA%8C%E6%9C%9F__%E4%B8%96%E7%95%8C%E4%B8%8A%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%98%AF%E6%80%8E%E4%B9%88%E6%9D%A5%E7%9A%84/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/faq%E7%AC%AC%E4%BA%8C%E6%9C%9F__%E4%B8%96%E7%95%8C%E4%B8%8A%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E6%98%AF%E6%80%8E%E4%B9%88%E6%9D%A5%E7%9A%84/</guid>
      <description>&lt;p&gt;你好，我是徐文浩，今天是第二期 FAQ，我搜集了第 3 讲到第 6 讲，大家在留言区问的比较多的问题，来做一次集中解答。&lt;/p&gt;&#xA;&lt;p&gt;有些问题，可能你已经知道了答案，不妨看看和我的理解是否一样；如果这些问题刚好你也有，那可要认真看啦！&lt;/p&gt;</description>
    </item>
    <item>
      <title>FAQ第一期__学与不学，知识就在那里，不如就先学好了</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/faq%E7%AC%AC%E4%B8%80%E6%9C%9F__%E5%AD%A6%E4%B8%8E%E4%B8%8D%E5%AD%A6%E7%9F%A5%E8%AF%86%E5%B0%B1%E5%9C%A8%E9%82%A3%E9%87%8C%E4%B8%8D%E5%A6%82%E5%B0%B1%E5%85%88%E5%AD%A6%E5%A5%BD%E4%BA%86/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/faq%E7%AC%AC%E4%B8%80%E6%9C%9F__%E5%AD%A6%E4%B8%8E%E4%B8%8D%E5%AD%A6%E7%9F%A5%E8%AF%86%E5%B0%B1%E5%9C%A8%E9%82%A3%E9%87%8C%E4%B8%8D%E5%A6%82%E5%B0%B1%E5%85%88%E5%AD%A6%E5%A5%BD%E4%BA%86/</guid>
      <description>&lt;p&gt;你好，我是徐文浩。专栏上线三个多月，我们已经进入后半段。&lt;/p&gt;&#xA;&lt;p&gt;首先，恭喜跟到这里的同学，很快你就可以看到胜利的曙光了。如果你已经掉队了，不要紧，现在继续依然来得及。&lt;/p&gt;</description>
    </item>
    <item>
      <title>结束语__知也无涯，愿你也享受发现的乐趣</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%BB%93%E6%9D%9F%E8%AF%AD__%E7%9F%A5%E4%B9%9F%E6%97%A0%E6%B6%AF%E6%84%BF%E4%BD%A0%E4%B9%9F%E4%BA%AB%E5%8F%97%E5%8F%91%E7%8E%B0%E7%9A%84%E4%B9%90%E8%B6%A3/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%BB%93%E6%9D%9F%E8%AF%AD__%E7%9F%A5%E4%B9%9F%E6%97%A0%E6%B6%AF%E6%84%BF%E4%BD%A0%E4%B9%9F%E4%BA%AB%E5%8F%97%E5%8F%91%E7%8E%B0%E7%9A%84%E4%B9%90%E8%B6%A3/</guid>
      <description>&lt;p&gt;你好，我是徐文浩。伴随着无数个不眠之夜，“深入浅出计算机组成原理”专栏终于来到了结束语。&lt;/p&gt;&#xA;&lt;p&gt;去年 11 月份，极客时间找到我，我开始构思这个专栏。本以为今年 4、5 月份就能把专栏写完。结果，一方面因为创业过程中时间总是不够用，另一方面，写出有价值内容的并不是一件容易的事情，直到 9 月 10 号的凌晨，我才写完这最后一篇结束语。原本计划的 45 讲，也在这个过程中变成了近 60 讲。现在回过去看，写这个“深入浅出计算机组成原理”专栏，是一个远比想象中要困难的挑战，但同时也是一个有趣的发现之旅。&lt;/p&gt;</description>
    </item>
    <item>
      <title>开篇词__为什么你需要学习计算机组成原理？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%BC%80%E7%AF%87%E8%AF%8D__%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E9%9C%80%E8%A6%81%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E5%BC%80%E7%AF%87%E8%AF%8D__%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E9%9C%80%E8%A6%81%E5%AD%A6%E4%B9%A0%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;p&gt;你好，我是徐文浩，一个正在创业的工程师。目前主要是通过自然语言处理技术，为走向海外的中国企业提供英语的智能客服和社交网络营销服务。&lt;/p&gt;&#xA;&lt;p&gt;2005 年从上海交通大学计算机系毕业之后，我一直以写代码为生。如果从 7 岁第一次在少年宫写程序开始算起，到今天，我的码龄快有 30 岁了。这些年里，我在 Trilogy Software 写过各种大型企业软件；在 MediaV 这样的广告科技公司，从零开始搭建过支撑每天百亿流量的广告算法系统；2015 年，我又加入了拼多多，参与重写拼多多的交易系统。&lt;/p&gt;</description>
    </item>
    <item>
      <title>特别加餐__我的一天怎么过？</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%89%B9%E5%88%AB%E5%8A%A0%E9%A4%90__%E6%88%91%E7%9A%84%E4%B8%80%E5%A4%A9%E6%80%8E%E4%B9%88%E8%BF%87/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%89%B9%E5%88%AB%E5%8A%A0%E9%A4%90__%E6%88%91%E7%9A%84%E4%B8%80%E5%A4%A9%E6%80%8E%E4%B9%88%E8%BF%87/</guid>
      <description>&lt;p&gt;你好，我是徐文浩。专栏更新到 50 多篇，快要结束了。在进入实战篇之前，我想先和你分享一个专栏之外的话题，那就是我的一天是怎么过的。&lt;/p&gt;&#xA;&lt;p&gt;为什么想写这篇文章呢？主要目的是“破除神话”。周围一些朋友说，你在创业很厉害；也有朋友说，你能写专栏很厉害。其实我觉得自己和大家一样，就是一个普普通通的工程师，每一天都是普通且忙碌的。同时，我也希望通过这篇文章，能够拉近和你的距离，在专栏快要完结之际，可以在未来和你有更多的交流。&lt;/p&gt;</description>
    </item>
    <item>
      <title>特别加餐__我在2019年F8大会的两日见闻录</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%89%B9%E5%88%AB%E5%8A%A0%E9%A4%90__%E6%88%91%E5%9C%A82019%E5%B9%B4f8%E5%A4%A7%E4%BC%9A%E7%9A%84%E4%B8%A4%E6%97%A5%E8%A7%81%E9%97%BB%E5%BD%95/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%89%B9%E5%88%AB%E5%8A%A0%E9%A4%90__%E6%88%91%E5%9C%A82019%E5%B9%B4f8%E5%A4%A7%E4%BC%9A%E7%9A%84%E4%B8%A4%E6%97%A5%E8%A7%81%E9%97%BB%E5%BD%95/</guid>
      <description>&lt;p&gt;你好，我是徐文浩。4 月 30 日，我在美国圣何塞参加了 F8 大会，趁此机会和你分享一下，我在大会上的一些见闻。下面是我参会这两天写的见闻录，分享给你。希望可以看到更多技术人走出去，抬头看看世界，丰富自己的见识和经历。&lt;/p&gt;</description>
    </item>
    <item>
      <title>用户故事__赵文海：怕什么真理无穷，进一寸有一寸的欢喜</title>
      <link>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B__%E8%B5%B5%E6%96%87%E6%B5%B7%E6%80%95%E4%BB%80%E4%B9%88%E7%9C%9F%E7%90%86%E6%97%A0%E7%A9%B7%E8%BF%9B%E4%B8%80%E5%AF%B8%E6%9C%89%E4%B8%80%E5%AF%B8%E7%9A%84%E6%AC%A2%E5%96%9C/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://politcloud.org/post/%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B__%E8%B5%B5%E6%96%87%E6%B5%B7%E6%80%95%E4%BB%80%E4%B9%88%E7%9C%9F%E7%90%86%E6%97%A0%E7%A9%B7%E8%BF%9B%E4%B8%80%E5%AF%B8%E6%9C%89%E4%B8%80%E5%AF%B8%E7%9A%84%E6%AC%A2%E5%96%9C/</guid>
      <description>&lt;p&gt;大家好，我是赵文海，一名 Android 开发仔，坐标北京，目前工作刚满一年，在这里分享一下自己学习“深入浅出计算机组成原理”专栏的心得。&lt;/p&gt;&#xA;&lt;h2 id=&#34;为什么要学计算机组成原理&#34;&gt;为什么要学计算机组成原理？&lt;/h2&gt;&#xA;&lt;p&gt;一直以来我心里都有一个念想，就是好好把计算机基础知识补一补，原因有两个。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
